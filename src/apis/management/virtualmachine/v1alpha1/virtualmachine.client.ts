// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "management/virtualmachine/v1alpha1/virtualmachine.proto" (package "vink.kubevm.io.apis.management.virtualmachine.v1alpha1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { VirtualMachineManagement } from "./virtualmachine";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Empty } from "../../../google/protobuf/empty";
import type { VirtualMachinePowerStateRequest } from "./virtualmachine";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service vink.kubevm.io.apis.management.virtualmachine.v1alpha1.VirtualMachineManagement
 */
export interface IVirtualMachineManagementClient {
    /**
     * @generated from protobuf rpc: VirtualMachinePowerState(vink.kubevm.io.apis.management.virtualmachine.v1alpha1.VirtualMachinePowerStateRequest) returns (google.protobuf.Empty);
     */
    virtualMachinePowerState(input: VirtualMachinePowerStateRequest, options?: RpcOptions): UnaryCall<VirtualMachinePowerStateRequest, Empty>;
}
/**
 * @generated from protobuf service vink.kubevm.io.apis.management.virtualmachine.v1alpha1.VirtualMachineManagement
 */
export class VirtualMachineManagementClient implements IVirtualMachineManagementClient, ServiceInfo {
    typeName = VirtualMachineManagement.typeName;
    methods = VirtualMachineManagement.methods;
    options = VirtualMachineManagement.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: VirtualMachinePowerState(vink.kubevm.io.apis.management.virtualmachine.v1alpha1.VirtualMachinePowerStateRequest) returns (google.protobuf.Empty);
     */
    virtualMachinePowerState(input: VirtualMachinePowerStateRequest, options?: RpcOptions): UnaryCall<VirtualMachinePowerStateRequest, Empty> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<VirtualMachinePowerStateRequest, Empty>("unary", this._transport, method, opt, input);
    }
}
