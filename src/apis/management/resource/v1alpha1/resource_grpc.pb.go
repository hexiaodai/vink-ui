// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: management/resource/v1alpha1/resource.proto

package v1alpha1

import (
	context "context"
	v1alpha1 "github.com/kubevm.io/vink/apis/apiextensions/v1alpha1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ResourceManagementClient is the client API for ResourceManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceManagementClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*v1alpha1.CustomResourceDefinition, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*v1alpha1.CustomResourceDefinition, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*v1alpha1.CustomResourceDefinition, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type resourceManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceManagementClient(cc grpc.ClientConnInterface) ResourceManagementClient {
	return &resourceManagementClient{cc}
}

func (c *resourceManagementClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*v1alpha1.CustomResourceDefinition, error) {
	out := new(v1alpha1.CustomResourceDefinition)
	err := c.cc.Invoke(ctx, "/vink.kubevm.io.apis.management.resource.v1alpha1.ResourceManagement/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagementClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*v1alpha1.CustomResourceDefinition, error) {
	out := new(v1alpha1.CustomResourceDefinition)
	err := c.cc.Invoke(ctx, "/vink.kubevm.io.apis.management.resource.v1alpha1.ResourceManagement/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagementClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*v1alpha1.CustomResourceDefinition, error) {
	out := new(v1alpha1.CustomResourceDefinition)
	err := c.cc.Invoke(ctx, "/vink.kubevm.io.apis.management.resource.v1alpha1.ResourceManagement/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagementClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/vink.kubevm.io.apis.management.resource.v1alpha1.ResourceManagement/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceManagementServer is the server API for ResourceManagement service.
// All implementations must embed UnimplementedResourceManagementServer
// for forward compatibility
type ResourceManagementServer interface {
	Get(context.Context, *GetRequest) (*v1alpha1.CustomResourceDefinition, error)
	Create(context.Context, *CreateRequest) (*v1alpha1.CustomResourceDefinition, error)
	Update(context.Context, *UpdateRequest) (*v1alpha1.CustomResourceDefinition, error)
	Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedResourceManagementServer()
}

// UnimplementedResourceManagementServer must be embedded to have forward compatible implementations.
type UnimplementedResourceManagementServer struct {
}

func (UnimplementedResourceManagementServer) Get(context.Context, *GetRequest) (*v1alpha1.CustomResourceDefinition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedResourceManagementServer) Create(context.Context, *CreateRequest) (*v1alpha1.CustomResourceDefinition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedResourceManagementServer) Update(context.Context, *UpdateRequest) (*v1alpha1.CustomResourceDefinition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedResourceManagementServer) Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedResourceManagementServer) mustEmbedUnimplementedResourceManagementServer() {}

// UnsafeResourceManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceManagementServer will
// result in compilation errors.
type UnsafeResourceManagementServer interface {
	mustEmbedUnimplementedResourceManagementServer()
}

func RegisterResourceManagementServer(s grpc.ServiceRegistrar, srv ResourceManagementServer) {
	s.RegisterService(&ResourceManagement_ServiceDesc, srv)
}

func _ResourceManagement_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagementServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vink.kubevm.io.apis.management.resource.v1alpha1.ResourceManagement/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagementServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManagement_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagementServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vink.kubevm.io.apis.management.resource.v1alpha1.ResourceManagement/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagementServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManagement_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagementServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vink.kubevm.io.apis.management.resource.v1alpha1.ResourceManagement/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagementServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManagement_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagementServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vink.kubevm.io.apis.management.resource.v1alpha1.ResourceManagement/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagementServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourceManagement_ServiceDesc is the grpc.ServiceDesc for ResourceManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourceManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vink.kubevm.io.apis.management.resource.v1alpha1.ResourceManagement",
	HandlerType: (*ResourceManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ResourceManagement_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ResourceManagement_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ResourceManagement_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ResourceManagement_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "management/resource/v1alpha1/resource.proto",
}
