// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "types/field_selector.proto" (package "vink.kubevm.io.apis.types", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message vink.kubevm.io.apis.types.FieldSelector
 */
export interface FieldSelector {
    /**
     * @generated from protobuf field: repeated vink.kubevm.io.apis.types.Condition conditions = 1;
     */
    conditions: Condition[];
    /**
     * @generated from protobuf field: vink.kubevm.io.apis.types.FieldSelector.Operator operator = 2;
     */
    operator: FieldSelector_Operator;
}
/**
 * @generated from protobuf enum vink.kubevm.io.apis.types.FieldSelector.Operator
 */
export enum FieldSelector_Operator {
    /**
     * @generated from protobuf enum value: AND = 0;
     */
    AND = 0,
    /**
     * @generated from protobuf enum value: OR = 1;
     */
    OR = 1
}
/**
 * @generated from protobuf message vink.kubevm.io.apis.types.Condition
 */
export interface Condition {
    /**
     * @generated from protobuf field: repeated string fields = 1;
     */
    fields: string[];
    /**
     * @generated from protobuf field: vink.kubevm.io.apis.types.Condition.Operator operator = 2;
     */
    operator: Condition_Operator;
    /**
     * @generated from protobuf field: string value = 3;
     */
    value: string;
}
/**
 * @generated from protobuf enum vink.kubevm.io.apis.types.Condition.Operator
 */
export enum Condition_Operator {
    /**
     * @generated from protobuf enum value: EQUAL = 0;
     */
    EQUAL = 0,
    /**
     * @generated from protobuf enum value: NOT_EQUAL = 1;
     */
    NOT_EQUAL = 1,
    /**
     * @generated from protobuf enum value: FUZZY = 2;
     */
    FUZZY = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class FieldSelector$Type extends MessageType<FieldSelector> {
    constructor() {
        super("vink.kubevm.io.apis.types.FieldSelector", [
            { no: 1, name: "conditions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Condition },
            { no: 2, name: "operator", kind: "enum", T: () => ["vink.kubevm.io.apis.types.FieldSelector.Operator", FieldSelector_Operator] }
        ]);
    }
    create(value?: PartialMessage<FieldSelector>): FieldSelector {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.conditions = [];
        message.operator = 0;
        if (value !== undefined)
            reflectionMergePartial<FieldSelector>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldSelector): FieldSelector {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated vink.kubevm.io.apis.types.Condition conditions */ 1:
                    message.conditions.push(Condition.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* vink.kubevm.io.apis.types.FieldSelector.Operator operator */ 2:
                    message.operator = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FieldSelector, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated vink.kubevm.io.apis.types.Condition conditions = 1; */
        for (let i = 0; i < message.conditions.length; i++)
            Condition.internalBinaryWrite(message.conditions[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* vink.kubevm.io.apis.types.FieldSelector.Operator operator = 2; */
        if (message.operator !== 0)
            writer.tag(2, WireType.Varint).int32(message.operator);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message vink.kubevm.io.apis.types.FieldSelector
 */
export const FieldSelector = new FieldSelector$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Condition$Type extends MessageType<Condition> {
    constructor() {
        super("vink.kubevm.io.apis.types.Condition", [
            { no: 1, name: "fields", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "operator", kind: "enum", T: () => ["vink.kubevm.io.apis.types.Condition.Operator", Condition_Operator] },
            { no: 3, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Condition>): Condition {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fields = [];
        message.operator = 0;
        message.value = "";
        if (value !== undefined)
            reflectionMergePartial<Condition>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Condition): Condition {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string fields */ 1:
                    message.fields.push(reader.string());
                    break;
                case /* vink.kubevm.io.apis.types.Condition.Operator operator */ 2:
                    message.operator = reader.int32();
                    break;
                case /* string value */ 3:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Condition, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string fields = 1; */
        for (let i = 0; i < message.fields.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.fields[i]);
        /* vink.kubevm.io.apis.types.Condition.Operator operator = 2; */
        if (message.operator !== 0)
            writer.tag(2, WireType.Varint).int32(message.operator);
        /* string value = 3; */
        if (message.value !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message vink.kubevm.io.apis.types.Condition
 */
export const Condition = new Condition$Type();
