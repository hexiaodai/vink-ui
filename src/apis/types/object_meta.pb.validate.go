// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: types/object_meta.proto

package types

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on OwnerReference with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OwnerReference) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OwnerReference with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OwnerReferenceMultiError,
// or nil if none found.
func (m *OwnerReference) ValidateAll() error {
	return m.validate(true)
}

func (m *OwnerReference) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApiVersion

	// no validation rules for Kind

	// no validation rules for Name

	// no validation rules for Uid

	// no validation rules for Controller

	// no validation rules for BlockOwnerDeletion

	if len(errors) > 0 {
		return OwnerReferenceMultiError(errors)
	}

	return nil
}

// OwnerReferenceMultiError is an error wrapping multiple validation errors
// returned by OwnerReference.ValidateAll() if the designated constraints
// aren't met.
type OwnerReferenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OwnerReferenceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OwnerReferenceMultiError) AllErrors() []error { return m }

// OwnerReferenceValidationError is the validation error returned by
// OwnerReference.Validate if the designated constraints aren't met.
type OwnerReferenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OwnerReferenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OwnerReferenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OwnerReferenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OwnerReferenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OwnerReferenceValidationError) ErrorName() string { return "OwnerReferenceValidationError" }

// Error satisfies the builtin error interface
func (e OwnerReferenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOwnerReference.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OwnerReferenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OwnerReferenceValidationError{}

// Validate checks the field values on ObjectMeta with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ObjectMeta) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectMeta with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ObjectMetaMultiError, or
// nil if none found.
func (m *ObjectMeta) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectMeta) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for GenerateName

	// no validation rules for Namespace

	// no validation rules for SelfLink

	// no validation rules for Uid

	// no validation rules for ResourceVersion

	// no validation rules for Generation

	// no validation rules for CreationTimestamp

	// no validation rules for DeletionTimestamp

	// no validation rules for DeletionGracePeriodSeconds

	// no validation rules for Labels

	// no validation rules for Annotations

	for idx, item := range m.GetOwnerReferences() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ObjectMetaValidationError{
						field:  fmt.Sprintf("OwnerReferences[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ObjectMetaValidationError{
						field:  fmt.Sprintf("OwnerReferences[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ObjectMetaValidationError{
					field:  fmt.Sprintf("OwnerReferences[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ObjectMetaMultiError(errors)
	}

	return nil
}

// ObjectMetaMultiError is an error wrapping multiple validation errors
// returned by ObjectMeta.ValidateAll() if the designated constraints aren't met.
type ObjectMetaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectMetaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectMetaMultiError) AllErrors() []error { return m }

// ObjectMetaValidationError is the validation error returned by
// ObjectMeta.Validate if the designated constraints aren't met.
type ObjectMetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectMetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectMetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectMetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectMetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectMetaValidationError) ErrorName() string { return "ObjectMetaValidationError" }

// Error satisfies the builtin error interface
func (e ObjectMetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectMeta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectMetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectMetaValidationError{}

// Validate checks the field values on Selector with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Selector) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Selector with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SelectorMultiError, or nil
// if none found.
func (m *Selector) ValidateAll() error {
	return m.validate(true)
}

func (m *Selector) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MatchLabels

	if len(errors) > 0 {
		return SelectorMultiError(errors)
	}

	return nil
}

// SelectorMultiError is an error wrapping multiple validation errors returned
// by Selector.ValidateAll() if the designated constraints aren't met.
type SelectorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SelectorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SelectorMultiError) AllErrors() []error { return m }

// SelectorValidationError is the validation error returned by
// Selector.Validate if the designated constraints aren't met.
type SelectorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SelectorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SelectorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SelectorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SelectorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SelectorValidationError) ErrorName() string { return "SelectorValidationError" }

// Error satisfies the builtin error interface
func (e SelectorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSelector.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SelectorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SelectorValidationError{}

// Validate checks the field values on LabelSelector with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LabelSelector) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LabelSelector with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LabelSelectorMultiError, or
// nil if none found.
func (m *LabelSelector) ValidateAll() error {
	return m.validate(true)
}

func (m *LabelSelector) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MatchLabels

	for idx, item := range m.GetMatchExpressions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LabelSelectorValidationError{
						field:  fmt.Sprintf("MatchExpressions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LabelSelectorValidationError{
						field:  fmt.Sprintf("MatchExpressions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LabelSelectorValidationError{
					field:  fmt.Sprintf("MatchExpressions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LabelSelectorMultiError(errors)
	}

	return nil
}

// LabelSelectorMultiError is an error wrapping multiple validation errors
// returned by LabelSelector.ValidateAll() if the designated constraints
// aren't met.
type LabelSelectorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LabelSelectorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LabelSelectorMultiError) AllErrors() []error { return m }

// LabelSelectorValidationError is the validation error returned by
// LabelSelector.Validate if the designated constraints aren't met.
type LabelSelectorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LabelSelectorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LabelSelectorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LabelSelectorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LabelSelectorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LabelSelectorValidationError) ErrorName() string { return "LabelSelectorValidationError" }

// Error satisfies the builtin error interface
func (e LabelSelectorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLabelSelector.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LabelSelectorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LabelSelectorValidationError{}

// Validate checks the field values on LabelSelectorRequirement with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LabelSelectorRequirement) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LabelSelectorRequirement with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LabelSelectorRequirementMultiError, or nil if none found.
func (m *LabelSelectorRequirement) ValidateAll() error {
	return m.validate(true)
}

func (m *LabelSelectorRequirement) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Operator

	if len(errors) > 0 {
		return LabelSelectorRequirementMultiError(errors)
	}

	return nil
}

// LabelSelectorRequirementMultiError is an error wrapping multiple validation
// errors returned by LabelSelectorRequirement.ValidateAll() if the designated
// constraints aren't met.
type LabelSelectorRequirementMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LabelSelectorRequirementMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LabelSelectorRequirementMultiError) AllErrors() []error { return m }

// LabelSelectorRequirementValidationError is the validation error returned by
// LabelSelectorRequirement.Validate if the designated constraints aren't met.
type LabelSelectorRequirementValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LabelSelectorRequirementValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LabelSelectorRequirementValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LabelSelectorRequirementValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LabelSelectorRequirementValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LabelSelectorRequirementValidationError) ErrorName() string {
	return "LabelSelectorRequirementValidationError"
}

// Error satisfies the builtin error interface
func (e LabelSelectorRequirementValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLabelSelectorRequirement.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LabelSelectorRequirementValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LabelSelectorRequirementValidationError{}
