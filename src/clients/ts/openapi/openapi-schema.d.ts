/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = Record<string, never>;
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description DataVolume is an abstraction on top of PersistentVolumeClaims to allow easy population of those PersistentVolumeClaims with relation to VirtualMachines */
        v1beta1DataVolume: {
            /** @description APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources */
            apiVersion?: string;
            /** @description Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds */
            kind?: string;
            metadata?: Record<string, any>;
            /** @description DataVolumeSpec defines the DataVolume type specification */
            spec: {
                /** @description Checkpoints is a list of DataVolumeCheckpoints, representing stages in a multistage import. */
                checkpoints?: {
                    /** @description Current is the identifier of the snapshot created for this checkpoint. */
                    current: string;
                    /** @description Previous is the identifier of the snapshot from the previous checkpoint. */
                    previous: string;
                }[];
                /**
                 * @description DataVolumeContentType options: "kubevirt", "archive"
                 * @enum {string}
                 */
                contentType?: "kubevirt" | "archive";
                /** @description FinalCheckpoint indicates whether the current DataVolumeCheckpoint is the final checkpoint. */
                finalCheckpoint?: boolean;
                /** @description Preallocation controls whether storage for DataVolumes should be allocated in advance. */
                preallocation?: boolean;
                /** @description PriorityClassName for Importer, Cloner and Uploader pod */
                priorityClassName?: string;
                /** @description PVC is the PVC specification */
                pvc?: {
                    /** @description accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1 */
                    accessModes?: string[];
                    /** @description dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource. */
                    dataSource?: {
                        /** @description APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required. */
                        apiGroup?: string;
                        /** @description Kind is the type of resource being referenced */
                        kind: string;
                        /** @description Name is the name of resource being referenced */
                        name: string;
                    };
                    /** @description dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified. * While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled. */
                    dataSourceRef?: {
                        /** @description APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required. */
                        apiGroup?: string;
                        /** @description Kind is the type of resource being referenced */
                        kind: string;
                        /** @description Name is the name of resource being referenced */
                        name: string;
                        /** @description Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled. */
                        namespace?: string;
                    };
                    /** @description resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources */
                    resources?: {
                        /** @description Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
                         *      This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
                         *      This field is immutable. */
                        claims?: {
                            /** @description Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container. */
                            name: string;
                        }[];
                        /** @description Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ */
                        limits?: {
                            [key: string]: number | string;
                        };
                        /** @description Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ */
                        requests?: {
                            [key: string]: number | string;
                        };
                    };
                    /** @description selector is a label query over volumes to consider for binding. */
                    selector?: {
                        /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                        matchExpressions?: {
                            /** @description key is the label key that the selector applies to. */
                            key: string;
                            /** @description operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. */
                            operator: string;
                            /** @description values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. */
                            values?: string[];
                        }[];
                        /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed. */
                        matchLabels?: {
                            [key: string]: string;
                        };
                    };
                    /** @description storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1 */
                    storageClassName?: string;
                    /** @description volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. */
                    volumeMode?: string;
                    /** @description volumeName is the binding reference to the PersistentVolume backing this claim. */
                    volumeName?: string;
                };
                /** @description Source is the src of the data for the requested DataVolume */
                source?: {
                    /** @description DataVolumeBlankImage provides the parameters to create a new raw blank image for the PVC */
                    blank?: Record<string, never>;
                    /** @description DataVolumeSourceGCS provides the parameters to create a Data Volume from an GCS source */
                    gcs?: {
                        /** @description SecretRef provides the secret reference needed to access the GCS source */
                        secretRef?: string;
                        /** @description URL is the url of the GCS source */
                        url: string;
                    };
                    /** @description DataVolumeSourceHTTP can be either an http or https endpoint, with an optional basic auth user name and password, and an optional configmap containing additional CAs */
                    http?: {
                        /** @description CertConfigMap is a configmap reference, containing a Certificate Authority(CA) public key, and a base64 encoded pem certificate */
                        certConfigMap?: string;
                        /** @description ExtraHeaders is a list of strings containing extra headers to include with HTTP transfer requests */
                        extraHeaders?: string[];
                        /** @description SecretExtraHeaders is a list of Secret references, each containing an extra HTTP header that may include sensitive information */
                        secretExtraHeaders?: string[];
                        /** @description SecretRef A Secret reference, the secret should contain accessKeyId (user name) base64 encoded, and secretKey (password) also base64 encoded */
                        secretRef?: string;
                        /** @description URL is the URL of the http(s) endpoint */
                        url: string;
                    };
                    /** @description DataVolumeSourceImageIO provides the parameters to create a Data Volume from an imageio source */
                    imageio?: {
                        /** @description CertConfigMap provides a reference to the CA cert */
                        certConfigMap?: string;
                        /** @description DiskID provides id of a disk to be imported */
                        diskId: string;
                        /** @description SecretRef provides the secret reference needed to access the ovirt-engine */
                        secretRef?: string;
                        /** @description URL is the URL of the ovirt-engine */
                        url: string;
                    };
                    /** @description DataVolumeSourcePVC provides the parameters to create a Data Volume from an existing PVC */
                    pvc?: {
                        /** @description The name of the source PVC */
                        name: string;
                        /** @description The namespace of the source PVC */
                        namespace: string;
                    };
                    /** @description DataVolumeSourceRegistry provides the parameters to create a Data Volume from an registry source */
                    registry?: {
                        /** @description CertConfigMap provides a reference to the Registry certs */
                        certConfigMap?: string;
                        /** @description ImageStream is the name of image stream for import */
                        imageStream?: string;
                        /** @description PullMethod can be either "pod" (default import), or "node" (node docker cache based import) */
                        pullMethod?: string;
                        /** @description SecretRef provides the secret reference needed to access the Registry source */
                        secretRef?: string;
                        /** @description URL is the url of the registry source (starting with the scheme: docker, oci-archive) */
                        url?: string;
                    };
                    /** @description DataVolumeSourceS3 provides the parameters to create a Data Volume from an S3 source */
                    s3?: {
                        /** @description CertConfigMap is a configmap reference, containing a Certificate Authority(CA) public key, and a base64 encoded pem certificate */
                        certConfigMap?: string;
                        /** @description SecretRef provides the secret reference needed to access the S3 source */
                        secretRef?: string;
                        /** @description URL is the url of the S3 source */
                        url: string;
                    };
                    /** @description DataVolumeSourceSnapshot provides the parameters to create a Data Volume from an existing VolumeSnapshot */
                    snapshot?: {
                        /** @description The name of the source VolumeSnapshot */
                        name: string;
                        /** @description The namespace of the source VolumeSnapshot */
                        namespace: string;
                    };
                    /** @description DataVolumeSourceUpload provides the parameters to create a Data Volume by uploading the source */
                    upload?: Record<string, never>;
                    /** @description DataVolumeSourceVDDK provides the parameters to create a Data Volume from a Vmware source */
                    vddk?: {
                        /** @description BackingFile is the path to the virtual hard disk to migrate from vCenter/ESXi */
                        backingFile?: string;
                        /** @description InitImageURL is an optional URL to an image containing an extracted VDDK library, overrides v2v-vmware config map */
                        initImageURL?: string;
                        /** @description SecretRef provides a reference to a secret containing the username and password needed to access the vCenter or ESXi host */
                        secretRef?: string;
                        /** @description Thumbprint is the certificate thumbprint of the vCenter or ESXi host */
                        thumbprint?: string;
                        /** @description URL is the URL of the vCenter or ESXi host with the VM to migrate */
                        url?: string;
                        /** @description UUID is the UUID of the virtual machine that the backing file is attached to in vCenter/ESXi */
                        uuid?: string;
                    };
                };
                /** @description SourceRef is an indirect reference to the source of data for the requested DataVolume */
                sourceRef?: {
                    /** @description The kind of the source reference, currently only "DataSource" is supported */
                    kind: string;
                    /** @description The name of the source reference */
                    name: string;
                    /** @description The namespace of the source reference, defaults to the DataVolume namespace */
                    namespace?: string;
                };
                /** @description Storage is the requested storage specification */
                storage?: {
                    /** @description AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1 */
                    accessModes?: string[];
                    /** @description This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) * An existing custom resource that implements data population (Alpha) In order to use custom resource types that implement data population, the AnyVolumeDataSource feature gate must be enabled. If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field. */
                    dataSource?: {
                        /** @description APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required. */
                        apiGroup?: string;
                        /** @description Kind is the type of resource being referenced */
                        kind: string;
                        /** @description Name is the name of resource being referenced */
                        name: string;
                    };
                    /** @description Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. */
                    dataSourceRef?: {
                        /** @description APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required. */
                        apiGroup?: string;
                        /** @description Kind is the type of resource being referenced */
                        kind: string;
                        /** @description Name is the name of resource being referenced */
                        name: string;
                        /** @description Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled. */
                        namespace?: string;
                    };
                    /** @description Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources */
                    resources?: {
                        /** @description Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
                         *      This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
                         *      This field is immutable. */
                        claims?: {
                            /** @description Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container. */
                            name: string;
                        }[];
                        /** @description Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ */
                        limits?: {
                            [key: string]: number | string;
                        };
                        /** @description Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ */
                        requests?: {
                            [key: string]: number | string;
                        };
                    };
                    /** @description A label query over volumes to consider for binding. */
                    selector?: {
                        /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                        matchExpressions?: {
                            /** @description key is the label key that the selector applies to. */
                            key: string;
                            /** @description operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. */
                            operator: string;
                            /** @description values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. */
                            values?: string[];
                        }[];
                        /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed. */
                        matchLabels?: {
                            [key: string]: string;
                        };
                    };
                    /** @description Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1 */
                    storageClassName?: string;
                    /** @description volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. */
                    volumeMode?: string;
                    /** @description VolumeName is the binding reference to the PersistentVolume backing this claim. */
                    volumeName?: string;
                };
            };
            /** @description DataVolumeStatus contains the current status of the DataVolume */
            status?: {
                /** @description ClaimName is the name of the underlying PVC used by the DataVolume. */
                claimName?: string;
                conditions?: {
                    /** Format: date-time */
                    lastHeartbeatTime?: string;
                    /** Format: date-time */
                    lastTransitionTime?: string;
                    message?: string;
                    reason?: string;
                    status: string;
                    /** @description DataVolumeConditionType is the string representation of known condition types */
                    type: string;
                }[];
                /** @description Phase is the current phase of the data volume */
                phase?: string;
                /** @description DataVolumeProgress is the current progress of the DataVolume transfer operation. Value between 0 and 100 inclusive, N/A if not available */
                progress?: string;
                /**
                 * Format: int32
                 * @description RestartCount is the number of times the pod populating the DataVolume has restarted
                 */
                restartCount?: number;
            };
        };
        v1IPPool: {
            kind?: string;
            metadata?: Record<string, any>;
            spec?: {
                subnet: string;
                namespaces?: string[];
                ips: (string | unknown | unknown | unknown | unknown | unknown)[];
            };
            status?: {
                v4AvailableIPs?: number;
                v4UsingIPs?: number;
                v6AvailableIPs?: number;
                v6UsingIPs?: number;
                v4AvailableIPRange?: string;
                v4UsingIPRange?: string;
                v6AvailableIPRange?: string;
                v6UsingIPRange?: string;
                conditions?: {
                    type?: string;
                    status?: string;
                    reason?: string;
                    message?: string;
                    lastUpdateTime?: string;
                    lastTransitionTime?: string;
                }[];
            };
        };
        v1IP: {
            kind?: string;
            metadata?: Record<string, any>;
            spec?: {
                podName?: string;
                namespace?: string;
                subnet?: string;
                attachSubnets?: string[];
                nodeName?: string;
                ipAddress?: string;
                v4IpAddress?: string;
                v6IpAddress?: string;
                attachIps?: string[];
                macAddress?: string;
                attachMacs?: string[];
                containerID?: string;
                podType?: string;
            };
        };
        /** @description NetworkAttachmentDefinition is a CRD schema specified by the Network Plumbing Working Group to express the intent for attaching pods to one or more logical or physical networks. More information available at: https://github.com/k8snetworkplumbingwg/multi-net-spec */
        v1NetworkAttachmentDefinition: {
            /** @description APIVersion defines the versioned schema of this represen tation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources */
            apiVersion?: string;
            /** @description Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds */
            kind?: string;
            metadata?: Record<string, any>;
            /** @description NetworkAttachmentDefinition spec defines the desired state of a network attachment */
            spec?: {
                /** @description NetworkAttachmentDefinition config is a JSON-formatted CNI configuration */
                config?: string;
            };
        };
        v1Subnet: {
            kind?: string;
            metadata?: Record<string, any>;
            status?: {
                v4availableIPs?: number;
                v4usingIPs?: number;
                v6availableIPs?: number;
                v6usingIPs?: number;
                activateGateway?: string;
                dhcpV4OptionsUUID?: string;
                dhcpV6OptionsUUID?: string;
                u2oInterconnectionIP?: string;
                u2oInterconnectionMAC?: string;
                u2oInterconnectionVPC?: string;
                mcastQuerierIP?: string;
                mcastQuerierMAC?: string;
                v4usingIPrange?: string;
                v4availableIPrange?: string;
                v6usingIPrange?: string;
                v6availableIPrange?: string;
                natOutgoingPolicyRules?: {
                    ruleID?: string;
                    /** @enum {string} */
                    action?: "nat" | "forward";
                    match?: {
                        srcIPs?: string;
                        dstIPs?: string;
                    };
                }[];
                conditions?: {
                    type?: string;
                    status?: string;
                    reason?: string;
                    message?: string;
                    lastUpdateTime?: string;
                    lastTransitionTime?: string;
                }[];
            };
            spec?: {
                vpc?: string;
                default?: boolean;
                /** @enum {string} */
                protocol?: "IPv4" | "IPv6" | "Dual";
                cidrBlock?: string;
                namespaces?: string[];
                gateway?: string;
                provider?: string;
                excludeIps?: string[];
                vips?: string[];
                gatewayType?: string;
                allowSubnets?: string[];
                gatewayNode?: string;
                natOutgoing?: boolean;
                externalEgressGateway?: string;
                policyRoutingPriority?: number;
                policyRoutingTableID?: number;
                mtu?: number;
                private?: boolean;
                vlan?: string;
                logicalGateway?: boolean;
                disableGatewayCheck?: boolean;
                disableInterConnection?: boolean;
                enableDHCP?: boolean;
                dhcpV4Options?: string;
                dhcpV6Options?: string;
                enableIPv6RA?: boolean;
                ipv6RAConfigs?: string;
                allowEWTraffic?: boolean;
                acls?: {
                    /** @enum {string} */
                    direction?: "from-lport" | "to-lport";
                    priority?: number;
                    match?: string;
                    /** @enum {string} */
                    action?: "allow-related" | "allow-stateless" | "allow" | "drop" | "reject";
                }[];
                natOutgoingPolicyRules?: {
                    /** @enum {string} */
                    action?: "nat" | "forward";
                    match?: {
                        srcIPs?: string;
                        dstIPs?: string;
                    };
                }[];
                u2oInterconnection?: boolean;
                u2oInterconnectionIP?: string;
                enableLb?: boolean;
                enableEcmp?: boolean;
                enableMulticastSnoop?: boolean;
                routeTable?: string;
                namespaceSelectors?: {
                    matchLabels?: {
                        [key: string]: string;
                    };
                    matchExpressions?: {
                        key?: string;
                        operator?: string;
                        values?: string[];
                    }[];
                }[];
            };
        };
        v1alpha1VirtualMachineSummary: {
            /** @description APIVersion defines the versioned schema of this representation of an object.
             *     Servers should convert recognized schemas to the latest internal value, and
             *     may reject unrecognized values.
             *     More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources */
            apiVersion?: string;
            /** @description Kind is a string value representing the REST resource this object represents.
             *     Servers may infer this from the endpoint the client submits requests to.
             *     Cannot be updated.
             *     In CamelCase.
             *     More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds */
            kind?: string;
            metadata?: Record<string, any>;
            spec?: Record<string, never>;
            status?: {
                dataVolumes?: {
                    metadata?: Record<string, any>;
                    /** @description DataVolumeSpec defines the DataVolume type specification */
                    spec?: {
                        /** @description Checkpoints is a list of DataVolumeCheckpoints, representing stages in a multistage import. */
                        checkpoints?: {
                            /** @description Current is the identifier of the snapshot created for this checkpoint. */
                            current: string;
                            /** @description Previous is the identifier of the snapshot from the previous checkpoint. */
                            previous: string;
                        }[];
                        /**
                         * @description DataVolumeContentType options: "kubevirt", "archive"
                         * @enum {string}
                         */
                        contentType?: "kubevirt" | "archive";
                        /** @description FinalCheckpoint indicates whether the current DataVolumeCheckpoint is the final checkpoint. */
                        finalCheckpoint?: boolean;
                        /** @description Preallocation controls whether storage for DataVolumes should be allocated in advance. */
                        preallocation?: boolean;
                        /** @description PriorityClassName for Importer, Cloner and Uploader pod */
                        priorityClassName?: string;
                        /** @description PVC is the PVC specification */
                        pvc?: {
                            /** @description accessModes contains the desired access modes the volume should have.
                             *     More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1 */
                            accessModes?: string[];
                            /** @description dataSource field can be used to specify either:
                             *     * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
                             *     * An existing PVC (PersistentVolumeClaim)
                             *     If the provisioner or an external controller can support the specified data source,
                             *     it will create a new volume based on the contents of the specified data source.
                             *     When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
                             *     and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
                             *     If the namespace is specified, then dataSourceRef will not be copied to dataSource. */
                            dataSource?: {
                                /** @description APIGroup is the group for the resource being referenced.
                                 *     If APIGroup is not specified, the specified Kind must be in the core API group.
                                 *     For any other third-party types, APIGroup is required. */
                                apiGroup?: string;
                                /** @description Kind is the type of resource being referenced */
                                kind: string;
                                /** @description Name is the name of resource being referenced */
                                name: string;
                            };
                            /** @description dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
                             *     volume is desired. This may be any object from a non-empty API group (non
                             *     core object) or a PersistentVolumeClaim object.
                             *     When this field is specified, volume binding will only succeed if the type of
                             *     the specified object matches some installed volume populator or dynamic
                             *     provisioner.
                             *     This field will replace the functionality of the dataSource field and as such
                             *     if both fields are non-empty, they must have the same value. For backwards
                             *     compatibility, when namespace isn't specified in dataSourceRef,
                             *     both fields (dataSource and dataSourceRef) will be set to the same
                             *     value automatically if one of them is empty and the other is non-empty.
                             *     When namespace is specified in dataSourceRef,
                             *     dataSource isn't set to the same value and must be empty.
                             *     There are three important differences between dataSource and dataSourceRef:
                             *     * While dataSource only allows two specific types of objects, dataSourceRef
                             *       allows any non-core object, as well as PersistentVolumeClaim objects.
                             *     * While dataSource ignores disallowed values (dropping them), dataSourceRef
                             *       preserves all values, and generates an error if a disallowed value is
                             *       specified.
                             *     * While dataSource only allows local objects, dataSourceRef allows objects
                             *       in any namespaces.
                             *     (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
                             *     (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled. */
                            dataSourceRef?: {
                                /** @description APIGroup is the group for the resource being referenced.
                                 *     If APIGroup is not specified, the specified Kind must be in the core API group.
                                 *     For any other third-party types, APIGroup is required. */
                                apiGroup?: string;
                                /** @description Kind is the type of resource being referenced */
                                kind: string;
                                /** @description Name is the name of resource being referenced */
                                name: string;
                                /** @description Namespace is the namespace of resource being referenced
                                 *     Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
                                 *     (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled. */
                                namespace?: string;
                            };
                            /** @description resources represents the minimum resources the volume should have.
                             *     If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
                             *     that are lower than previous value but must still be higher than capacity recorded in the
                             *     status field of the claim.
                             *     More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources */
                            resources?: {
                                /** @description Limits describes the maximum amount of compute resources allowed.
                                 *     More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ */
                                limits?: {
                                    [key: string]: number | string;
                                };
                                /** @description Requests describes the minimum amount of compute resources required.
                                 *     If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
                                 *     otherwise to an implementation-defined value. Requests cannot exceed Limits.
                                 *     More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ */
                                requests?: {
                                    [key: string]: number | string;
                                };
                            };
                            /** @description selector is a label query over volumes to consider for binding. */
                            selector?: {
                                /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                                matchExpressions?: {
                                    /** @description key is the label key that the selector applies to. */
                                    key: string;
                                    /** @description operator represents a key's relationship to a set of values.
                                     *     Valid operators are In, NotIn, Exists and DoesNotExist. */
                                    operator: string;
                                    /** @description values is an array of string values. If the operator is In or NotIn,
                                     *     the values array must be non-empty. If the operator is Exists or DoesNotExist,
                                     *     the values array must be empty. This array is replaced during a strategic
                                     *     merge patch. */
                                    values?: string[];
                                }[];
                                /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
                                 *     map is equivalent to an element of matchExpressions, whose key field is "key", the
                                 *     operator is "In", and the values array contains only "value". The requirements are ANDed. */
                                matchLabels?: {
                                    [key: string]: string;
                                };
                            };
                            /** @description storageClassName is the name of the StorageClass required by the claim.
                             *     More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1 */
                            storageClassName?: string;
                            /** @description volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
                             *     If specified, the CSI driver will create or update the volume with the attributes defined
                             *     in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
                             *     it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
                             *     will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
                             *     If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
                             *     will be set by the persistentvolume controller if it exists.
                             *     If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
                             *     set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
                             *     exists.
                             *     More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
                             *     (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default). */
                            volumeAttributesClassName?: string;
                            /** @description volumeMode defines what type of volume is required by the claim.
                             *     Value of Filesystem is implied when not included in claim spec. */
                            volumeMode?: string;
                            /** @description volumeName is the binding reference to the PersistentVolume backing this claim. */
                            volumeName?: string;
                        };
                        /** @description Source is the src of the data for the requested DataVolume */
                        source?: {
                            /** @description DataVolumeBlankImage provides the parameters to create a new raw blank image for the PVC */
                            blank?: Record<string, never>;
                            /** @description DataVolumeSourceGCS provides the parameters to create a Data Volume from an GCS source */
                            gcs?: {
                                /** @description SecretRef provides the secret reference needed to access the GCS source */
                                secretRef?: string;
                                /** @description URL is the url of the GCS source */
                                url: string;
                            };
                            /** @description DataVolumeSourceHTTP can be either an http or https endpoint, with an optional basic auth user name and password, and an optional configmap containing additional CAs */
                            http?: {
                                /** @description CertConfigMap is a configmap reference, containing a Certificate Authority(CA) public key, and a base64 encoded pem certificate */
                                certConfigMap?: string;
                                /** @description ExtraHeaders is a list of strings containing extra headers to include with HTTP transfer requests */
                                extraHeaders?: string[];
                                /** @description SecretExtraHeaders is a list of Secret references, each containing an extra HTTP header that may include sensitive information */
                                secretExtraHeaders?: string[];
                                /** @description SecretRef A Secret reference, the secret should contain accessKeyId (user name) base64 encoded, and secretKey (password) also base64 encoded */
                                secretRef?: string;
                                /** @description URL is the URL of the http(s) endpoint */
                                url: string;
                            };
                            /** @description DataVolumeSourceImageIO provides the parameters to create a Data Volume from an imageio source */
                            imageio?: {
                                /** @description CertConfigMap provides a reference to the CA cert */
                                certConfigMap?: string;
                                /** @description DiskID provides id of a disk to be imported */
                                diskId: string;
                                /** @description SecretRef provides the secret reference needed to access the ovirt-engine */
                                secretRef?: string;
                                /** @description URL is the URL of the ovirt-engine */
                                url: string;
                            };
                            /** @description DataVolumeSourcePVC provides the parameters to create a Data Volume from an existing PVC */
                            pvc?: {
                                /** @description The name of the source PVC */
                                name: string;
                                /** @description The namespace of the source PVC */
                                namespace: string;
                            };
                            /** @description DataVolumeSourceRegistry provides the parameters to create a Data Volume from an registry source */
                            registry?: {
                                /** @description CertConfigMap provides a reference to the Registry certs */
                                certConfigMap?: string;
                                /** @description ImageStream is the name of image stream for import */
                                imageStream?: string;
                                /** @description PullMethod can be either "pod" (default import), or "node" (node docker cache based import) */
                                pullMethod?: string;
                                /** @description SecretRef provides the secret reference needed to access the Registry source */
                                secretRef?: string;
                                /** @description URL is the url of the registry source (starting with the scheme: docker, oci-archive) */
                                url?: string;
                            };
                            /** @description DataVolumeSourceS3 provides the parameters to create a Data Volume from an S3 source */
                            s3?: {
                                /** @description CertConfigMap is a configmap reference, containing a Certificate Authority(CA) public key, and a base64 encoded pem certificate */
                                certConfigMap?: string;
                                /** @description SecretRef provides the secret reference needed to access the S3 source */
                                secretRef?: string;
                                /** @description URL is the url of the S3 source */
                                url: string;
                            };
                            /** @description DataVolumeSourceSnapshot provides the parameters to create a Data Volume from an existing VolumeSnapshot */
                            snapshot?: {
                                /** @description The name of the source VolumeSnapshot */
                                name: string;
                                /** @description The namespace of the source VolumeSnapshot */
                                namespace: string;
                            };
                            /** @description DataVolumeSourceUpload provides the parameters to create a Data Volume by uploading the source */
                            upload?: Record<string, never>;
                            /** @description DataVolumeSourceVDDK provides the parameters to create a Data Volume from a Vmware source */
                            vddk?: {
                                /** @description BackingFile is the path to the virtual hard disk to migrate from vCenter/ESXi */
                                backingFile?: string;
                                /** @description InitImageURL is an optional URL to an image containing an extracted VDDK library, overrides v2v-vmware config map */
                                initImageURL?: string;
                                /** @description SecretRef provides a reference to a secret containing the username and password needed to access the vCenter or ESXi host */
                                secretRef?: string;
                                /** @description Thumbprint is the certificate thumbprint of the vCenter or ESXi host */
                                thumbprint?: string;
                                /** @description URL is the URL of the vCenter or ESXi host with the VM to migrate */
                                url?: string;
                                /** @description UUID is the UUID of the virtual machine that the backing file is attached to in vCenter/ESXi */
                                uuid?: string;
                            };
                        };
                        /** @description SourceRef is an indirect reference to the source of data for the requested DataVolume */
                        sourceRef?: {
                            /** @description The kind of the source reference, currently only "DataSource" is supported */
                            kind: string;
                            /** @description The name of the source reference */
                            name: string;
                            /** @description The namespace of the source reference, defaults to the DataVolume namespace */
                            namespace?: string;
                        };
                        /** @description Storage is the requested storage specification */
                        storage?: {
                            /** @description AccessModes contains the desired access modes the volume should have.
                             *     More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1 */
                            accessModes?: string[];
                            /** @description This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) * An existing custom resource that implements data population (Alpha) In order to use custom resource types that implement data population, the AnyVolumeDataSource feature gate must be enabled. If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source.
                             *     If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field. */
                            dataSource?: {
                                /** @description APIGroup is the group for the resource being referenced.
                                 *     If APIGroup is not specified, the specified Kind must be in the core API group.
                                 *     For any other third-party types, APIGroup is required. */
                                apiGroup?: string;
                                /** @description Kind is the type of resource being referenced */
                                kind: string;
                                /** @description Name is the name of resource being referenced */
                                name: string;
                            };
                            /** @description Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner.
                             *     This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty.
                             *     There are two important differences between DataSource and DataSourceRef:
                             *     * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects.
                             *     * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified.
                             *     (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. */
                            dataSourceRef?: {
                                /** @description APIGroup is the group for the resource being referenced.
                                 *     If APIGroup is not specified, the specified Kind must be in the core API group.
                                 *     For any other third-party types, APIGroup is required. */
                                apiGroup?: string;
                                /** @description Kind is the type of resource being referenced */
                                kind: string;
                                /** @description Name is the name of resource being referenced */
                                name: string;
                                /** @description Namespace is the namespace of resource being referenced
                                 *     Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
                                 *     (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled. */
                                namespace?: string;
                            };
                            /** @description Resources represents the minimum resources the volume should have.
                             *     More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources */
                            resources?: {
                                /** @description Claims lists the names of resources, defined in spec.resourceClaims,
                                 *     that are used by this container.
                                 *
                                 *     This is an alpha field and requires enabling the
                                 *     DynamicResourceAllocation feature gate.
                                 *
                                 *     This field is immutable. It can only be set for containers. */
                                claims?: {
                                    /** @description Name must match the name of one entry in pod.spec.resourceClaims of
                                     *     the Pod where this field is used. It makes that resource available
                                     *     inside a container. */
                                    name: string;
                                    /** @description Request is the name chosen for a request in the referenced claim.
                                     *     If empty, everything from the claim is made available, otherwise
                                     *     only the result of this request. */
                                    request?: string;
                                }[];
                                /** @description Limits describes the maximum amount of compute resources allowed.
                                 *     More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ */
                                limits?: {
                                    [key: string]: number | string;
                                };
                                /** @description Requests describes the minimum amount of compute resources required.
                                 *     If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
                                 *     otherwise to an implementation-defined value. Requests cannot exceed Limits.
                                 *     More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ */
                                requests?: {
                                    [key: string]: number | string;
                                };
                            };
                            /** @description A label query over volumes to consider for binding. */
                            selector?: {
                                /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                                matchExpressions?: {
                                    /** @description key is the label key that the selector applies to. */
                                    key: string;
                                    /** @description operator represents a key's relationship to a set of values.
                                     *     Valid operators are In, NotIn, Exists and DoesNotExist. */
                                    operator: string;
                                    /** @description values is an array of string values. If the operator is In or NotIn,
                                     *     the values array must be non-empty. If the operator is Exists or DoesNotExist,
                                     *     the values array must be empty. This array is replaced during a strategic
                                     *     merge patch. */
                                    values?: string[];
                                }[];
                                /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
                                 *     map is equivalent to an element of matchExpressions, whose key field is "key", the
                                 *     operator is "In", and the values array contains only "value". The requirements are ANDed. */
                                matchLabels?: {
                                    [key: string]: string;
                                };
                            };
                            /** @description Name of the StorageClass required by the claim.
                             *     More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1 */
                            storageClassName?: string;
                            /** @description volumeMode defines what type of volume is required by the claim.
                             *     Value of Filesystem is implied when not included in claim spec. */
                            volumeMode?: string;
                            /** @description VolumeName is the binding reference to the PersistentVolume backing this claim. */
                            volumeName?: string;
                        };
                    };
                    /** @description DataVolumeStatus contains the current status of the DataVolume */
                    status?: {
                        /** @description ClaimName is the name of the underlying PVC used by the DataVolume. */
                        claimName?: string;
                        conditions?: {
                            /** Format: date-time */
                            lastHeartbeatTime?: string;
                            /** Format: date-time */
                            lastTransitionTime?: string;
                            message?: string;
                            reason?: string;
                            status: string;
                            /** @description DataVolumeConditionType is the string representation of known condition types */
                            type: string;
                        }[];
                        /** @description Phase is the current phase of the data volume */
                        phase?: string;
                        /** @description DataVolumeProgress is the current progress of the DataVolume transfer operation. Value between 0 and 100 inclusive, N/A if not available */
                        progress?: string;
                        /**
                         * Format: int32
                         * @description RestartCount is the number of times the pod populating the DataVolume has restarted
                         */
                        restartCount?: number;
                    };
                }[];
                network?: {
                    ips?: {
                        metadata?: Record<string, any>;
                        spec?: {
                            attachIps: string[];
                            attachMacs: string[];
                            attachSubnets: string[];
                            containerID: string;
                            ipAddress: string;
                            macAddress: string;
                            namespace: string;
                            nodeName: string;
                            podName: string;
                            podType: string;
                            subnet: string;
                            v4IpAddress: string;
                            v6IpAddress: string;
                        };
                    }[];
                };
                virtualMachine?: {
                    metadata?: Record<string, any>;
                    /** @description VirtualMachineSpec describes how the proper VirtualMachine
                     *     should look like */
                    spec?: {
                        /** @description dataVolumeTemplates is a list of dataVolumes that the VirtualMachineInstance template can reference.
                         *     DataVolumes in this list are dynamically created for the VirtualMachine and are tied to the VirtualMachine's life-cycle. */
                        dataVolumeTemplates?: ({
                            /** @description APIVersion defines the versioned schema of this representation of an object.
                             *     Servers should convert recognized schemas to the latest internal value, and
                             *     may reject unrecognized values.
                             *     More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources */
                            apiVersion?: string;
                            /** @description Kind is a string value representing the REST resource this object represents.
                             *     Servers may infer this from the endpoint the client submits requests to.
                             *     Cannot be updated.
                             *     In CamelCase.
                             *     More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds */
                            kind?: string;
                            metadata?: Record<string, any> | null;
                            /** @description DataVolumeSpec contains the DataVolume specification. */
                            spec: {
                                /** @description Checkpoints is a list of DataVolumeCheckpoints, representing stages in a multistage import. */
                                checkpoints?: {
                                    /** @description Current is the identifier of the snapshot created for this checkpoint. */
                                    current: string;
                                    /** @description Previous is the identifier of the snapshot from the previous checkpoint. */
                                    previous: string;
                                }[];
                                /**
                                 * @description DataVolumeContentType options: "kubevirt", "archive"
                                 * @enum {string}
                                 */
                                contentType?: "kubevirt" | "archive";
                                /** @description FinalCheckpoint indicates whether the current DataVolumeCheckpoint is the final checkpoint. */
                                finalCheckpoint?: boolean;
                                /** @description Preallocation controls whether storage for DataVolumes should be allocated in advance. */
                                preallocation?: boolean;
                                /** @description PriorityClassName for Importer, Cloner and Uploader pod */
                                priorityClassName?: string;
                                /** @description PVC is the PVC specification */
                                pvc?: {
                                    /** @description accessModes contains the desired access modes the volume should have.
                                     *     More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1 */
                                    accessModes?: string[];
                                    /** @description dataSource field can be used to specify either:
                                     *     * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
                                     *     * An existing PVC (PersistentVolumeClaim)
                                     *     If the provisioner or an external controller can support the specified data source,
                                     *     it will create a new volume based on the contents of the specified data source.
                                     *     When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
                                     *     and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
                                     *     If the namespace is specified, then dataSourceRef will not be copied to dataSource. */
                                    dataSource?: {
                                        /** @description APIGroup is the group for the resource being referenced.
                                         *     If APIGroup is not specified, the specified Kind must be in the core API group.
                                         *     For any other third-party types, APIGroup is required. */
                                        apiGroup?: string;
                                        /** @description Kind is the type of resource being referenced */
                                        kind: string;
                                        /** @description Name is the name of resource being referenced */
                                        name: string;
                                    };
                                    /** @description dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
                                     *     volume is desired. This may be any object from a non-empty API group (non
                                     *     core object) or a PersistentVolumeClaim object.
                                     *     When this field is specified, volume binding will only succeed if the type of
                                     *     the specified object matches some installed volume populator or dynamic
                                     *     provisioner.
                                     *     This field will replace the functionality of the dataSource field and as such
                                     *     if both fields are non-empty, they must have the same value. For backwards
                                     *     compatibility, when namespace isn't specified in dataSourceRef,
                                     *     both fields (dataSource and dataSourceRef) will be set to the same
                                     *     value automatically if one of them is empty and the other is non-empty.
                                     *     When namespace is specified in dataSourceRef,
                                     *     dataSource isn't set to the same value and must be empty.
                                     *     There are three important differences between dataSource and dataSourceRef:
                                     *     * While dataSource only allows two specific types of objects, dataSourceRef
                                     *       allows any non-core object, as well as PersistentVolumeClaim objects.
                                     *     * While dataSource ignores disallowed values (dropping them), dataSourceRef
                                     *       preserves all values, and generates an error if a disallowed value is
                                     *       specified.
                                     *     * While dataSource only allows local objects, dataSourceRef allows objects
                                     *       in any namespaces.
                                     *     (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
                                     *     (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled. */
                                    dataSourceRef?: {
                                        /** @description APIGroup is the group for the resource being referenced.
                                         *     If APIGroup is not specified, the specified Kind must be in the core API group.
                                         *     For any other third-party types, APIGroup is required. */
                                        apiGroup?: string;
                                        /** @description Kind is the type of resource being referenced */
                                        kind: string;
                                        /** @description Name is the name of resource being referenced */
                                        name: string;
                                        /** @description Namespace is the namespace of resource being referenced
                                         *     Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
                                         *     (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled. */
                                        namespace?: string;
                                    };
                                    /** @description resources represents the minimum resources the volume should have.
                                     *     If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
                                     *     that are lower than previous value but must still be higher than capacity recorded in the
                                     *     status field of the claim.
                                     *     More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources */
                                    resources?: {
                                        /** @description Limits describes the maximum amount of compute resources allowed.
                                         *     More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ */
                                        limits?: {
                                            [key: string]: number | string;
                                        };
                                        /** @description Requests describes the minimum amount of compute resources required.
                                         *     If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
                                         *     otherwise to an implementation-defined value. Requests cannot exceed Limits.
                                         *     More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ */
                                        requests?: {
                                            [key: string]: number | string;
                                        };
                                    };
                                    /** @description selector is a label query over volumes to consider for binding. */
                                    selector?: {
                                        /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                                        matchExpressions?: {
                                            /** @description key is the label key that the selector applies to. */
                                            key: string;
                                            /** @description operator represents a key's relationship to a set of values.
                                             *     Valid operators are In, NotIn, Exists and DoesNotExist. */
                                            operator: string;
                                            /** @description values is an array of string values. If the operator is In or NotIn,
                                             *     the values array must be non-empty. If the operator is Exists or DoesNotExist,
                                             *     the values array must be empty. This array is replaced during a strategic
                                             *     merge patch. */
                                            values?: string[];
                                        }[];
                                        /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
                                         *     map is equivalent to an element of matchExpressions, whose key field is "key", the
                                         *     operator is "In", and the values array contains only "value". The requirements are ANDed. */
                                        matchLabels?: {
                                            [key: string]: string;
                                        };
                                    };
                                    /** @description storageClassName is the name of the StorageClass required by the claim.
                                     *     More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1 */
                                    storageClassName?: string;
                                    /** @description volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
                                     *     If specified, the CSI driver will create or update the volume with the attributes defined
                                     *     in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
                                     *     it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
                                     *     will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
                                     *     If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
                                     *     will be set by the persistentvolume controller if it exists.
                                     *     If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
                                     *     set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
                                     *     exists.
                                     *     More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
                                     *     (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default). */
                                    volumeAttributesClassName?: string;
                                    /** @description volumeMode defines what type of volume is required by the claim.
                                     *     Value of Filesystem is implied when not included in claim spec. */
                                    volumeMode?: string;
                                    /** @description volumeName is the binding reference to the PersistentVolume backing this claim. */
                                    volumeName?: string;
                                };
                                /** @description Source is the src of the data for the requested DataVolume */
                                source?: {
                                    /** @description DataVolumeBlankImage provides the parameters to create a new raw blank image for the PVC */
                                    blank?: Record<string, never>;
                                    /** @description DataVolumeSourceGCS provides the parameters to create a Data Volume from an GCS source */
                                    gcs?: {
                                        /** @description SecretRef provides the secret reference needed to access the GCS source */
                                        secretRef?: string;
                                        /** @description URL is the url of the GCS source */
                                        url: string;
                                    };
                                    /** @description DataVolumeSourceHTTP can be either an http or https endpoint, with an optional basic auth user name and password, and an optional configmap containing additional CAs */
                                    http?: {
                                        /** @description CertConfigMap is a configmap reference, containing a Certificate Authority(CA) public key, and a base64 encoded pem certificate */
                                        certConfigMap?: string;
                                        /** @description ExtraHeaders is a list of strings containing extra headers to include with HTTP transfer requests */
                                        extraHeaders?: string[];
                                        /** @description SecretExtraHeaders is a list of Secret references, each containing an extra HTTP header that may include sensitive information */
                                        secretExtraHeaders?: string[];
                                        /** @description SecretRef A Secret reference, the secret should contain accessKeyId (user name) base64 encoded, and secretKey (password) also base64 encoded */
                                        secretRef?: string;
                                        /** @description URL is the URL of the http(s) endpoint */
                                        url: string;
                                    };
                                    /** @description DataVolumeSourceImageIO provides the parameters to create a Data Volume from an imageio source */
                                    imageio?: {
                                        /** @description CertConfigMap provides a reference to the CA cert */
                                        certConfigMap?: string;
                                        /** @description DiskID provides id of a disk to be imported */
                                        diskId: string;
                                        /** @description SecretRef provides the secret reference needed to access the ovirt-engine */
                                        secretRef?: string;
                                        /** @description URL is the URL of the ovirt-engine */
                                        url: string;
                                    };
                                    /** @description DataVolumeSourcePVC provides the parameters to create a Data Volume from an existing PVC */
                                    pvc?: {
                                        /** @description The name of the source PVC */
                                        name: string;
                                        /** @description The namespace of the source PVC */
                                        namespace: string;
                                    };
                                    /** @description DataVolumeSourceRegistry provides the parameters to create a Data Volume from an registry source */
                                    registry?: {
                                        /** @description CertConfigMap provides a reference to the Registry certs */
                                        certConfigMap?: string;
                                        /** @description ImageStream is the name of image stream for import */
                                        imageStream?: string;
                                        /** @description PullMethod can be either "pod" (default import), or "node" (node docker cache based import) */
                                        pullMethod?: string;
                                        /** @description SecretRef provides the secret reference needed to access the Registry source */
                                        secretRef?: string;
                                        /** @description URL is the url of the registry source (starting with the scheme: docker, oci-archive) */
                                        url?: string;
                                    };
                                    /** @description DataVolumeSourceS3 provides the parameters to create a Data Volume from an S3 source */
                                    s3?: {
                                        /** @description CertConfigMap is a configmap reference, containing a Certificate Authority(CA) public key, and a base64 encoded pem certificate */
                                        certConfigMap?: string;
                                        /** @description SecretRef provides the secret reference needed to access the S3 source */
                                        secretRef?: string;
                                        /** @description URL is the url of the S3 source */
                                        url: string;
                                    };
                                    /** @description DataVolumeSourceSnapshot provides the parameters to create a Data Volume from an existing VolumeSnapshot */
                                    snapshot?: {
                                        /** @description The name of the source VolumeSnapshot */
                                        name: string;
                                        /** @description The namespace of the source VolumeSnapshot */
                                        namespace: string;
                                    };
                                    /** @description DataVolumeSourceUpload provides the parameters to create a Data Volume by uploading the source */
                                    upload?: Record<string, never>;
                                    /** @description DataVolumeSourceVDDK provides the parameters to create a Data Volume from a Vmware source */
                                    vddk?: {
                                        /** @description BackingFile is the path to the virtual hard disk to migrate from vCenter/ESXi */
                                        backingFile?: string;
                                        /** @description InitImageURL is an optional URL to an image containing an extracted VDDK library, overrides v2v-vmware config map */
                                        initImageURL?: string;
                                        /** @description SecretRef provides a reference to a secret containing the username and password needed to access the vCenter or ESXi host */
                                        secretRef?: string;
                                        /** @description Thumbprint is the certificate thumbprint of the vCenter or ESXi host */
                                        thumbprint?: string;
                                        /** @description URL is the URL of the vCenter or ESXi host with the VM to migrate */
                                        url?: string;
                                        /** @description UUID is the UUID of the virtual machine that the backing file is attached to in vCenter/ESXi */
                                        uuid?: string;
                                    };
                                };
                                /** @description SourceRef is an indirect reference to the source of data for the requested DataVolume */
                                sourceRef?: {
                                    /** @description The kind of the source reference, currently only "DataSource" is supported */
                                    kind: string;
                                    /** @description The name of the source reference */
                                    name: string;
                                    /** @description The namespace of the source reference, defaults to the DataVolume namespace */
                                    namespace?: string;
                                };
                                /** @description Storage is the requested storage specification */
                                storage?: {
                                    /** @description AccessModes contains the desired access modes the volume should have.
                                     *     More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1 */
                                    accessModes?: string[];
                                    /** @description This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) * An existing custom resource that implements data population (Alpha) In order to use custom resource types that implement data population, the AnyVolumeDataSource feature gate must be enabled. If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source.
                                     *     If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field. */
                                    dataSource?: {
                                        /** @description APIGroup is the group for the resource being referenced.
                                         *     If APIGroup is not specified, the specified Kind must be in the core API group.
                                         *     For any other third-party types, APIGroup is required. */
                                        apiGroup?: string;
                                        /** @description Kind is the type of resource being referenced */
                                        kind: string;
                                        /** @description Name is the name of resource being referenced */
                                        name: string;
                                    };
                                    /** @description Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner.
                                     *     This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty.
                                     *     There are two important differences between DataSource and DataSourceRef:
                                     *     * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects.
                                     *     * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified.
                                     *     (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. */
                                    dataSourceRef?: {
                                        /** @description APIGroup is the group for the resource being referenced.
                                         *     If APIGroup is not specified, the specified Kind must be in the core API group.
                                         *     For any other third-party types, APIGroup is required. */
                                        apiGroup?: string;
                                        /** @description Kind is the type of resource being referenced */
                                        kind: string;
                                        /** @description Name is the name of resource being referenced */
                                        name: string;
                                        /** @description Namespace is the namespace of resource being referenced
                                         *     Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
                                         *     (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled. */
                                        namespace?: string;
                                    };
                                    /** @description Resources represents the minimum resources the volume should have.
                                     *     More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources */
                                    resources?: {
                                        /** @description Claims lists the names of resources, defined in spec.resourceClaims,
                                         *     that are used by this container.
                                         *
                                         *     This is an alpha field and requires enabling the
                                         *     DynamicResourceAllocation feature gate.
                                         *
                                         *     This field is immutable. It can only be set for containers. */
                                        claims?: {
                                            /** @description Name must match the name of one entry in pod.spec.resourceClaims of
                                             *     the Pod where this field is used. It makes that resource available
                                             *     inside a container. */
                                            name: string;
                                            /** @description Request is the name chosen for a request in the referenced claim.
                                             *     If empty, everything from the claim is made available, otherwise
                                             *     only the result of this request. */
                                            request?: string;
                                        }[];
                                        /** @description Limits describes the maximum amount of compute resources allowed.
                                         *     More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ */
                                        limits?: {
                                            [key: string]: number | string;
                                        };
                                        /** @description Requests describes the minimum amount of compute resources required.
                                         *     If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
                                         *     otherwise to an implementation-defined value. Requests cannot exceed Limits.
                                         *     More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ */
                                        requests?: {
                                            [key: string]: number | string;
                                        };
                                    };
                                    /** @description A label query over volumes to consider for binding. */
                                    selector?: {
                                        /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                                        matchExpressions?: {
                                            /** @description key is the label key that the selector applies to. */
                                            key: string;
                                            /** @description operator represents a key's relationship to a set of values.
                                             *     Valid operators are In, NotIn, Exists and DoesNotExist. */
                                            operator: string;
                                            /** @description values is an array of string values. If the operator is In or NotIn,
                                             *     the values array must be non-empty. If the operator is Exists or DoesNotExist,
                                             *     the values array must be empty. This array is replaced during a strategic
                                             *     merge patch. */
                                            values?: string[];
                                        }[];
                                        /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
                                         *     map is equivalent to an element of matchExpressions, whose key field is "key", the
                                         *     operator is "In", and the values array contains only "value". The requirements are ANDed. */
                                        matchLabels?: {
                                            [key: string]: string;
                                        };
                                    };
                                    /** @description Name of the StorageClass required by the claim.
                                     *     More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1 */
                                    storageClassName?: string;
                                    /** @description volumeMode defines what type of volume is required by the claim.
                                     *     Value of Filesystem is implied when not included in claim spec. */
                                    volumeMode?: string;
                                    /** @description VolumeName is the binding reference to the PersistentVolume backing this claim. */
                                    volumeName?: string;
                                };
                            };
                            /** @description DataVolumeTemplateDummyStatus is here simply for backwards compatibility with
                             *     a previous API. */
                            status?: Record<string, never> | null;
                        } | null)[];
                        /** @description InstancetypeMatcher references a instancetype that is used to fill fields in Template */
                        instancetype?: {
                            /** @description InferFromVolume lists the name of a volume that should be used to infer or discover the instancetype
                             *     to be used through known annotations on the underlying resource. Once applied to the InstancetypeMatcher
                             *     this field is removed. */
                            inferFromVolume?: string;
                            /** @description InferFromVolumeFailurePolicy controls what should happen on failure when inferring the instancetype.
                             *     Allowed values are: "RejectInferFromVolumeFailure" and "IgnoreInferFromVolumeFailure".
                             *     If not specified, "RejectInferFromVolumeFailure" is used by default. */
                            inferFromVolumeFailurePolicy?: string;
                            /** @description Kind specifies which instancetype resource is referenced.
                             *     Allowed values are: "VirtualMachineInstancetype" and "VirtualMachineClusterInstancetype".
                             *     If not specified, "VirtualMachineClusterInstancetype" is used by default. */
                            kind?: string;
                            /** @description Name is the name of the VirtualMachineInstancetype or VirtualMachineClusterInstancetype */
                            name?: string;
                            /** @description RevisionName specifies a ControllerRevision containing a specific copy of the
                             *     VirtualMachineInstancetype or VirtualMachineClusterInstancetype to be used. This is initially
                             *     captured the first time the instancetype is applied to the VirtualMachineInstance. */
                            revisionName?: string;
                        };
                        /** @description PreferenceMatcher references a set of preference that is used to fill fields in Template */
                        preference?: {
                            /** @description InferFromVolume lists the name of a volume that should be used to infer or discover the preference
                             *     to be used through known annotations on the underlying resource. Once applied to the PreferenceMatcher
                             *     this field is removed. */
                            inferFromVolume?: string;
                            /** @description InferFromVolumeFailurePolicy controls what should happen on failure when preference the instancetype.
                             *     Allowed values are: "RejectInferFromVolumeFailure" and "IgnoreInferFromVolumeFailure".
                             *     If not specified, "RejectInferFromVolumeFailure" is used by default. */
                            inferFromVolumeFailurePolicy?: string;
                            /** @description Kind specifies which preference resource is referenced.
                             *     Allowed values are: "VirtualMachinePreference" and "VirtualMachineClusterPreference".
                             *     If not specified, "VirtualMachineClusterPreference" is used by default. */
                            kind?: string;
                            /** @description Name is the name of the VirtualMachinePreference or VirtualMachineClusterPreference */
                            name?: string;
                            /** @description RevisionName specifies a ControllerRevision containing a specific copy of the
                             *     VirtualMachinePreference or VirtualMachineClusterPreference to be used. This is
                             *     initially captured the first time the instancetype is applied to the VirtualMachineInstance. */
                            revisionName?: string;
                        };
                        /** @description Running state indicates the requested running state of the VirtualMachineInstance
                         *     mutually exclusive with Running */
                        runStrategy?: string;
                        /** @description Running controls whether the associatied VirtualMachineInstance is created or not
                         *     Mutually exclusive with RunStrategy */
                        running?: boolean;
                        /** @description Template is the direct specification of VirtualMachineInstance */
                        template: {
                            metadata?: Record<string, any> | null;
                            /** @description VirtualMachineInstance Spec contains the VirtualMachineInstance specification. */
                            spec?: {
                                /** @description Specifies a set of public keys to inject into the vm guest */
                                accessCredentials?: {
                                    /** @description SSHPublicKey represents the source and method of applying a ssh public
                                     *     key into a guest virtual machine. */
                                    sshPublicKey?: {
                                        /** @description PropagationMethod represents how the public key is injected into the vm guest. */
                                        propagationMethod: {
                                            /** @description ConfigDrivePropagation means that the ssh public keys are injected
                                             *     into the VM using metadata using the configDrive cloud-init provider */
                                            configDrive?: Record<string, never>;
                                            /** @description NoCloudPropagation means that the ssh public keys are injected
                                             *     into the VM using metadata using the noCloud cloud-init provider */
                                            noCloud?: Record<string, never>;
                                            /** @description QemuGuestAgentAccessCredentailPropagation means ssh public keys are
                                             *     dynamically injected into the vm at runtime via the qemu guest agent.
                                             *     This feature requires the qemu guest agent to be running within the guest. */
                                            qemuGuestAgent?: {
                                                /** @description Users represents a list of guest users that should have the ssh public keys
                                                 *     added to their authorized_keys file. */
                                                users: string[];
                                            };
                                        };
                                        /** @description Source represents where the public keys are pulled from */
                                        source: {
                                            /** @description Secret means that the access credential is pulled from a kubernetes secret */
                                            secret?: {
                                                /** @description SecretName represents the name of the secret in the VMI's namespace */
                                                secretName: string;
                                            };
                                        };
                                    };
                                    /** @description UserPassword represents the source and method for applying a guest user's
                                     *     password */
                                    userPassword?: {
                                        /** @description propagationMethod represents how the user passwords are injected into the vm guest. */
                                        propagationMethod: {
                                            /** @description QemuGuestAgentAccessCredentailPropagation means passwords are
                                             *     dynamically injected into the vm at runtime via the qemu guest agent.
                                             *     This feature requires the qemu guest agent to be running within the guest. */
                                            qemuGuestAgent?: Record<string, never>;
                                        };
                                        /** @description Source represents where the user passwords are pulled from */
                                        source: {
                                            /** @description Secret means that the access credential is pulled from a kubernetes secret */
                                            secret?: {
                                                /** @description SecretName represents the name of the secret in the VMI's namespace */
                                                secretName: string;
                                            };
                                        };
                                    };
                                }[];
                                /** @description If affinity is specifies, obey all the affinity rules */
                                affinity?: {
                                    /** @description Describes node affinity scheduling rules for the pod. */
                                    nodeAffinity?: {
                                        /** @description The scheduler will prefer to schedule pods to nodes that satisfy
                                         *     the affinity expressions specified by this field, but it may choose
                                         *     a node that violates one or more of the expressions. The node that is
                                         *     most preferred is the one with the greatest sum of weights, i.e.
                                         *     for each node that meets all of the scheduling requirements (resource
                                         *     request, requiredDuringScheduling affinity expressions, etc.),
                                         *     compute a sum by iterating through the elements of this field and adding
                                         *     "weight" to the sum if the node matches the corresponding matchExpressions; the
                                         *     node(s) with the highest sum are the most preferred. */
                                        preferredDuringSchedulingIgnoredDuringExecution?: {
                                            /** @description A node selector term, associated with the corresponding weight. */
                                            preference: {
                                                /** @description A list of node selector requirements by node's labels. */
                                                matchExpressions?: {
                                                    /** @description The label key that the selector applies to. */
                                                    key: string;
                                                    /** @description Represents a key's relationship to a set of values.
                                                     *     Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt. */
                                                    operator: string;
                                                    /** @description An array of string values. If the operator is In or NotIn,
                                                     *     the values array must be non-empty. If the operator is Exists or DoesNotExist,
                                                     *     the values array must be empty. If the operator is Gt or Lt, the values
                                                     *     array must have a single element, which will be interpreted as an integer.
                                                     *     This array is replaced during a strategic merge patch. */
                                                    values?: string[];
                                                }[];
                                                /** @description A list of node selector requirements by node's fields. */
                                                matchFields?: {
                                                    /** @description The label key that the selector applies to. */
                                                    key: string;
                                                    /** @description Represents a key's relationship to a set of values.
                                                     *     Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt. */
                                                    operator: string;
                                                    /** @description An array of string values. If the operator is In or NotIn,
                                                     *     the values array must be non-empty. If the operator is Exists or DoesNotExist,
                                                     *     the values array must be empty. If the operator is Gt or Lt, the values
                                                     *     array must have a single element, which will be interpreted as an integer.
                                                     *     This array is replaced during a strategic merge patch. */
                                                    values?: string[];
                                                }[];
                                            };
                                            /**
                                             * Format: int32
                                             * @description Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
                                             */
                                            weight: number;
                                        }[];
                                        /** @description If the affinity requirements specified by this field are not met at
                                         *     scheduling time, the pod will not be scheduled onto the node.
                                         *     If the affinity requirements specified by this field cease to be met
                                         *     at some point during pod execution (e.g. due to an update), the system
                                         *     may or may not try to eventually evict the pod from its node. */
                                        requiredDuringSchedulingIgnoredDuringExecution?: {
                                            /** @description Required. A list of node selector terms. The terms are ORed. */
                                            nodeSelectorTerms: {
                                                /** @description A list of node selector requirements by node's labels. */
                                                matchExpressions?: {
                                                    /** @description The label key that the selector applies to. */
                                                    key: string;
                                                    /** @description Represents a key's relationship to a set of values.
                                                     *     Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt. */
                                                    operator: string;
                                                    /** @description An array of string values. If the operator is In or NotIn,
                                                     *     the values array must be non-empty. If the operator is Exists or DoesNotExist,
                                                     *     the values array must be empty. If the operator is Gt or Lt, the values
                                                     *     array must have a single element, which will be interpreted as an integer.
                                                     *     This array is replaced during a strategic merge patch. */
                                                    values?: string[];
                                                }[];
                                                /** @description A list of node selector requirements by node's fields. */
                                                matchFields?: {
                                                    /** @description The label key that the selector applies to. */
                                                    key: string;
                                                    /** @description Represents a key's relationship to a set of values.
                                                     *     Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt. */
                                                    operator: string;
                                                    /** @description An array of string values. If the operator is In or NotIn,
                                                     *     the values array must be non-empty. If the operator is Exists or DoesNotExist,
                                                     *     the values array must be empty. If the operator is Gt or Lt, the values
                                                     *     array must have a single element, which will be interpreted as an integer.
                                                     *     This array is replaced during a strategic merge patch. */
                                                    values?: string[];
                                                }[];
                                            }[];
                                        };
                                    };
                                    /** @description Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)). */
                                    podAffinity?: {
                                        /** @description The scheduler will prefer to schedule pods to nodes that satisfy
                                         *     the affinity expressions specified by this field, but it may choose
                                         *     a node that violates one or more of the expressions. The node that is
                                         *     most preferred is the one with the greatest sum of weights, i.e.
                                         *     for each node that meets all of the scheduling requirements (resource
                                         *     request, requiredDuringScheduling affinity expressions, etc.),
                                         *     compute a sum by iterating through the elements of this field and adding
                                         *     "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
                                         *     node(s) with the highest sum are the most preferred. */
                                        preferredDuringSchedulingIgnoredDuringExecution?: {
                                            /** @description Required. A pod affinity term, associated with the corresponding weight. */
                                            podAffinityTerm: {
                                                /** @description A label query over a set of resources, in this case pods.
                                                 *     If it's null, this PodAffinityTerm matches with no Pods. */
                                                labelSelector?: {
                                                    /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                                                    matchExpressions?: {
                                                        /** @description key is the label key that the selector applies to. */
                                                        key: string;
                                                        /** @description operator represents a key's relationship to a set of values.
                                                         *     Valid operators are In, NotIn, Exists and DoesNotExist. */
                                                        operator: string;
                                                        /** @description values is an array of string values. If the operator is In or NotIn,
                                                         *     the values array must be non-empty. If the operator is Exists or DoesNotExist,
                                                         *     the values array must be empty. This array is replaced during a strategic
                                                         *     merge patch. */
                                                        values?: string[];
                                                    }[];
                                                    /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
                                                     *     map is equivalent to an element of matchExpressions, whose key field is "key", the
                                                     *     operator is "In", and the values array contains only "value". The requirements are ANDed. */
                                                    matchLabels?: {
                                                        [key: string]: string;
                                                    };
                                                };
                                                /** @description MatchLabelKeys is a set of pod label keys to select which pods will
                                                 *     be taken into consideration. The keys are used to lookup values from the
                                                 *     incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
                                                 *     to select the group of existing pods which pods will be taken into consideration
                                                 *     for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
                                                 *     pod labels will be ignored. The default value is empty.
                                                 *     The same key is forbidden to exist in both matchLabelKeys and labelSelector.
                                                 *     Also, matchLabelKeys cannot be set when labelSelector isn't set.
                                                 *     This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default). */
                                                matchLabelKeys?: string[];
                                                /** @description MismatchLabelKeys is a set of pod label keys to select which pods will
                                                 *     be taken into consideration. The keys are used to lookup values from the
                                                 *     incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
                                                 *     to select the group of existing pods which pods will be taken into consideration
                                                 *     for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
                                                 *     pod labels will be ignored. The default value is empty.
                                                 *     The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
                                                 *     Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
                                                 *     This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default). */
                                                mismatchLabelKeys?: string[];
                                                /** @description A label query over the set of namespaces that the term applies to.
                                                 *     The term is applied to the union of the namespaces selected by this field
                                                 *     and the ones listed in the namespaces field.
                                                 *     null selector and null or empty namespaces list means "this pod's namespace".
                                                 *     An empty selector ({}) matches all namespaces. */
                                                namespaceSelector?: {
                                                    /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                                                    matchExpressions?: {
                                                        /** @description key is the label key that the selector applies to. */
                                                        key: string;
                                                        /** @description operator represents a key's relationship to a set of values.
                                                         *     Valid operators are In, NotIn, Exists and DoesNotExist. */
                                                        operator: string;
                                                        /** @description values is an array of string values. If the operator is In or NotIn,
                                                         *     the values array must be non-empty. If the operator is Exists or DoesNotExist,
                                                         *     the values array must be empty. This array is replaced during a strategic
                                                         *     merge patch. */
                                                        values?: string[];
                                                    }[];
                                                    /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
                                                     *     map is equivalent to an element of matchExpressions, whose key field is "key", the
                                                     *     operator is "In", and the values array contains only "value". The requirements are ANDed. */
                                                    matchLabels?: {
                                                        [key: string]: string;
                                                    };
                                                };
                                                /** @description namespaces specifies a static list of namespace names that the term applies to.
                                                 *     The term is applied to the union of the namespaces listed in this field
                                                 *     and the ones selected by namespaceSelector.
                                                 *     null or empty namespaces list and null namespaceSelector means "this pod's namespace". */
                                                namespaces?: string[];
                                                /** @description This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
                                                 *     the labelSelector in the specified namespaces, where co-located is defined as running on a node
                                                 *     whose value of the label with key topologyKey matches that of any node on which any of the
                                                 *     selected pods is running.
                                                 *     Empty topologyKey is not allowed. */
                                                topologyKey: string;
                                            };
                                            /**
                                             * Format: int32
                                             * @description weight associated with matching the corresponding podAffinityTerm,
                                             *     in the range 1-100.
                                             */
                                            weight: number;
                                        }[];
                                        /** @description If the affinity requirements specified by this field are not met at
                                         *     scheduling time, the pod will not be scheduled onto the node.
                                         *     If the affinity requirements specified by this field cease to be met
                                         *     at some point during pod execution (e.g. due to a pod label update), the
                                         *     system may or may not try to eventually evict the pod from its node.
                                         *     When there are multiple elements, the lists of nodes corresponding to each
                                         *     podAffinityTerm are intersected, i.e. all terms must be satisfied. */
                                        requiredDuringSchedulingIgnoredDuringExecution?: {
                                            /** @description A label query over a set of resources, in this case pods.
                                             *     If it's null, this PodAffinityTerm matches with no Pods. */
                                            labelSelector?: {
                                                /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                                                matchExpressions?: {
                                                    /** @description key is the label key that the selector applies to. */
                                                    key: string;
                                                    /** @description operator represents a key's relationship to a set of values.
                                                     *     Valid operators are In, NotIn, Exists and DoesNotExist. */
                                                    operator: string;
                                                    /** @description values is an array of string values. If the operator is In or NotIn,
                                                     *     the values array must be non-empty. If the operator is Exists or DoesNotExist,
                                                     *     the values array must be empty. This array is replaced during a strategic
                                                     *     merge patch. */
                                                    values?: string[];
                                                }[];
                                                /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
                                                 *     map is equivalent to an element of matchExpressions, whose key field is "key", the
                                                 *     operator is "In", and the values array contains only "value". The requirements are ANDed. */
                                                matchLabels?: {
                                                    [key: string]: string;
                                                };
                                            };
                                            /** @description MatchLabelKeys is a set of pod label keys to select which pods will
                                             *     be taken into consideration. The keys are used to lookup values from the
                                             *     incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
                                             *     to select the group of existing pods which pods will be taken into consideration
                                             *     for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
                                             *     pod labels will be ignored. The default value is empty.
                                             *     The same key is forbidden to exist in both matchLabelKeys and labelSelector.
                                             *     Also, matchLabelKeys cannot be set when labelSelector isn't set.
                                             *     This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default). */
                                            matchLabelKeys?: string[];
                                            /** @description MismatchLabelKeys is a set of pod label keys to select which pods will
                                             *     be taken into consideration. The keys are used to lookup values from the
                                             *     incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
                                             *     to select the group of existing pods which pods will be taken into consideration
                                             *     for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
                                             *     pod labels will be ignored. The default value is empty.
                                             *     The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
                                             *     Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
                                             *     This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default). */
                                            mismatchLabelKeys?: string[];
                                            /** @description A label query over the set of namespaces that the term applies to.
                                             *     The term is applied to the union of the namespaces selected by this field
                                             *     and the ones listed in the namespaces field.
                                             *     null selector and null or empty namespaces list means "this pod's namespace".
                                             *     An empty selector ({}) matches all namespaces. */
                                            namespaceSelector?: {
                                                /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                                                matchExpressions?: {
                                                    /** @description key is the label key that the selector applies to. */
                                                    key: string;
                                                    /** @description operator represents a key's relationship to a set of values.
                                                     *     Valid operators are In, NotIn, Exists and DoesNotExist. */
                                                    operator: string;
                                                    /** @description values is an array of string values. If the operator is In or NotIn,
                                                     *     the values array must be non-empty. If the operator is Exists or DoesNotExist,
                                                     *     the values array must be empty. This array is replaced during a strategic
                                                     *     merge patch. */
                                                    values?: string[];
                                                }[];
                                                /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
                                                 *     map is equivalent to an element of matchExpressions, whose key field is "key", the
                                                 *     operator is "In", and the values array contains only "value". The requirements are ANDed. */
                                                matchLabels?: {
                                                    [key: string]: string;
                                                };
                                            };
                                            /** @description namespaces specifies a static list of namespace names that the term applies to.
                                             *     The term is applied to the union of the namespaces listed in this field
                                             *     and the ones selected by namespaceSelector.
                                             *     null or empty namespaces list and null namespaceSelector means "this pod's namespace". */
                                            namespaces?: string[];
                                            /** @description This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
                                             *     the labelSelector in the specified namespaces, where co-located is defined as running on a node
                                             *     whose value of the label with key topologyKey matches that of any node on which any of the
                                             *     selected pods is running.
                                             *     Empty topologyKey is not allowed. */
                                            topologyKey: string;
                                        }[];
                                    };
                                    /** @description Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)). */
                                    podAntiAffinity?: {
                                        /** @description The scheduler will prefer to schedule pods to nodes that satisfy
                                         *     the anti-affinity expressions specified by this field, but it may choose
                                         *     a node that violates one or more of the expressions. The node that is
                                         *     most preferred is the one with the greatest sum of weights, i.e.
                                         *     for each node that meets all of the scheduling requirements (resource
                                         *     request, requiredDuringScheduling anti-affinity expressions, etc.),
                                         *     compute a sum by iterating through the elements of this field and adding
                                         *     "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
                                         *     node(s) with the highest sum are the most preferred. */
                                        preferredDuringSchedulingIgnoredDuringExecution?: {
                                            /** @description Required. A pod affinity term, associated with the corresponding weight. */
                                            podAffinityTerm: {
                                                /** @description A label query over a set of resources, in this case pods.
                                                 *     If it's null, this PodAffinityTerm matches with no Pods. */
                                                labelSelector?: {
                                                    /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                                                    matchExpressions?: {
                                                        /** @description key is the label key that the selector applies to. */
                                                        key: string;
                                                        /** @description operator represents a key's relationship to a set of values.
                                                         *     Valid operators are In, NotIn, Exists and DoesNotExist. */
                                                        operator: string;
                                                        /** @description values is an array of string values. If the operator is In or NotIn,
                                                         *     the values array must be non-empty. If the operator is Exists or DoesNotExist,
                                                         *     the values array must be empty. This array is replaced during a strategic
                                                         *     merge patch. */
                                                        values?: string[];
                                                    }[];
                                                    /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
                                                     *     map is equivalent to an element of matchExpressions, whose key field is "key", the
                                                     *     operator is "In", and the values array contains only "value". The requirements are ANDed. */
                                                    matchLabels?: {
                                                        [key: string]: string;
                                                    };
                                                };
                                                /** @description MatchLabelKeys is a set of pod label keys to select which pods will
                                                 *     be taken into consideration. The keys are used to lookup values from the
                                                 *     incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
                                                 *     to select the group of existing pods which pods will be taken into consideration
                                                 *     for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
                                                 *     pod labels will be ignored. The default value is empty.
                                                 *     The same key is forbidden to exist in both matchLabelKeys and labelSelector.
                                                 *     Also, matchLabelKeys cannot be set when labelSelector isn't set.
                                                 *     This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default). */
                                                matchLabelKeys?: string[];
                                                /** @description MismatchLabelKeys is a set of pod label keys to select which pods will
                                                 *     be taken into consideration. The keys are used to lookup values from the
                                                 *     incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
                                                 *     to select the group of existing pods which pods will be taken into consideration
                                                 *     for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
                                                 *     pod labels will be ignored. The default value is empty.
                                                 *     The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
                                                 *     Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
                                                 *     This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default). */
                                                mismatchLabelKeys?: string[];
                                                /** @description A label query over the set of namespaces that the term applies to.
                                                 *     The term is applied to the union of the namespaces selected by this field
                                                 *     and the ones listed in the namespaces field.
                                                 *     null selector and null or empty namespaces list means "this pod's namespace".
                                                 *     An empty selector ({}) matches all namespaces. */
                                                namespaceSelector?: {
                                                    /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                                                    matchExpressions?: {
                                                        /** @description key is the label key that the selector applies to. */
                                                        key: string;
                                                        /** @description operator represents a key's relationship to a set of values.
                                                         *     Valid operators are In, NotIn, Exists and DoesNotExist. */
                                                        operator: string;
                                                        /** @description values is an array of string values. If the operator is In or NotIn,
                                                         *     the values array must be non-empty. If the operator is Exists or DoesNotExist,
                                                         *     the values array must be empty. This array is replaced during a strategic
                                                         *     merge patch. */
                                                        values?: string[];
                                                    }[];
                                                    /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
                                                     *     map is equivalent to an element of matchExpressions, whose key field is "key", the
                                                     *     operator is "In", and the values array contains only "value". The requirements are ANDed. */
                                                    matchLabels?: {
                                                        [key: string]: string;
                                                    };
                                                };
                                                /** @description namespaces specifies a static list of namespace names that the term applies to.
                                                 *     The term is applied to the union of the namespaces listed in this field
                                                 *     and the ones selected by namespaceSelector.
                                                 *     null or empty namespaces list and null namespaceSelector means "this pod's namespace". */
                                                namespaces?: string[];
                                                /** @description This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
                                                 *     the labelSelector in the specified namespaces, where co-located is defined as running on a node
                                                 *     whose value of the label with key topologyKey matches that of any node on which any of the
                                                 *     selected pods is running.
                                                 *     Empty topologyKey is not allowed. */
                                                topologyKey: string;
                                            };
                                            /**
                                             * Format: int32
                                             * @description weight associated with matching the corresponding podAffinityTerm,
                                             *     in the range 1-100.
                                             */
                                            weight: number;
                                        }[];
                                        /** @description If the anti-affinity requirements specified by this field are not met at
                                         *     scheduling time, the pod will not be scheduled onto the node.
                                         *     If the anti-affinity requirements specified by this field cease to be met
                                         *     at some point during pod execution (e.g. due to a pod label update), the
                                         *     system may or may not try to eventually evict the pod from its node.
                                         *     When there are multiple elements, the lists of nodes corresponding to each
                                         *     podAffinityTerm are intersected, i.e. all terms must be satisfied. */
                                        requiredDuringSchedulingIgnoredDuringExecution?: {
                                            /** @description A label query over a set of resources, in this case pods.
                                             *     If it's null, this PodAffinityTerm matches with no Pods. */
                                            labelSelector?: {
                                                /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                                                matchExpressions?: {
                                                    /** @description key is the label key that the selector applies to. */
                                                    key: string;
                                                    /** @description operator represents a key's relationship to a set of values.
                                                     *     Valid operators are In, NotIn, Exists and DoesNotExist. */
                                                    operator: string;
                                                    /** @description values is an array of string values. If the operator is In or NotIn,
                                                     *     the values array must be non-empty. If the operator is Exists or DoesNotExist,
                                                     *     the values array must be empty. This array is replaced during a strategic
                                                     *     merge patch. */
                                                    values?: string[];
                                                }[];
                                                /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
                                                 *     map is equivalent to an element of matchExpressions, whose key field is "key", the
                                                 *     operator is "In", and the values array contains only "value". The requirements are ANDed. */
                                                matchLabels?: {
                                                    [key: string]: string;
                                                };
                                            };
                                            /** @description MatchLabelKeys is a set of pod label keys to select which pods will
                                             *     be taken into consideration. The keys are used to lookup values from the
                                             *     incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
                                             *     to select the group of existing pods which pods will be taken into consideration
                                             *     for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
                                             *     pod labels will be ignored. The default value is empty.
                                             *     The same key is forbidden to exist in both matchLabelKeys and labelSelector.
                                             *     Also, matchLabelKeys cannot be set when labelSelector isn't set.
                                             *     This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default). */
                                            matchLabelKeys?: string[];
                                            /** @description MismatchLabelKeys is a set of pod label keys to select which pods will
                                             *     be taken into consideration. The keys are used to lookup values from the
                                             *     incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
                                             *     to select the group of existing pods which pods will be taken into consideration
                                             *     for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
                                             *     pod labels will be ignored. The default value is empty.
                                             *     The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
                                             *     Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
                                             *     This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default). */
                                            mismatchLabelKeys?: string[];
                                            /** @description A label query over the set of namespaces that the term applies to.
                                             *     The term is applied to the union of the namespaces selected by this field
                                             *     and the ones listed in the namespaces field.
                                             *     null selector and null or empty namespaces list means "this pod's namespace".
                                             *     An empty selector ({}) matches all namespaces. */
                                            namespaceSelector?: {
                                                /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                                                matchExpressions?: {
                                                    /** @description key is the label key that the selector applies to. */
                                                    key: string;
                                                    /** @description operator represents a key's relationship to a set of values.
                                                     *     Valid operators are In, NotIn, Exists and DoesNotExist. */
                                                    operator: string;
                                                    /** @description values is an array of string values. If the operator is In or NotIn,
                                                     *     the values array must be non-empty. If the operator is Exists or DoesNotExist,
                                                     *     the values array must be empty. This array is replaced during a strategic
                                                     *     merge patch. */
                                                    values?: string[];
                                                }[];
                                                /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
                                                 *     map is equivalent to an element of matchExpressions, whose key field is "key", the
                                                 *     operator is "In", and the values array contains only "value". The requirements are ANDed. */
                                                matchLabels?: {
                                                    [key: string]: string;
                                                };
                                            };
                                            /** @description namespaces specifies a static list of namespace names that the term applies to.
                                             *     The term is applied to the union of the namespaces listed in this field
                                             *     and the ones selected by namespaceSelector.
                                             *     null or empty namespaces list and null namespaceSelector means "this pod's namespace". */
                                            namespaces?: string[];
                                            /** @description This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
                                             *     the labelSelector in the specified namespaces, where co-located is defined as running on a node
                                             *     whose value of the label with key topologyKey matches that of any node on which any of the
                                             *     selected pods is running.
                                             *     Empty topologyKey is not allowed. */
                                            topologyKey: string;
                                        }[];
                                    };
                                };
                                /** @description Specifies the architecture of the vm guest you are attempting to run. Defaults to the compiled architecture of the KubeVirt components */
                                architecture?: string;
                                /** @description Specifies the DNS parameters of a pod.
                                 *     Parameters specified here will be merged to the generated DNS
                                 *     configuration based on DNSPolicy. */
                                dnsConfig?: {
                                    /** @description A list of DNS name server IP addresses.
                                     *     This will be appended to the base nameservers generated from DNSPolicy.
                                     *     Duplicated nameservers will be removed. */
                                    nameservers?: string[];
                                    /** @description A list of DNS resolver options.
                                     *     This will be merged with the base options generated from DNSPolicy.
                                     *     Duplicated entries will be removed. Resolution options given in Options
                                     *     will override those that appear in the base DNSPolicy. */
                                    options?: {
                                        /** @description Required. */
                                        name?: string;
                                        value?: string;
                                    }[];
                                    /** @description A list of DNS search domains for host-name lookup.
                                     *     This will be appended to the base search paths generated from DNSPolicy.
                                     *     Duplicated search paths will be removed. */
                                    searches?: string[];
                                };
                                /** @description Set DNS policy for the pod.
                                 *     Defaults to "ClusterFirst".
                                 *     Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'.
                                 *     DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy.
                                 *     To have DNS options set along with hostNetwork, you have to specify DNS policy
                                 *     explicitly to 'ClusterFirstWithHostNet'. */
                                dnsPolicy?: string;
                                /** @description Specification of the desired behavior of the VirtualMachineInstance on the host. */
                                domain: {
                                    /** @description Chassis specifies the chassis info passed to the domain. */
                                    chassis?: {
                                        asset?: string;
                                        manufacturer?: string;
                                        serial?: string;
                                        sku?: string;
                                        version?: string;
                                    };
                                    /** @description Clock sets the clock and timers of the vmi. */
                                    clock?: {
                                        /** @description Timer specifies whih timers are attached to the vmi. */
                                        timer?: {
                                            /** @description HPET (High Precision Event Timer) - multiple timers with periodic interrupts. */
                                            hpet?: {
                                                /** @description Enabled set to false makes sure that the machine type or a preset can't add the timer.
                                                 *     Defaults to true. */
                                                present?: boolean;
                                                /** @description TickPolicy determines what happens when QEMU misses a deadline for injecting a tick to the guest.
                                                 *     One of "delay", "catchup", "merge", "discard". */
                                                tickPolicy?: string;
                                            };
                                            /** @description Hyperv (Hypervclock) - lets guests read the host’s wall clock time (paravirtualized). For windows guests. */
                                            hyperv?: {
                                                /** @description Enabled set to false makes sure that the machine type or a preset can't add the timer.
                                                 *     Defaults to true. */
                                                present?: boolean;
                                            };
                                            /** @description KVM 	(KVM clock) - lets guests read the host’s wall clock time (paravirtualized). For linux guests. */
                                            kvm?: {
                                                /** @description Enabled set to false makes sure that the machine type or a preset can't add the timer.
                                                 *     Defaults to true. */
                                                present?: boolean;
                                            };
                                            /** @description PIT (Programmable Interval Timer) - a timer with periodic interrupts. */
                                            pit?: {
                                                /** @description Enabled set to false makes sure that the machine type or a preset can't add the timer.
                                                 *     Defaults to true. */
                                                present?: boolean;
                                                /** @description TickPolicy determines what happens when QEMU misses a deadline for injecting a tick to the guest.
                                                 *     One of "delay", "catchup", "discard". */
                                                tickPolicy?: string;
                                            };
                                            /** @description RTC (Real Time Clock) - a continuously running timer with periodic interrupts. */
                                            rtc?: {
                                                /** @description Enabled set to false makes sure that the machine type or a preset can't add the timer.
                                                 *     Defaults to true. */
                                                present?: boolean;
                                                /** @description TickPolicy determines what happens when QEMU misses a deadline for injecting a tick to the guest.
                                                 *     One of "delay", "catchup". */
                                                tickPolicy?: string;
                                                /** @description Track the guest or the wall clock. */
                                                track?: string;
                                            };
                                        };
                                        /** @description Timezone sets the guest clock to the specified timezone.
                                         *     Zone name follows the TZ environment variable format (e.g. 'America/New_York'). */
                                        timezone?: string;
                                        /** @description UTC sets the guest clock to UTC on each boot. If an offset is specified,
                                         *     guest changes to the clock will be kept during reboots and are not reset. */
                                        utc?: {
                                            /** @description OffsetSeconds specifies an offset in seconds, relative to UTC. If set,
                                             *     guest changes to the clock will be kept during reboots and not reset. */
                                            offsetSeconds?: number;
                                        };
                                    };
                                    /** @description CPU allow specified the detailed CPU topology inside the vmi. */
                                    cpu?: {
                                        /**
                                         * Format: int32
                                         * @description Cores specifies the number of cores inside the vmi.
                                         *     Must be a value greater or equal 1.
                                         */
                                        cores?: number;
                                        /** @description DedicatedCPUPlacement requests the scheduler to place the VirtualMachineInstance on a node
                                         *     with enough dedicated pCPUs and pin the vCPUs to it. */
                                        dedicatedCpuPlacement?: boolean;
                                        /** @description Features specifies the CPU features list inside the VMI. */
                                        features?: {
                                            /** @description Name of the CPU feature */
                                            name: string;
                                            /** @description Policy is the CPU feature attribute which can have the following attributes:
                                             *     force    - The virtual CPU will claim the feature is supported regardless of it being supported by host CPU.
                                             *     require  - Guest creation will fail unless the feature is supported by the host CPU or the hypervisor is able to emulate it.
                                             *     optional - The feature will be supported by virtual CPU if and only if it is supported by host CPU.
                                             *     disable  - The feature will not be supported by virtual CPU.
                                             *     forbid   - Guest creation will fail if the feature is supported by host CPU.
                                             *     Defaults to require */
                                            policy?: string;
                                        }[];
                                        /** @description IsolateEmulatorThread requests one more dedicated pCPU to be allocated for the VMI to place
                                         *     the emulator thread on it. */
                                        isolateEmulatorThread?: boolean;
                                        /**
                                         * Format: int32
                                         * @description MaxSockets specifies the maximum amount of sockets that can
                                         *     be hotplugged
                                         */
                                        maxSockets?: number;
                                        /** @description Model specifies the CPU model inside the VMI.
                                         *     List of available models https://github.com/libvirt/libvirt/tree/master/src/cpu_map.
                                         *     It is possible to specify special cases like "host-passthrough" to get the same CPU as the node
                                         *     and "host-model" to get CPU closest to the node one.
                                         *     Defaults to host-model. */
                                        model?: string;
                                        /** @description NUMA allows specifying settings for the guest NUMA topology */
                                        numa?: {
                                            /** @description GuestMappingPassthrough will create an efficient guest topology based on host CPUs exclusively assigned to a pod.
                                             *     The created topology ensures that memory and CPUs on the virtual numa nodes never cross boundaries of host numa nodes. */
                                            guestMappingPassthrough?: Record<string, never>;
                                        };
                                        /** @description Realtime instructs the virt-launcher to tune the VMI for lower latency, optional for real time workloads */
                                        realtime?: {
                                            /** @description Mask defines the vcpu mask expression that defines which vcpus are used for realtime. Format matches libvirt's expressions.
                                             *     Example: "0-3,^1","0,2,3","2-3" */
                                            mask?: string;
                                        };
                                        /**
                                         * Format: int32
                                         * @description Sockets specifies the number of sockets inside the vmi.
                                         *     Must be a value greater or equal 1.
                                         */
                                        sockets?: number;
                                        /**
                                         * Format: int32
                                         * @description Threads specifies the number of threads inside the vmi.
                                         *     Must be a value greater or equal 1.
                                         */
                                        threads?: number;
                                    };
                                    /** @description Devices allows adding disks, network interfaces, and others */
                                    devices: {
                                        /** @description Whether to attach the default graphics device or not.
                                         *     VNC will not be available if set to false. Defaults to true. */
                                        autoattachGraphicsDevice?: boolean;
                                        /** @description Whether to attach an Input Device.
                                         *     Defaults to false. */
                                        autoattachInputDevice?: boolean;
                                        /** @description Whether to attach the Memory balloon device with default period.
                                         *     Period can be adjusted in virt-config.
                                         *     Defaults to true. */
                                        autoattachMemBalloon?: boolean;
                                        /** @description Whether to attach a pod network interface. Defaults to true. */
                                        autoattachPodInterface?: boolean;
                                        /** @description Whether to attach the default virtio-serial console or not.
                                         *     Serial console access will not be available if set to false. Defaults to true. */
                                        autoattachSerialConsole?: boolean;
                                        /** @description Whether to attach the VSOCK CID to the VM or not.
                                         *     VSOCK access will be available if set to true. Defaults to false. */
                                        autoattachVSOCK?: boolean;
                                        /** @description Whether or not to enable virtio multi-queue for block devices.
                                         *     Defaults to false. */
                                        blockMultiQueue?: boolean;
                                        /** @description To configure and access client devices such as redirecting USB */
                                        clientPassthrough?: Record<string, never>;
                                        /** @description DisableHotplug disabled the ability to hotplug disks. */
                                        disableHotplug?: boolean;
                                        /** @description Disks describes disks, cdroms and luns which are connected to the vmi. */
                                        disks?: {
                                            /** @description If specified, the virtual disk will be presented with the given block sizes. */
                                            blockSize?: {
                                                /** @description CustomBlockSize represents the desired logical and physical block size for a VM disk. */
                                                custom?: {
                                                    logical: number;
                                                    physical: number;
                                                };
                                                /** @description Represents if a feature is enabled or disabled. */
                                                matchVolume?: {
                                                    /** @description Enabled determines if the feature should be enabled or disabled on the guest.
                                                     *     Defaults to true. */
                                                    enabled?: boolean;
                                                };
                                            };
                                            /** @description BootOrder is an integer value > 0, used to determine ordering of boot devices.
                                             *     Lower values take precedence.
                                             *     Each disk or interface that has a boot order must have a unique value.
                                             *     Disks without a boot order are not tried if a disk with a boot order exists. */
                                            bootOrder?: number;
                                            /** @description Cache specifies which kvm disk cache mode should be used.
                                             *     Supported values are: CacheNone, CacheWriteThrough. */
                                            cache?: string;
                                            /** @description Attach a volume as a cdrom to the vmi. */
                                            cdrom?: {
                                                /** @description Bus indicates the type of disk device to emulate.
                                                 *     supported values: virtio, sata, scsi. */
                                                bus?: string;
                                                /** @description ReadOnly.
                                                 *     Defaults to true. */
                                                readonly?: boolean;
                                                /** @description Tray indicates if the tray of the device is open or closed.
                                                 *     Allowed values are "open" and "closed".
                                                 *     Defaults to closed. */
                                                tray?: string;
                                            };
                                            /** @description dedicatedIOThread indicates this disk should have an exclusive IO Thread.
                                             *     Enabling this implies useIOThreads = true.
                                             *     Defaults to false. */
                                            dedicatedIOThread?: boolean;
                                            /** @description Attach a volume as a disk to the vmi. */
                                            disk?: {
                                                /** @description Bus indicates the type of disk device to emulate.
                                                 *     supported values: virtio, sata, scsi, usb. */
                                                bus?: string;
                                                /** @description If specified, the virtual disk will be placed on the guests pci address with the specified PCI address. For example: 0000:81:01.10 */
                                                pciAddress?: string;
                                                /** @description ReadOnly.
                                                 *     Defaults to false. */
                                                readonly?: boolean;
                                            };
                                            /** @description If specified, it can change the default error policy (stop) for the disk */
                                            errorPolicy?: string;
                                            /** @description IO specifies which QEMU disk IO mode should be used.
                                             *     Supported values are: native, default, threads. */
                                            io?: string;
                                            /** @description Attach a volume as a LUN to the vmi. */
                                            lun?: {
                                                /** @description Bus indicates the type of disk device to emulate.
                                                 *     supported values: virtio, sata, scsi. */
                                                bus?: string;
                                                /** @description ReadOnly.
                                                 *     Defaults to false. */
                                                readonly?: boolean;
                                                /** @description Reservation indicates if the disk needs to support the persistent reservation for the SCSI disk */
                                                reservation?: boolean;
                                            };
                                            /** @description Name is the device name */
                                            name: string;
                                            /** @description Serial provides the ability to specify a serial number for the disk device. */
                                            serial?: string;
                                            /** @description If specified the disk is made sharable and multiple write from different VMs are permitted */
                                            shareable?: boolean;
                                            /** @description If specified, disk address and its tag will be provided to the guest via config drive metadata */
                                            tag?: string;
                                        }[];
                                        /** @description DownwardMetrics creates a virtio serials for exposing the downward metrics to the vmi. */
                                        downwardMetrics?: Record<string, never>;
                                        /** @description Filesystems describes filesystem which is connected to the vmi. */
                                        filesystems?: {
                                            /** @description Name is the device name */
                                            name: string;
                                            /** @description Virtiofs is supported */
                                            virtiofs: Record<string, never>;
                                        }[];
                                        /** @description Whether to attach a GPU device to the vmi. */
                                        gpus?: {
                                            deviceName: string;
                                            /** @description Name of the GPU device as exposed by a device plugin */
                                            name: string;
                                            /** @description If specified, the virtual network interface address and its tag will be provided to the guest via config drive */
                                            tag?: string;
                                            virtualGPUOptions?: {
                                                display?: {
                                                    /** @description Enabled determines if a display addapter backed by a vGPU should be enabled or disabled on the guest.
                                                     *     Defaults to true. */
                                                    enabled?: boolean;
                                                    /** @description Enables a boot framebuffer, until the guest OS loads a real GPU driver
                                                     *     Defaults to true. */
                                                    ramFB?: {
                                                        /** @description Enabled determines if the feature should be enabled or disabled on the guest.
                                                         *     Defaults to true. */
                                                        enabled?: boolean;
                                                    };
                                                };
                                            };
                                        }[];
                                        /** @description Whether to attach a host device to the vmi. */
                                        hostDevices?: {
                                            /** @description DeviceName is the resource name of the host device exposed by a device plugin */
                                            deviceName: string;
                                            name: string;
                                            /** @description If specified, the virtual network interface address and its tag will be provided to the guest via config drive */
                                            tag?: string;
                                        }[];
                                        /** @description Inputs describe input devices */
                                        inputs?: {
                                            /** @description Bus indicates the bus of input device to emulate.
                                             *     Supported values: virtio, usb. */
                                            bus?: string;
                                            /** @description Name is the device name */
                                            name: string;
                                            /** @description Type indicated the type of input device.
                                             *     Supported values: tablet. */
                                            type: string;
                                        }[];
                                        /** @description Interfaces describe network interfaces which are added to the vmi. */
                                        interfaces?: {
                                            /** @description If specified, the ACPI index is used to provide network interface device naming, that is stable across changes
                                             *     in PCI addresses assigned to the device.
                                             *     This value is required to be unique across all devices and be between 1 and (16*1024-1). */
                                            acpiIndex?: number;
                                            /** @description Binding specifies the binding plugin that will be used to connect the interface to the guest.
                                             *     It provides an alternative to InterfaceBindingMethod.
                                             *     version: 1alphav1 */
                                            binding?: {
                                                /** @description Name references to the binding name as denined in the kubevirt CR.
                                                 *     version: 1alphav1 */
                                                name: string;
                                            };
                                            /** @description BootOrder is an integer value > 0, used to determine ordering of boot devices.
                                             *     Lower values take precedence.
                                             *     Each interface or disk that has a boot order must have a unique value.
                                             *     Interfaces without a boot order are not tried. */
                                            bootOrder?: number;
                                            /** @description InterfaceBridge connects to a given network via a linux bridge. */
                                            bridge?: Record<string, never>;
                                            /** @description If specified the network interface will pass additional DHCP options to the VMI */
                                            dhcpOptions?: {
                                                /** @description If specified will pass option 67 to interface's DHCP server */
                                                bootFileName?: string;
                                                /** @description If specified will pass the configured NTP server to the VM via DHCP option 042. */
                                                ntpServers?: string[];
                                                /** @description If specified will pass extra DHCP options for private use, range: 224-254 */
                                                privateOptions?: {
                                                    /** @description Option is an Integer value from 224-254
                                                     *     Required. */
                                                    option: number;
                                                    /** @description Value is a String value for the Option provided
                                                     *     Required. */
                                                    value: string;
                                                }[];
                                                /** @description If specified will pass option 66 to interface's DHCP server */
                                                tftpServerName?: string;
                                            };
                                            /** @description Interface MAC address. For example: de:ad:00:00:be:af or DE-AD-00-00-BE-AF. */
                                            macAddress?: string;
                                            /** @description DeprecatedMacvtap is an alias to the deprecated Macvtap interface,
                                             *     please refer to Kubevirt user guide for alternatives.
                                             *     Deprecated: Removed in v1.3 */
                                            macvtap?: Record<string, never>;
                                            /** @description InterfaceMasquerade connects to a given network using netfilter rules to nat the traffic. */
                                            masquerade?: Record<string, never>;
                                            /** @description Interface model.
                                             *     One of: e1000, e1000e, ne2k_pci, pcnet, rtl8139, virtio.
                                             *     Defaults to virtio. */
                                            model?: string;
                                            /** @description Logical name of the interface as well as a reference to the associated networks.
                                             *     Must match the Name of a Network. */
                                            name: string;
                                            /** @description DeprecatedPasst is an alias to the deprecated Passt interface,
                                             *     please refer to Kubevirt user guide for alternatives.
                                             *     Deprecated: Removed in v1.3 */
                                            passt?: Record<string, never>;
                                            /** @description If specified, the virtual network interface will be placed on the guests pci address with the specified PCI address. For example: 0000:81:01.10 */
                                            pciAddress?: string;
                                            /** @description List of ports to be forwarded to the virtual machine. */
                                            ports?: {
                                                /** @description If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
                                                 *     named port in a pod must have a unique name. Name for the port that can be
                                                 *     referred to by services. */
                                                name?: string;
                                                /**
                                                 * Format: int32
                                                 * @description Number of port to expose for the virtual machine.
                                                 *     This must be a valid port number, 0 < x < 65536.
                                                 */
                                                port: number;
                                                /** @description Protocol for port. Must be UDP or TCP.
                                                 *     Defaults to "TCP". */
                                                protocol?: string;
                                            }[];
                                            /** @description DeprecatedSlirp is an alias to the deprecated Slirp interface
                                             *     Deprecated: Removed in v1.3 */
                                            slirp?: Record<string, never>;
                                            /** @description InterfaceSRIOV connects to a given network by passing-through an SR-IOV PCI device via vfio. */
                                            sriov?: Record<string, never>;
                                            /** @description State represents the requested operational state of the interface.
                                             *     The (only) value supported is `absent`, expressing a request to remove the interface. */
                                            state?: string;
                                            /** @description If specified, the virtual network interface address and its tag will be provided to the guest via config drive */
                                            tag?: string;
                                        }[];
                                        /** @description Whether to log the auto-attached default serial console or not.
                                         *     Serial console logs will be collect to a file and then streamed from a named `guest-console-log`.
                                         *     Not relevant if autoattachSerialConsole is disabled.
                                         *     Defaults to cluster wide setting on VirtualMachineOptions. */
                                        logSerialConsole?: boolean;
                                        /** @description If specified, virtual network interfaces configured with a virtio bus will also enable the vhost multiqueue feature for network devices. The number of queues created depends on additional factors of the VirtualMachineInstance, like the number of guest CPUs. */
                                        networkInterfaceMultiqueue?: boolean;
                                        /** @description Whether to have random number generator from host */
                                        rng?: Record<string, never>;
                                        /** @description Whether to emulate a sound device. */
                                        sound?: {
                                            /** @description We only support ich9 or ac97.
                                             *     If SoundDevice is not set: No sound card is emulated.
                                             *     If SoundDevice is set but Model is not: ich9 */
                                            model?: string;
                                            /** @description User's defined name for this sound device */
                                            name: string;
                                        };
                                        /** @description Whether to emulate a TPM device. */
                                        tpm?: {
                                            /** @description Persistent indicates the state of the TPM device should be kept accross reboots
                                             *     Defaults to false */
                                            persistent?: boolean;
                                        };
                                        /** @description Fall back to legacy virtio 0.9 support if virtio bus is selected on devices.
                                         *     This is helpful for old machines like CentOS6 or RHEL6 which
                                         *     do not understand virtio_non_transitional (virtio 1.0). */
                                        useVirtioTransitional?: boolean;
                                        /** @description Watchdog describes a watchdog device which can be added to the vmi. */
                                        watchdog?: {
                                            /** @description i6300esb watchdog device. */
                                            i6300esb?: {
                                                /** @description The action to take. Valid values are poweroff, reset, shutdown.
                                                 *     Defaults to reset. */
                                                action?: string;
                                            };
                                            /** @description Name of the watchdog. */
                                            name: string;
                                        };
                                    };
                                    /** @description Features like acpi, apic, hyperv, smm. */
                                    features?: {
                                        /** @description ACPI enables/disables ACPI inside the guest.
                                         *     Defaults to enabled. */
                                        acpi?: {
                                            /** @description Enabled determines if the feature should be enabled or disabled on the guest.
                                             *     Defaults to true. */
                                            enabled?: boolean;
                                        };
                                        /** @description Defaults to the machine type setting. */
                                        apic?: {
                                            /** @description Enabled determines if the feature should be enabled or disabled on the guest.
                                             *     Defaults to true. */
                                            enabled?: boolean;
                                            /** @description EndOfInterrupt enables the end of interrupt notification in the guest.
                                             *     Defaults to false. */
                                            endOfInterrupt?: boolean;
                                        };
                                        /** @description Defaults to the machine type setting. */
                                        hyperv?: {
                                            /** @description EVMCS Speeds up L2 vmexits, but disables other virtualization features. Requires vapic.
                                             *     Defaults to the machine type setting. */
                                            evmcs?: {
                                                /** @description Enabled determines if the feature should be enabled or disabled on the guest.
                                                 *     Defaults to true. */
                                                enabled?: boolean;
                                            };
                                            /** @description Frequencies improves the TSC clock source handling for Hyper-V on KVM.
                                             *     Defaults to the machine type setting. */
                                            frequencies?: {
                                                /** @description Enabled determines if the feature should be enabled or disabled on the guest.
                                                 *     Defaults to true. */
                                                enabled?: boolean;
                                            };
                                            /** @description IPI improves performances in overcommited environments. Requires vpindex.
                                             *     Defaults to the machine type setting. */
                                            ipi?: {
                                                /** @description Enabled determines if the feature should be enabled or disabled on the guest.
                                                 *     Defaults to true. */
                                                enabled?: boolean;
                                            };
                                            /** @description Reenlightenment enables the notifications on TSC frequency changes.
                                             *     Defaults to the machine type setting. */
                                            reenlightenment?: {
                                                /** @description Enabled determines if the feature should be enabled or disabled on the guest.
                                                 *     Defaults to true. */
                                                enabled?: boolean;
                                            };
                                            /** @description Relaxed instructs the guest OS to disable watchdog timeouts.
                                             *     Defaults to the machine type setting. */
                                            relaxed?: {
                                                /** @description Enabled determines if the feature should be enabled or disabled on the guest.
                                                 *     Defaults to true. */
                                                enabled?: boolean;
                                            };
                                            /** @description Reset enables Hyperv reboot/reset for the vmi. Requires synic.
                                             *     Defaults to the machine type setting. */
                                            reset?: {
                                                /** @description Enabled determines if the feature should be enabled or disabled on the guest.
                                                 *     Defaults to true. */
                                                enabled?: boolean;
                                            };
                                            /** @description Runtime improves the time accounting to improve scheduling in the guest.
                                             *     Defaults to the machine type setting. */
                                            runtime?: {
                                                /** @description Enabled determines if the feature should be enabled or disabled on the guest.
                                                 *     Defaults to true. */
                                                enabled?: boolean;
                                            };
                                            /** @description Spinlocks allows to configure the spinlock retry attempts. */
                                            spinlocks?: {
                                                /** @description Enabled determines if the feature should be enabled or disabled on the guest.
                                                 *     Defaults to true. */
                                                enabled?: boolean;
                                                /**
                                                 * Format: int32
                                                 * @description Retries indicates the number of retries.
                                                 *     Must be a value greater or equal 4096.
                                                 *     Defaults to 4096.
                                                 */
                                                spinlocks?: number;
                                            };
                                            /** @description SyNIC enables the Synthetic Interrupt Controller.
                                             *     Defaults to the machine type setting. */
                                            synic?: {
                                                /** @description Enabled determines if the feature should be enabled or disabled on the guest.
                                                 *     Defaults to true. */
                                                enabled?: boolean;
                                            };
                                            /** @description SyNICTimer enables Synthetic Interrupt Controller Timers, reducing CPU load.
                                             *     Defaults to the machine type setting. */
                                            synictimer?: {
                                                /** @description Represents if a feature is enabled or disabled. */
                                                direct?: {
                                                    /** @description Enabled determines if the feature should be enabled or disabled on the guest.
                                                     *     Defaults to true. */
                                                    enabled?: boolean;
                                                };
                                                enabled?: boolean;
                                            };
                                            /** @description TLBFlush improves performances in overcommited environments. Requires vpindex.
                                             *     Defaults to the machine type setting. */
                                            tlbflush?: {
                                                /** @description Enabled determines if the feature should be enabled or disabled on the guest.
                                                 *     Defaults to true. */
                                                enabled?: boolean;
                                            };
                                            /** @description VAPIC improves the paravirtualized handling of interrupts.
                                             *     Defaults to the machine type setting. */
                                            vapic?: {
                                                /** @description Enabled determines if the feature should be enabled or disabled on the guest.
                                                 *     Defaults to true. */
                                                enabled?: boolean;
                                            };
                                            /** @description VendorID allows setting the hypervisor vendor id.
                                             *     Defaults to the machine type setting. */
                                            vendorid?: {
                                                /** @description Enabled determines if the feature should be enabled or disabled on the guest.
                                                 *     Defaults to true. */
                                                enabled?: boolean;
                                                /** @description VendorID sets the hypervisor vendor id, visible to the vmi.
                                                 *     String up to twelve characters. */
                                                vendorid?: string;
                                            };
                                            /** @description VPIndex enables the Virtual Processor Index to help windows identifying virtual processors.
                                             *     Defaults to the machine type setting. */
                                            vpindex?: {
                                                /** @description Enabled determines if the feature should be enabled or disabled on the guest.
                                                 *     Defaults to true. */
                                                enabled?: boolean;
                                            };
                                        };
                                        /** @description This enables all supported hyperv flags automatically.
                                         *     Bear in mind that if this enabled hyperV features cannot
                                         *     be enabled explicitly. In addition, a Virtual Machine
                                         *     using it will be non-migratable. */
                                        hypervPassthrough?: {
                                            enabled?: boolean;
                                        };
                                        /** @description Configure how KVM presence is exposed to the guest. */
                                        kvm?: {
                                            /** @description Hide the KVM hypervisor from standard MSR based discovery.
                                             *     Defaults to false */
                                            hidden?: boolean;
                                        };
                                        /** @description Notify the guest that the host supports paravirtual spinlocks.
                                         *     For older kernels this feature should be explicitly disabled. */
                                        pvspinlock?: {
                                            /** @description Enabled determines if the feature should be enabled or disabled on the guest.
                                             *     Defaults to true. */
                                            enabled?: boolean;
                                        };
                                        /** @description SMM enables/disables System Management Mode.
                                         *     TSEG not yet implemented. */
                                        smm?: {
                                            /** @description Enabled determines if the feature should be enabled or disabled on the guest.
                                             *     Defaults to true. */
                                            enabled?: boolean;
                                        };
                                    };
                                    /** @description Firmware. */
                                    firmware?: {
                                        /** @description Information that can be set in the ACPI table */
                                        acpi?: {
                                            /** @description SlicNameRef should match the volume name of a secret object. The data in the secret should
                                             *     be a binary blob that follows the ACPI SLIC standard, see:
                                             *     https://learn.microsoft.com/en-us/previous-versions/windows/hardware/design/dn653305(v=vs.85) */
                                            slicNameRef?: string;
                                        };
                                        /** @description Settings to control the bootloader that is used. */
                                        bootloader?: {
                                            /** @description If set (default), BIOS will be used. */
                                            bios?: {
                                                /** @description If set, the BIOS output will be transmitted over serial */
                                                useSerial?: boolean;
                                            };
                                            /** @description If set, EFI will be used instead of BIOS. */
                                            efi?: {
                                                /** @description If set to true, Persistent will persist the EFI NVRAM across reboots.
                                                 *     Defaults to false */
                                                persistent?: boolean;
                                                /** @description If set, SecureBoot will be enabled and the OVMF roms will be swapped for
                                                 *     SecureBoot-enabled ones.
                                                 *     Requires SMM to be enabled.
                                                 *     Defaults to true */
                                                secureBoot?: boolean;
                                            };
                                        };
                                        /** @description Settings to set the kernel for booting. */
                                        kernelBoot?: {
                                            /** @description Container defines the container that containes kernel artifacts */
                                            container?: {
                                                /** @description Image that contains initrd / kernel files. */
                                                image: string;
                                                /** @description Image pull policy.
                                                 *     One of Always, Never, IfNotPresent.
                                                 *     Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
                                                 *     Cannot be updated.
                                                 *     More info: https://kubernetes.io/docs/concepts/containers/images#updating-images */
                                                imagePullPolicy?: string;
                                                /** @description ImagePullSecret is the name of the Docker registry secret required to pull the image. The secret must already exist. */
                                                imagePullSecret?: string;
                                                /** @description the fully-qualified path to the ramdisk image in the host OS */
                                                initrdPath?: string;
                                                /** @description The fully-qualified path to the kernel image in the host OS */
                                                kernelPath?: string;
                                            };
                                            /** @description Arguments to be passed to the kernel at boot time */
                                            kernelArgs?: string;
                                        };
                                        /** @description The system-serial-number in SMBIOS */
                                        serial?: string;
                                        /** @description UUID reported by the vmi bios.
                                         *     Defaults to a random generated uid. */
                                        uuid?: string;
                                    };
                                    /** @description Controls whether or not disks will share IOThreads.
                                     *     Omitting IOThreadsPolicy disables use of IOThreads.
                                     *     One of: shared, auto */
                                    ioThreadsPolicy?: string;
                                    /** @description Launch Security setting of the vmi. */
                                    launchSecurity?: {
                                        /** @description AMD Secure Encrypted Virtualization (SEV). */
                                        sev?: {
                                            /** @description If specified, run the attestation process for a vmi. */
                                            attestation?: Record<string, never>;
                                            /** @description Base64 encoded guest owner's Diffie-Hellman key. */
                                            dhCert?: string;
                                            /** @description Guest policy flags as defined in AMD SEV API specification.
                                             *     Note: due to security reasons it is not allowed to enable guest debugging. Therefore NoDebug flag is not exposed to users and is always true. */
                                            policy?: {
                                                /** @description SEV-ES is required.
                                                 *     Defaults to false. */
                                                encryptedState?: boolean;
                                            };
                                            /** @description Base64 encoded session blob. */
                                            session?: string;
                                        };
                                    };
                                    /** @description Machine type. */
                                    machine?: {
                                        /** @description QEMU machine type is the actual chipset of the VirtualMachineInstance. */
                                        type?: string;
                                    };
                                    /** @description Memory allow specifying the VMI memory features. */
                                    memory?: {
                                        /** @description Guest allows to specifying the amount of memory which is visible inside the Guest OS.
                                         *     The Guest must lie between Requests and Limits from the resources section.
                                         *     Defaults to the requested memory in the resources section if not specified. */
                                        guest?: number | string;
                                        /** @description Hugepages allow to use hugepages for the VirtualMachineInstance instead of regular memory. */
                                        hugepages?: {
                                            /** @description PageSize specifies the hugepage size, for x86_64 architecture valid values are 1Gi and 2Mi. */
                                            pageSize?: string;
                                        };
                                        /** @description MaxGuest allows to specify the maximum amount of memory which is visible inside the Guest OS.
                                         *     The delta between MaxGuest and Guest is the amount of memory that can be hot(un)plugged. */
                                        maxGuest?: number | string;
                                    };
                                    /** @description Resources describes the Compute Resources required by this vmi. */
                                    resources?: {
                                        /** @description Limits describes the maximum amount of compute resources allowed.
                                         *     Valid resource keys are "memory" and "cpu". */
                                        limits?: {
                                            [key: string]: number | string;
                                        };
                                        /** @description Don't ask the scheduler to take the guest-management overhead into account. Instead
                                         *     put the overhead only into the container's memory limit. This can lead to crashes if
                                         *     all memory is in use on a node. Defaults to false. */
                                        overcommitGuestOverhead?: boolean;
                                        /** @description Requests is a description of the initial vmi resources.
                                         *     Valid resource keys are "memory" and "cpu". */
                                        requests?: {
                                            [key: string]: number | string;
                                        };
                                    };
                                };
                                /** @description EvictionStrategy describes the strategy to follow when a node drain occurs.
                                 *     The possible options are:
                                 *     - "None": No action will be taken, according to the specified 'RunStrategy' the VirtualMachine will be restarted or shutdown.
                                 *     - "LiveMigrate": the VirtualMachineInstance will be migrated instead of being shutdown.
                                 *     - "LiveMigrateIfPossible": the same as "LiveMigrate" but only if the VirtualMachine is Live-Migratable, otherwise it will behave as "None".
                                 *     - "External": the VirtualMachineInstance will be protected by a PDB and `vmi.Status.EvacuationNodeName` will be set on eviction. This is mainly useful for cluster-api-provider-kubevirt (capk) which needs a way for VMI's to be blocked from eviction, yet signal capk that eviction has been called on the VMI so the capk controller can handle tearing the VMI down. Details can be found in the commit description https://github.com/kubevirt/kubevirt/commit/c1d77face705c8b126696bac9a3ee3825f27f1fa. */
                                evictionStrategy?: string;
                                /** @description Specifies the hostname of the vmi
                                 *     If not specified, the hostname will be set to the name of the vmi, if dhcp or cloud-init is configured properly. */
                                hostname?: string;
                                /** @description Periodic probe of VirtualMachineInstance liveness.
                                 *     VirtualmachineInstances will be stopped if the probe fails.
                                 *     Cannot be updated.
                                 *     More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes */
                                livenessProbe?: {
                                    /** @description One and only one of the following should be specified.
                                     *     Exec specifies the action to take, it will be executed on the guest through the qemu-guest-agent.
                                     *     If the guest agent is not available, this probe will fail. */
                                    exec?: {
                                        /** @description Command is the command line to execute inside the container, the working directory for the
                                         *     command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
                                         *     not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
                                         *     a shell, you need to explicitly call out to that shell.
                                         *     Exit status of 0 is treated as live/healthy and non-zero is unhealthy. */
                                        command?: string[];
                                    };
                                    /**
                                     * Format: int32
                                     * @description Minimum consecutive failures for the probe to be considered failed after having succeeded.
                                     *     Defaults to 3. Minimum value is 1.
                                     */
                                    failureThreshold?: number;
                                    /** @description GuestAgentPing contacts the qemu-guest-agent for availability checks. */
                                    guestAgentPing?: Record<string, never>;
                                    /** @description HTTPGet specifies the http request to perform. */
                                    httpGet?: {
                                        /** @description Host name to connect to, defaults to the pod IP. You probably want to set
                                         *     "Host" in httpHeaders instead. */
                                        host?: string;
                                        /** @description Custom headers to set in the request. HTTP allows repeated headers. */
                                        httpHeaders?: {
                                            /** @description The header field name.
                                             *     This will be canonicalized upon output, so case-variant names will be understood as the same header. */
                                            name: string;
                                            /** @description The header field value */
                                            value: string;
                                        }[];
                                        /** @description Path to access on the HTTP server. */
                                        path?: string;
                                        /** @description Name or number of the port to access on the container.
                                         *     Number must be in the range 1 to 65535.
                                         *     Name must be an IANA_SVC_NAME. */
                                        port: number | string;
                                        /** @description Scheme to use for connecting to the host.
                                         *     Defaults to HTTP. */
                                        scheme?: string;
                                    };
                                    /**
                                     * Format: int32
                                     * @description Number of seconds after the VirtualMachineInstance has started before liveness probes are initiated.
                                     *     More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                                     */
                                    initialDelaySeconds?: number;
                                    /**
                                     * Format: int32
                                     * @description How often (in seconds) to perform the probe.
                                     *     Default to 10 seconds. Minimum value is 1.
                                     */
                                    periodSeconds?: number;
                                    /**
                                     * Format: int32
                                     * @description Minimum consecutive successes for the probe to be considered successful after having failed.
                                     *     Defaults to 1. Must be 1 for liveness. Minimum value is 1.
                                     */
                                    successThreshold?: number;
                                    /** @description TCPSocket specifies an action involving a TCP port.
                                     *     TCP hooks not yet supported */
                                    tcpSocket?: {
                                        /** @description Optional: Host name to connect to, defaults to the pod IP. */
                                        host?: string;
                                        /** @description Number or name of the port to access on the container.
                                         *     Number must be in the range 1 to 65535.
                                         *     Name must be an IANA_SVC_NAME. */
                                        port: number | string;
                                    };
                                    /**
                                     * Format: int32
                                     * @description Number of seconds after which the probe times out.
                                     *     For exec probes the timeout fails the probe but does not terminate the command running on the guest.
                                     *     This means a blocking command can result in an increasing load on the guest.
                                     *     A small buffer will be added to the resulting workload exec probe to compensate for delays
                                     *     caused by the qemu guest exec mechanism.
                                     *     Defaults to 1 second. Minimum value is 1.
                                     *     More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                                     */
                                    timeoutSeconds?: number;
                                };
                                /** @description List of networks that can be attached to a vm's virtual interface. */
                                networks?: {
                                    /** @description Represents the multus cni network. */
                                    multus?: {
                                        /** @description Select the default network and add it to the
                                         *     multus-cni.io/default-network annotation. */
                                        default?: boolean;
                                        /** @description References to a NetworkAttachmentDefinition CRD object. Format:
                                         *     <networkName>, <namespace>/<networkName>. If namespace is not
                                         *     specified, VMI namespace is assumed. */
                                        networkName: string;
                                    };
                                    /** @description Network name.
                                     *     Must be a DNS_LABEL and unique within the vm.
                                     *     More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names */
                                    name: string;
                                    /** @description Represents the stock pod network interface. */
                                    pod?: {
                                        /** @description IPv6 CIDR for the vm network.
                                         *     Defaults to fd10:0:2::/120 if not specified. */
                                        vmIPv6NetworkCIDR?: string;
                                        /** @description CIDR for vm network.
                                         *     Default 10.0.2.0/24 if not specified. */
                                        vmNetworkCIDR?: string;
                                    };
                                }[];
                                /** @description NodeSelector is a selector which must be true for the vmi to fit on a node.
                                 *     Selector which must match a node's labels for the vmi to be scheduled on that node.
                                 *     More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/ */
                                nodeSelector?: {
                                    [key: string]: string;
                                };
                                /** @description If specified, indicates the pod's priority.
                                 *     If not specified, the pod priority will be default or zero if there is no
                                 *     default. */
                                priorityClassName?: string;
                                /** @description Periodic probe of VirtualMachineInstance service readiness.
                                 *     VirtualmachineInstances will be removed from service endpoints if the probe fails.
                                 *     Cannot be updated.
                                 *     More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes */
                                readinessProbe?: {
                                    /** @description One and only one of the following should be specified.
                                     *     Exec specifies the action to take, it will be executed on the guest through the qemu-guest-agent.
                                     *     If the guest agent is not available, this probe will fail. */
                                    exec?: {
                                        /** @description Command is the command line to execute inside the container, the working directory for the
                                         *     command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
                                         *     not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
                                         *     a shell, you need to explicitly call out to that shell.
                                         *     Exit status of 0 is treated as live/healthy and non-zero is unhealthy. */
                                        command?: string[];
                                    };
                                    /**
                                     * Format: int32
                                     * @description Minimum consecutive failures for the probe to be considered failed after having succeeded.
                                     *     Defaults to 3. Minimum value is 1.
                                     */
                                    failureThreshold?: number;
                                    /** @description GuestAgentPing contacts the qemu-guest-agent for availability checks. */
                                    guestAgentPing?: Record<string, never>;
                                    /** @description HTTPGet specifies the http request to perform. */
                                    httpGet?: {
                                        /** @description Host name to connect to, defaults to the pod IP. You probably want to set
                                         *     "Host" in httpHeaders instead. */
                                        host?: string;
                                        /** @description Custom headers to set in the request. HTTP allows repeated headers. */
                                        httpHeaders?: {
                                            /** @description The header field name.
                                             *     This will be canonicalized upon output, so case-variant names will be understood as the same header. */
                                            name: string;
                                            /** @description The header field value */
                                            value: string;
                                        }[];
                                        /** @description Path to access on the HTTP server. */
                                        path?: string;
                                        /** @description Name or number of the port to access on the container.
                                         *     Number must be in the range 1 to 65535.
                                         *     Name must be an IANA_SVC_NAME. */
                                        port: number | string;
                                        /** @description Scheme to use for connecting to the host.
                                         *     Defaults to HTTP. */
                                        scheme?: string;
                                    };
                                    /**
                                     * Format: int32
                                     * @description Number of seconds after the VirtualMachineInstance has started before liveness probes are initiated.
                                     *     More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                                     */
                                    initialDelaySeconds?: number;
                                    /**
                                     * Format: int32
                                     * @description How often (in seconds) to perform the probe.
                                     *     Default to 10 seconds. Minimum value is 1.
                                     */
                                    periodSeconds?: number;
                                    /**
                                     * Format: int32
                                     * @description Minimum consecutive successes for the probe to be considered successful after having failed.
                                     *     Defaults to 1. Must be 1 for liveness. Minimum value is 1.
                                     */
                                    successThreshold?: number;
                                    /** @description TCPSocket specifies an action involving a TCP port.
                                     *     TCP hooks not yet supported */
                                    tcpSocket?: {
                                        /** @description Optional: Host name to connect to, defaults to the pod IP. */
                                        host?: string;
                                        /** @description Number or name of the port to access on the container.
                                         *     Number must be in the range 1 to 65535.
                                         *     Name must be an IANA_SVC_NAME. */
                                        port: number | string;
                                    };
                                    /**
                                     * Format: int32
                                     * @description Number of seconds after which the probe times out.
                                     *     For exec probes the timeout fails the probe but does not terminate the command running on the guest.
                                     *     This means a blocking command can result in an increasing load on the guest.
                                     *     A small buffer will be added to the resulting workload exec probe to compensate for delays
                                     *     caused by the qemu guest exec mechanism.
                                     *     Defaults to 1 second. Minimum value is 1.
                                     *     More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                                     */
                                    timeoutSeconds?: number;
                                };
                                /** @description If specified, the VMI will be dispatched by specified scheduler.
                                 *     If not specified, the VMI will be dispatched by default scheduler. */
                                schedulerName?: string;
                                /** @description StartStrategy can be set to "Paused" if Virtual Machine should be started in paused state. */
                                startStrategy?: string;
                                /** @description If specified, the fully qualified vmi hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>".
                                 *     If not specified, the vmi will not have a domainname at all. The DNS entry will resolve to the vmi,
                                 *     no matter if the vmi itself can pick up a hostname. */
                                subdomain?: string;
                                /**
                                 * Format: int64
                                 * @description Grace period observed after signalling a VirtualMachineInstance to stop after which the VirtualMachineInstance is force terminated.
                                 */
                                terminationGracePeriodSeconds?: number;
                                /** @description If toleration is specified, obey all the toleration rules. */
                                tolerations?: {
                                    /** @description Effect indicates the taint effect to match. Empty means match all taint effects.
                                     *     When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute. */
                                    effect?: string;
                                    /** @description Key is the taint key that the toleration applies to. Empty means match all taint keys.
                                     *     If the key is empty, operator must be Exists; this combination means to match all values and all keys. */
                                    key?: string;
                                    /** @description Operator represents a key's relationship to the value.
                                     *     Valid operators are Exists and Equal. Defaults to Equal.
                                     *     Exists is equivalent to wildcard for value, so that a pod can
                                     *     tolerate all taints of a particular category. */
                                    operator?: string;
                                    /**
                                     * Format: int64
                                     * @description TolerationSeconds represents the period of time the toleration (which must be
                                     *     of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
                                     *     it is not set, which means tolerate the taint forever (do not evict). Zero and
                                     *     negative values will be treated as 0 (evict immediately) by the system.
                                     */
                                    tolerationSeconds?: number;
                                    /** @description Value is the taint value the toleration matches to.
                                     *     If the operator is Exists, the value should be empty, otherwise just a regular string. */
                                    value?: string;
                                }[];
                                /** @description TopologySpreadConstraints describes how a group of VMIs will be spread across a given topology
                                 *     domains. K8s scheduler will schedule VMI pods in a way which abides by the constraints. */
                                topologySpreadConstraints?: {
                                    /** @description LabelSelector is used to find matching pods.
                                     *     Pods that match this label selector are counted to determine the number of pods
                                     *     in their corresponding topology domain. */
                                    labelSelector?: {
                                        /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                                        matchExpressions?: {
                                            /** @description key is the label key that the selector applies to. */
                                            key: string;
                                            /** @description operator represents a key's relationship to a set of values.
                                             *     Valid operators are In, NotIn, Exists and DoesNotExist. */
                                            operator: string;
                                            /** @description values is an array of string values. If the operator is In or NotIn,
                                             *     the values array must be non-empty. If the operator is Exists or DoesNotExist,
                                             *     the values array must be empty. This array is replaced during a strategic
                                             *     merge patch. */
                                            values?: string[];
                                        }[];
                                        /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
                                         *     map is equivalent to an element of matchExpressions, whose key field is "key", the
                                         *     operator is "In", and the values array contains only "value". The requirements are ANDed. */
                                        matchLabels?: {
                                            [key: string]: string;
                                        };
                                    };
                                    /** @description MatchLabelKeys is a set of pod label keys to select the pods over which
                                     *     spreading will be calculated. The keys are used to lookup values from the
                                     *     incoming pod labels, those key-value labels are ANDed with labelSelector
                                     *     to select the group of existing pods over which spreading will be calculated
                                     *     for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
                                     *     MatchLabelKeys cannot be set when LabelSelector isn't set.
                                     *     Keys that don't exist in the incoming pod labels will
                                     *     be ignored. A null or empty list means only match against labelSelector.
                                     *
                                     *     This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default). */
                                    matchLabelKeys?: string[];
                                    /**
                                     * Format: int32
                                     * @description MaxSkew describes the degree to which pods may be unevenly distributed.
                                     *     When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference
                                     *     between the number of matching pods in the target topology and the global minimum.
                                     *     The global minimum is the minimum number of matching pods in an eligible domain
                                     *     or zero if the number of eligible domains is less than MinDomains.
                                     *     For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
                                     *     labelSelector spread as 2/2/1:
                                     *     In this case, the global minimum is 1.
                                     *     | zone1 | zone2 | zone3 |
                                     *     |  P P  |  P P  |   P   |
                                     *     - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;
                                     *     scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)
                                     *     violate MaxSkew(1).
                                     *     - if MaxSkew is 2, incoming pod can be scheduled onto any zone.
                                     *     When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence
                                     *     to topologies that satisfy it.
                                     *     It's a required field. Default value is 1 and 0 is not allowed.
                                     */
                                    maxSkew: number;
                                    /**
                                     * Format: int32
                                     * @description MinDomains indicates a minimum number of eligible domains.
                                     *     When the number of eligible domains with matching topology keys is less than minDomains,
                                     *     Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed.
                                     *     And when the number of eligible domains with matching topology keys equals or greater than minDomains,
                                     *     this value has no effect on scheduling.
                                     *     As a result, when the number of eligible domains is less than minDomains,
                                     *     scheduler won't schedule more than maxSkew Pods to those domains.
                                     *     If value is nil, the constraint behaves as if MinDomains is equal to 1.
                                     *     Valid values are integers greater than 0.
                                     *     When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
                                     *
                                     *     For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same
                                     *     labelSelector spread as 2/2/2:
                                     *     | zone1 | zone2 | zone3 |
                                     *     |  P P  |  P P  |  P P  |
                                     *     The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0.
                                     *     In this situation, new pod with the same labelSelector cannot be scheduled,
                                     *     because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,
                                     *     it will violate MaxSkew.
                                     */
                                    minDomains?: number;
                                    /** @description NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector
                                     *     when calculating pod topology spread skew. Options are:
                                     *     - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.
                                     *     - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
                                     *
                                     *     If this value is nil, the behavior is equivalent to the Honor policy.
                                     *     This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag. */
                                    nodeAffinityPolicy?: string;
                                    /** @description NodeTaintsPolicy indicates how we will treat node taints when calculating
                                     *     pod topology spread skew. Options are:
                                     *     - Honor: nodes without taints, along with tainted nodes for which the incoming pod
                                     *     has a toleration, are included.
                                     *     - Ignore: node taints are ignored. All nodes are included.
                                     *
                                     *     If this value is nil, the behavior is equivalent to the Ignore policy.
                                     *     This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag. */
                                    nodeTaintsPolicy?: string;
                                    /** @description TopologyKey is the key of node labels. Nodes that have a label with this key
                                     *     and identical values are considered to be in the same topology.
                                     *     We consider each <key, value> as a "bucket", and try to put balanced number
                                     *     of pods into each bucket.
                                     *     We define a domain as a particular instance of a topology.
                                     *     Also, we define an eligible domain as a domain whose nodes meet the requirements of
                                     *     nodeAffinityPolicy and nodeTaintsPolicy.
                                     *     e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology.
                                     *     And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology.
                                     *     It's a required field. */
                                    topologyKey: string;
                                    /** @description WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy
                                     *     the spread constraint.
                                     *     - DoNotSchedule (default) tells the scheduler not to schedule it.
                                     *     - ScheduleAnyway tells the scheduler to schedule the pod in any location,
                                     *       but giving higher precedence to topologies that would help reduce the
                                     *       skew.
                                     *     A constraint is considered "Unsatisfiable" for an incoming pod
                                     *     if and only if every possible node assignment for that pod would violate
                                     *     "MaxSkew" on some topology.
                                     *     For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
                                     *     labelSelector spread as 3/1/1:
                                     *     | zone1 | zone2 | zone3 |
                                     *     | P P P |   P   |   P   |
                                     *     If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled
                                     *     to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies
                                     *     MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler
                                     *     won't make it *more* imbalanced.
                                     *     It's a required field. */
                                    whenUnsatisfiable: string;
                                }[];
                                /** @description List of volumes that can be mounted by disks belonging to the vmi. */
                                volumes?: {
                                    /** @description CloudInitConfigDrive represents a cloud-init Config Drive user-data source.
                                     *     The Config Drive data will be added as a disk to the vmi. A proper cloud-init installation is required inside the guest.
                                     *     More info: https://cloudinit.readthedocs.io/en/latest/topics/datasources/configdrive.html */
                                    cloudInitConfigDrive?: {
                                        /** @description NetworkData contains config drive inline cloud-init networkdata. */
                                        networkData?: string;
                                        /** @description NetworkDataBase64 contains config drive cloud-init networkdata as a base64 encoded string. */
                                        networkDataBase64?: string;
                                        /** @description NetworkDataSecretRef references a k8s secret that contains config drive networkdata. */
                                        networkDataSecretRef?: {
                                            /**
                                             * @description Name of the referent.
                                             *     This field is effectively required, but due to backwards compatibility is
                                             *     allowed to be empty. Instances of this type with an empty value here are
                                             *     almost certainly wrong.
                                             *     More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                             * @default
                                             */
                                            name: string;
                                        };
                                        /** @description UserDataSecretRef references a k8s secret that contains config drive userdata. */
                                        secretRef?: {
                                            /**
                                             * @description Name of the referent.
                                             *     This field is effectively required, but due to backwards compatibility is
                                             *     allowed to be empty. Instances of this type with an empty value here are
                                             *     almost certainly wrong.
                                             *     More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                             * @default
                                             */
                                            name: string;
                                        };
                                        /** @description UserData contains config drive inline cloud-init userdata. */
                                        userData?: string;
                                        /** @description UserDataBase64 contains config drive cloud-init userdata as a base64 encoded string. */
                                        userDataBase64?: string;
                                    };
                                    /** @description CloudInitNoCloud represents a cloud-init NoCloud user-data source.
                                     *     The NoCloud data will be added as a disk to the vmi. A proper cloud-init installation is required inside the guest.
                                     *     More info: http://cloudinit.readthedocs.io/en/latest/topics/datasources/nocloud.html */
                                    cloudInitNoCloud?: {
                                        /** @description NetworkData contains NoCloud inline cloud-init networkdata. */
                                        networkData?: string;
                                        /** @description NetworkDataBase64 contains NoCloud cloud-init networkdata as a base64 encoded string. */
                                        networkDataBase64?: string;
                                        /** @description NetworkDataSecretRef references a k8s secret that contains NoCloud networkdata. */
                                        networkDataSecretRef?: {
                                            /**
                                             * @description Name of the referent.
                                             *     This field is effectively required, but due to backwards compatibility is
                                             *     allowed to be empty. Instances of this type with an empty value here are
                                             *     almost certainly wrong.
                                             *     More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                             * @default
                                             */
                                            name: string;
                                        };
                                        /** @description UserDataSecretRef references a k8s secret that contains NoCloud userdata. */
                                        secretRef?: {
                                            /**
                                             * @description Name of the referent.
                                             *     This field is effectively required, but due to backwards compatibility is
                                             *     allowed to be empty. Instances of this type with an empty value here are
                                             *     almost certainly wrong.
                                             *     More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                             * @default
                                             */
                                            name: string;
                                        };
                                        /** @description UserData contains NoCloud inline cloud-init userdata. */
                                        userData?: string;
                                        /** @description UserDataBase64 contains NoCloud cloud-init userdata as a base64 encoded string. */
                                        userDataBase64?: string;
                                    };
                                    /** @description ConfigMapSource represents a reference to a ConfigMap in the same namespace.
                                     *     More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/ */
                                    configMap?: {
                                        /**
                                         * @description Name of the referent.
                                         *     This field is effectively required, but due to backwards compatibility is
                                         *     allowed to be empty. Instances of this type with an empty value here are
                                         *     almost certainly wrong.
                                         *     More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                         * @default
                                         */
                                        name: string;
                                        /** @description Specify whether the ConfigMap or it's keys must be defined */
                                        optional?: boolean;
                                        /** @description The volume label of the resulting disk inside the VMI.
                                         *     Different bootstrapping mechanisms require different values.
                                         *     Typical values are "cidata" (cloud-init), "config-2" (cloud-init) or "OEMDRV" (kickstart). */
                                        volumeLabel?: string;
                                    };
                                    /** @description ContainerDisk references a docker image, embedding a qcow or raw disk.
                                     *     More info: https://kubevirt.gitbooks.io/user-guide/registry-disk.html */
                                    containerDisk?: {
                                        /** @description Image is the name of the image with the embedded disk. */
                                        image: string;
                                        /** @description Image pull policy.
                                         *     One of Always, Never, IfNotPresent.
                                         *     Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
                                         *     Cannot be updated.
                                         *     More info: https://kubernetes.io/docs/concepts/containers/images#updating-images */
                                        imagePullPolicy?: string;
                                        /** @description ImagePullSecret is the name of the Docker registry secret required to pull the image. The secret must already exist. */
                                        imagePullSecret?: string;
                                        /** @description Path defines the path to disk file in the container */
                                        path?: string;
                                    };
                                    /** @description DataVolume represents the dynamic creation a PVC for this volume as well as
                                     *     the process of populating that PVC with a disk image. */
                                    dataVolume?: {
                                        /** @description Hotpluggable indicates whether the volume can be hotplugged and hotunplugged. */
                                        hotpluggable?: boolean;
                                        /** @description Name of both the DataVolume and the PVC in the same namespace.
                                         *     After PVC population the DataVolume is garbage collected by default. */
                                        name: string;
                                    };
                                    /** @description DownwardAPI represents downward API about the pod that should populate this volume */
                                    downwardAPI?: {
                                        /** @description Fields is a list of downward API volume file */
                                        fields?: {
                                            /** @description Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported. */
                                            fieldRef?: {
                                                /** @description Version of the schema the FieldPath is written in terms of, defaults to "v1". */
                                                apiVersion?: string;
                                                /** @description Path of the field to select in the specified API version. */
                                                fieldPath: string;
                                            };
                                            /**
                                             * Format: int32
                                             * @description Optional: mode bits used to set permissions on this file, must be an octal value
                                             *     between 0000 and 0777 or a decimal value between 0 and 511.
                                             *     YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
                                             *     If not specified, the volume defaultMode will be used.
                                             *     This might be in conflict with other options that affect the file
                                             *     mode, like fsGroup, and the result can be other mode bits set.
                                             */
                                            mode?: number;
                                            /** @description Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..' */
                                            path: string;
                                            /** @description Selects a resource of the container: only resources limits and requests
                                             *     (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported. */
                                            resourceFieldRef?: {
                                                /** @description Container name: required for volumes, optional for env vars */
                                                containerName?: string;
                                                /** @description Specifies the output format of the exposed resources, defaults to "1" */
                                                divisor?: number | string;
                                                /** @description Required: resource to select */
                                                resource: string;
                                            };
                                        }[];
                                        /** @description The volume label of the resulting disk inside the VMI.
                                         *     Different bootstrapping mechanisms require different values.
                                         *     Typical values are "cidata" (cloud-init), "config-2" (cloud-init) or "OEMDRV" (kickstart). */
                                        volumeLabel?: string;
                                    };
                                    /** @description DownwardMetrics adds a very small disk to VMIs which contains a limited view of host and guest
                                     *     metrics. The disk content is compatible with vhostmd (https://github.com/vhostmd/vhostmd) and vm-dump-metrics. */
                                    downwardMetrics?: Record<string, never>;
                                    /** @description EmptyDisk represents a temporary disk which shares the vmis lifecycle.
                                     *     More info: https://kubevirt.gitbooks.io/user-guide/disks-and-volumes.html */
                                    emptyDisk?: {
                                        /** @description Capacity of the sparse disk. */
                                        capacity: number | string;
                                    };
                                    /** @description Ephemeral is a special volume source that "wraps" specified source and provides copy-on-write image on top of it. */
                                    ephemeral?: {
                                        /** @description PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace.
                                         *     Directly attached to the vmi via qemu.
                                         *     More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims */
                                        persistentVolumeClaim?: {
                                            /** @description claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
                                             *     More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims */
                                            claimName: string;
                                            /** @description readOnly Will force the ReadOnly setting in VolumeMounts.
                                             *     Default false. */
                                            readOnly?: boolean;
                                        };
                                    };
                                    /** @description HostDisk represents a disk created on the cluster level */
                                    hostDisk?: {
                                        /** @description Capacity of the sparse disk */
                                        capacity?: number | string;
                                        /** @description The path to HostDisk image located on the cluster */
                                        path: string;
                                        /** @description Shared indicate whether the path is shared between nodes */
                                        shared?: boolean;
                                        /** @description Contains information if disk.img exists or should be created
                                         *     allowed options are 'Disk' and 'DiskOrCreate' */
                                        type: string;
                                    };
                                    /** @description MemoryDump is attached to the virt launcher and is populated with a memory dump of the vmi */
                                    memoryDump?: {
                                        /** @description claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
                                         *     More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims */
                                        claimName: string;
                                        /** @description Hotpluggable indicates whether the volume can be hotplugged and hotunplugged. */
                                        hotpluggable?: boolean;
                                        /** @description readOnly Will force the ReadOnly setting in VolumeMounts.
                                         *     Default false. */
                                        readOnly?: boolean;
                                    };
                                    /** @description Volume's name.
                                     *     Must be a DNS_LABEL and unique within the vmi.
                                     *     More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names */
                                    name: string;
                                    /** @description PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace.
                                     *     Directly attached to the vmi via qemu.
                                     *     More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims */
                                    persistentVolumeClaim?: {
                                        /** @description claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
                                         *     More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims */
                                        claimName: string;
                                        /** @description Hotpluggable indicates whether the volume can be hotplugged and hotunplugged. */
                                        hotpluggable?: boolean;
                                        /** @description readOnly Will force the ReadOnly setting in VolumeMounts.
                                         *     Default false. */
                                        readOnly?: boolean;
                                    };
                                    /** @description SecretVolumeSource represents a reference to a secret data in the same namespace.
                                     *     More info: https://kubernetes.io/docs/concepts/configuration/secret/ */
                                    secret?: {
                                        /** @description Specify whether the Secret or it's keys must be defined */
                                        optional?: boolean;
                                        /** @description Name of the secret in the pod's namespace to use.
                                         *     More info: https://kubernetes.io/docs/concepts/storage/volumes#secret */
                                        secretName?: string;
                                        /** @description The volume label of the resulting disk inside the VMI.
                                         *     Different bootstrapping mechanisms require different values.
                                         *     Typical values are "cidata" (cloud-init), "config-2" (cloud-init) or "OEMDRV" (kickstart). */
                                        volumeLabel?: string;
                                    };
                                    /** @description ServiceAccountVolumeSource represents a reference to a service account.
                                     *     There can only be one volume of this type!
                                     *     More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/ */
                                    serviceAccount?: {
                                        /** @description Name of the service account in the pod's namespace to use.
                                         *     More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/ */
                                        serviceAccountName?: string;
                                    };
                                    /** @description Represents a Sysprep volume source. */
                                    sysprep?: {
                                        /** @description ConfigMap references a ConfigMap that contains Sysprep answer file named autounattend.xml that should be attached as disk of CDROM type. */
                                        configMap?: {
                                            /**
                                             * @description Name of the referent.
                                             *     This field is effectively required, but due to backwards compatibility is
                                             *     allowed to be empty. Instances of this type with an empty value here are
                                             *     almost certainly wrong.
                                             *     More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                             * @default
                                             */
                                            name: string;
                                        };
                                        /** @description Secret references a k8s Secret that contains Sysprep answer file named autounattend.xml that should be attached as disk of CDROM type. */
                                        secret?: {
                                            /**
                                             * @description Name of the referent.
                                             *     This field is effectively required, but due to backwards compatibility is
                                             *     allowed to be empty. Instances of this type with an empty value here are
                                             *     almost certainly wrong.
                                             *     More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                             * @default
                                             */
                                            name: string;
                                        };
                                    };
                                }[];
                            };
                        };
                        /** @description UpdateVolumesStrategy is the strategy to apply on volumes updates */
                        updateVolumesStrategy?: string;
                    };
                    /** @description VirtualMachineStatus represents the status returned by the
                     *     controller to describe how the VirtualMachine is doing */
                    status?: {
                        /** @description Hold the state information of the VirtualMachine and its VirtualMachineInstance */
                        conditions?: {
                            /** Format: date-time */
                            lastProbeTime?: string | null;
                            /** Format: date-time */
                            lastTransitionTime?: string | null;
                            message?: string;
                            reason?: string;
                            status: string;
                            type: string;
                        }[];
                        /** @description Created indicates if the virtual machine is created in the cluster */
                        created?: boolean;
                        /**
                         * Format: int64
                         * @description DesiredGeneration is the generation which is desired for the VMI.
                         *     This will be used in comparisons with ObservedGeneration to understand when
                         *     the VMI is out of sync. This will be changed at the same time as
                         *     ObservedGeneration to remove errors which could occur if Generation is
                         *     updated through an Update() before ObservedGeneration in Status.
                         */
                        desiredGeneration?: number;
                        /** @description MemoryDumpRequest tracks memory dump request phase and info of getting a memory
                         *     dump to the given pvc */
                        memoryDumpRequest?: {
                            /** @description ClaimName is the name of the pvc that will contain the memory dump */
                            claimName: string;
                            /**
                             * Format: date-time
                             * @description EndTimestamp represents the time the memory dump was completed
                             */
                            endTimestamp?: string;
                            /** @description FileName represents the name of the output file */
                            fileName?: string;
                            /** @description Message is a detailed message about failure of the memory dump */
                            message?: string;
                            /** @description Phase represents the memory dump phase */
                            phase: string;
                            /** @description Remove represents request of dissociating the memory dump pvc */
                            remove?: boolean;
                            /**
                             * Format: date-time
                             * @description StartTimestamp represents the time the memory dump started
                             */
                            startTimestamp?: string;
                        } | null;
                        /**
                         * Format: int64
                         * @description ObservedGeneration is the generation observed by the vmi when started.
                         */
                        observedGeneration?: number;
                        /**
                         * @description PrintableStatus is a human readable, high-level representation of the status of the virtual machine
                         * @default Stopped
                         */
                        printableStatus: string;
                        /** @description Ready indicates if the virtual machine is running and ready */
                        ready?: boolean;
                        /** @description RestoreInProgress is the name of the VirtualMachineRestore currently executing */
                        restoreInProgress?: string;
                        /** @description RunStrategy tracks the last recorded RunStrategy used by the VM.
                         *     This is needed to correctly process the next strategy (for now only the RerunOnFailure) */
                        runStrategy?: string;
                        /** @description SnapshotInProgress is the name of the VirtualMachineSnapshot currently executing */
                        snapshotInProgress?: string;
                        /** @description StartFailure tracks consecutive VMI startup failures for the purposes of
                         *     crash loop backoffs */
                        startFailure?: {
                            consecutiveFailCount?: number;
                            /** @description UID is a type that holds unique ID values, including UUIDs.  Because we
                             *     don't ONLY use UUIDs, this is an alias to string.  Being a type captures
                             *     intent and helps make sure that UIDs and names do not get conflated. */
                            lastFailedVMIUID?: string;
                            /** Format: date-time */
                            retryAfterTimestamp?: string;
                        } | null;
                        /** @description StateChangeRequests indicates a list of actions that should be taken on a VMI
                         *     e.g. stop a specific VMI then start a new one. */
                        stateChangeRequests?: {
                            /** @description Indicates the type of action that is requested. e.g. Start or Stop */
                            action: string;
                            /** @description Provides additional data in order to perform the Action */
                            data?: {
                                [key: string]: string;
                            };
                            /** @description Indicates the UUID of an existing Virtual Machine Instance that this change request applies to -- if applicable */
                            uid?: string;
                        }[];
                        /** @description VolumeRequests indicates a list of volumes add or remove from the VMI template and
                         *     hotplug on an active running VMI. */
                        volumeRequests?: {
                            /** @description AddVolumeOptions when set indicates a volume should be added. The details
                             *     within this field specify how to add the volume */
                            addVolumeOptions?: {
                                /** @description Disk represents the hotplug disk that will be plugged into the running VMI */
                                disk: {
                                    /** @description If specified, the virtual disk will be presented with the given block sizes. */
                                    blockSize?: {
                                        /** @description CustomBlockSize represents the desired logical and physical block size for a VM disk. */
                                        custom?: {
                                            logical: number;
                                            physical: number;
                                        };
                                        /** @description Represents if a feature is enabled or disabled. */
                                        matchVolume?: {
                                            /** @description Enabled determines if the feature should be enabled or disabled on the guest.
                                             *     Defaults to true. */
                                            enabled?: boolean;
                                        };
                                    };
                                    /** @description BootOrder is an integer value > 0, used to determine ordering of boot devices.
                                     *     Lower values take precedence.
                                     *     Each disk or interface that has a boot order must have a unique value.
                                     *     Disks without a boot order are not tried if a disk with a boot order exists. */
                                    bootOrder?: number;
                                    /** @description Cache specifies which kvm disk cache mode should be used.
                                     *     Supported values are: CacheNone, CacheWriteThrough. */
                                    cache?: string;
                                    /** @description Attach a volume as a cdrom to the vmi. */
                                    cdrom?: {
                                        /** @description Bus indicates the type of disk device to emulate.
                                         *     supported values: virtio, sata, scsi. */
                                        bus?: string;
                                        /** @description ReadOnly.
                                         *     Defaults to true. */
                                        readonly?: boolean;
                                        /** @description Tray indicates if the tray of the device is open or closed.
                                         *     Allowed values are "open" and "closed".
                                         *     Defaults to closed. */
                                        tray?: string;
                                    };
                                    /** @description dedicatedIOThread indicates this disk should have an exclusive IO Thread.
                                     *     Enabling this implies useIOThreads = true.
                                     *     Defaults to false. */
                                    dedicatedIOThread?: boolean;
                                    /** @description Attach a volume as a disk to the vmi. */
                                    disk?: {
                                        /** @description Bus indicates the type of disk device to emulate.
                                         *     supported values: virtio, sata, scsi, usb. */
                                        bus?: string;
                                        /** @description If specified, the virtual disk will be placed on the guests pci address with the specified PCI address. For example: 0000:81:01.10 */
                                        pciAddress?: string;
                                        /** @description ReadOnly.
                                         *     Defaults to false. */
                                        readonly?: boolean;
                                    };
                                    /** @description If specified, it can change the default error policy (stop) for the disk */
                                    errorPolicy?: string;
                                    /** @description IO specifies which QEMU disk IO mode should be used.
                                     *     Supported values are: native, default, threads. */
                                    io?: string;
                                    /** @description Attach a volume as a LUN to the vmi. */
                                    lun?: {
                                        /** @description Bus indicates the type of disk device to emulate.
                                         *     supported values: virtio, sata, scsi. */
                                        bus?: string;
                                        /** @description ReadOnly.
                                         *     Defaults to false. */
                                        readonly?: boolean;
                                        /** @description Reservation indicates if the disk needs to support the persistent reservation for the SCSI disk */
                                        reservation?: boolean;
                                    };
                                    /** @description Name is the device name */
                                    name: string;
                                    /** @description Serial provides the ability to specify a serial number for the disk device. */
                                    serial?: string;
                                    /** @description If specified the disk is made sharable and multiple write from different VMs are permitted */
                                    shareable?: boolean;
                                    /** @description If specified, disk address and its tag will be provided to the guest via config drive metadata */
                                    tag?: string;
                                };
                                /** @description When present, indicates that modifications should not be
                                 *     persisted. An invalid or unrecognized dryRun directive will
                                 *     result in an error response and no further processing of the
                                 *     request. Valid values are:
                                 *     - All: all dry run stages will be processed */
                                dryRun?: string[];
                                /** @description Name represents the name that will be used to map the
                                 *     disk to the corresponding volume. This overrides any name
                                 *     set inside the Disk struct itself. */
                                name: string;
                                /** @description VolumeSource represents the source of the volume to map to the disk. */
                                volumeSource: {
                                    /** @description DataVolume represents the dynamic creation a PVC for this volume as well as
                                     *     the process of populating that PVC with a disk image. */
                                    dataVolume?: {
                                        /** @description Hotpluggable indicates whether the volume can be hotplugged and hotunplugged. */
                                        hotpluggable?: boolean;
                                        /** @description Name of both the DataVolume and the PVC in the same namespace.
                                         *     After PVC population the DataVolume is garbage collected by default. */
                                        name: string;
                                    };
                                    /** @description PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace.
                                     *     Directly attached to the vmi via qemu.
                                     *     More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims */
                                    persistentVolumeClaim?: {
                                        /** @description claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
                                         *     More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims */
                                        claimName: string;
                                        /** @description Hotpluggable indicates whether the volume can be hotplugged and hotunplugged. */
                                        hotpluggable?: boolean;
                                        /** @description readOnly Will force the ReadOnly setting in VolumeMounts.
                                         *     Default false. */
                                        readOnly?: boolean;
                                    };
                                };
                            };
                            /** @description RemoveVolumeOptions when set indicates a volume should be removed. The details
                             *     within this field specify how to add the volume */
                            removeVolumeOptions?: {
                                /** @description When present, indicates that modifications should not be
                                 *     persisted. An invalid or unrecognized dryRun directive will
                                 *     result in an error response and no further processing of the
                                 *     request. Valid values are:
                                 *     - All: all dry run stages will be processed */
                                dryRun?: string[];
                                /** @description Name represents the name that maps to both the disk and volume that
                                 *     should be removed */
                                name: string;
                            };
                        }[];
                        /** @description VolumeSnapshotStatuses indicates a list of statuses whether snapshotting is
                         *     supported by each volume. */
                        volumeSnapshotStatuses?: {
                            /** @description True if the volume supports snapshotting */
                            enabled: boolean;
                            /** @description Volume name */
                            name: string;
                            /** @description Empty if snapshotting is enabled, contains reason otherwise */
                            reason?: string;
                        }[];
                    };
                };
                virtualMachineInstance?: {
                    metadata?: Record<string, any>;
                    /** @description Spec       *kubevirtcorev1.VirtualMachineInstanceSpec   `json:"spec,omitempty"` */
                    status?: {
                        /**
                         * Format: int32
                         * @description VSOCKCID is used to track the allocated VSOCK CID in the VM.
                         */
                        VSOCKCID?: number;
                        /** @description ActivePods is a mapping of pod UID to node name.
                         *     It is possible for multiple pods to be running for a single VMI during migration. */
                        activePods?: {
                            [key: string]: string;
                        };
                        /** @description Conditions are specific points in VirtualMachineInstance's pod runtime. */
                        conditions?: {
                            /** Format: date-time */
                            lastProbeTime?: string | null;
                            /** Format: date-time */
                            lastTransitionTime?: string | null;
                            message?: string;
                            reason?: string;
                            status: string;
                            type: string;
                        }[];
                        /** @description CurrentCPUTopology specifies the current CPU topology used by the VM workload.
                         *     Current topology may differ from the desired topology in the spec while CPU hotplug
                         *     takes place. */
                        currentCPUTopology?: {
                            /**
                             * Format: int32
                             * @description Cores specifies the number of cores inside the vmi.
                             *     Must be a value greater or equal 1.
                             */
                            cores?: number;
                            /**
                             * Format: int32
                             * @description Sockets specifies the number of sockets inside the vmi.
                             *     Must be a value greater or equal 1.
                             */
                            sockets?: number;
                            /**
                             * Format: int32
                             * @description Threads specifies the number of threads inside the vmi.
                             *     Must be a value greater or equal 1.
                             */
                            threads?: number;
                        };
                        /** @description EvacuationNodeName is used to track the eviction process of a VMI. It stores the name of the node that we want
                         *     to evacuate. It is meant to be used by KubeVirt core components only and can't be set or modified by users. */
                        evacuationNodeName?: string;
                        /** @description FSFreezeStatus is the state of the fs of the guest
                         *     it can be either frozen or thawed */
                        fsFreezeStatus?: string;
                        /** @description Guest OS Information */
                        guestOSInfo?: {
                            /** @description Guest OS Id */
                            id?: string;
                            /** @description Guest OS Kernel Release */
                            kernelRelease?: string;
                            /** @description Kernel version of the Guest OS */
                            kernelVersion?: string;
                            /** @description Machine type of the Guest OS */
                            machine?: string;
                            /** @description Name of the Guest OS */
                            name?: string;
                            /** @description Guest OS Pretty Name */
                            prettyName?: string;
                            /** @description Guest OS Version */
                            version?: string;
                            /** @description Version ID of the Guest OS */
                            versionId?: string;
                        };
                        /** @description Interfaces represent the details of available network interfaces. */
                        interfaces?: {
                            /** @description Specifies the origin of the interface data collected. values: domain, guest-agent, multus-status. */
                            infoSource?: string;
                            /** @description The interface name inside the Virtual Machine */
                            interfaceName?: string;
                            /** @description IP address of a Virtual Machine interface. It is always the first item of
                             *     IPs */
                            ipAddress?: string;
                            /** @description List of all IP addresses of a Virtual Machine interface */
                            ipAddresses?: string[];
                            /** @description Hardware address of a Virtual Machine interface */
                            mac?: string;
                            /** @description Name of the interface, corresponds to name of the network assigned to the interface */
                            name?: string;
                            /**
                             * Format: int32
                             * @description Specifies how many queues are allocated by MultiQueue
                             */
                            queueCount?: number;
                        }[];
                        /** @description KernelBootStatus contains info about the kernelBootContainer */
                        kernelBootStatus?: {
                            /** @description InitrdInfo show info about the initrd file */
                            initrdInfo?: {
                                /**
                                 * Format: int32
                                 * @description Checksum is the checksum of the initrd file
                                 */
                                checksum?: number;
                            };
                            /** @description KernelInfo show info about the kernel image */
                            kernelInfo?: {
                                /**
                                 * Format: int32
                                 * @description Checksum is the checksum of the kernel image
                                 */
                                checksum?: number;
                            };
                        };
                        /** @description LauncherContainerImageVersion indicates what container image is currently active for the vmi. */
                        launcherContainerImageVersion?: string;
                        /** @description Machine shows the final resulting qemu machine type. This can be different
                         *     than the machine type selected in the spec, due to qemus machine type alias mechanism. */
                        machine?: {
                            /** @description QEMU machine type is the actual chipset of the VirtualMachineInstance. */
                            type?: string;
                        };
                        /** @description Memory shows various informations about the VirtualMachine memory. */
                        memory?: {
                            /** @description GuestAtBoot specifies with how much memory the VirtualMachine intiallly booted with. */
                            guestAtBoot?: number | string;
                            /** @description GuestCurrent specifies how much memory is currently available for the VirtualMachine. */
                            guestCurrent?: number | string;
                            /** @description GuestRequested specifies how much memory was requested (hotplug) for the VirtualMachine. */
                            guestRequested?: number | string;
                        };
                        /** @description MigratedVolumes lists the source and destination volumes during the volume migration */
                        migratedVolumes?: {
                            /** @description DestinationPVCInfo contains the information about the destination PVC */
                            destinationPVCInfo?: {
                                /** @description AccessModes contains the desired access modes the volume should have.
                                 *     More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1 */
                                accessModes?: string[];
                                /** @description Capacity represents the capacity set on the corresponding PVC status */
                                capacity?: {
                                    [key: string]: number | string;
                                };
                                /** @description ClaimName is the name of the PVC */
                                claimName?: string;
                                /** @description Percentage of filesystem's size to be reserved when resizing the PVC */
                                filesystemOverhead?: string;
                                /** @description Preallocated indicates if the PVC's storage is preallocated or not */
                                preallocated?: boolean;
                                /** @description Requests represents the resources requested by the corresponding PVC spec */
                                requests?: {
                                    [key: string]: number | string;
                                };
                                /** @description VolumeMode defines what type of volume is required by the claim.
                                 *     Value of Filesystem is implied when not included in claim spec. */
                                volumeMode?: string;
                            };
                            /** @description SourcePVCInfo contains the information about the source PVC */
                            sourcePVCInfo?: {
                                /** @description AccessModes contains the desired access modes the volume should have.
                                 *     More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1 */
                                accessModes?: string[];
                                /** @description Capacity represents the capacity set on the corresponding PVC status */
                                capacity?: {
                                    [key: string]: number | string;
                                };
                                /** @description ClaimName is the name of the PVC */
                                claimName?: string;
                                /** @description Percentage of filesystem's size to be reserved when resizing the PVC */
                                filesystemOverhead?: string;
                                /** @description Preallocated indicates if the PVC's storage is preallocated or not */
                                preallocated?: boolean;
                                /** @description Requests represents the resources requested by the corresponding PVC spec */
                                requests?: {
                                    [key: string]: number | string;
                                };
                                /** @description VolumeMode defines what type of volume is required by the claim.
                                 *     Value of Filesystem is implied when not included in claim spec. */
                                volumeMode?: string;
                            };
                            /** @description VolumeName is the name of the volume that is being migrated */
                            volumeName: string;
                        }[];
                        /** @description Represents the method using which the vmi can be migrated: live migration or block migration */
                        migrationMethod?: string;
                        /** @description Represents the status of a live migration */
                        migrationState?: {
                            /** @description Indicates that the migration has been requested to abort */
                            abortRequested?: boolean;
                            /** @description Indicates the final status of the live migration abortion */
                            abortStatus?: string;
                            /** @description Indicates the migration completed */
                            completed?: boolean;
                            /**
                             * Format: date-time
                             * @description The time the migration action ended
                             */
                            endTimestamp?: string | null;
                            /** @description Indicates that the migration failed */
                            failed?: boolean;
                            /** @description Contains the reason why the migration failed */
                            failureReason?: string;
                            /** @description Migration configurations to apply */
                            migrationConfiguration?: {
                                /** @description AllowAutoConverge allows the platform to compromise performance/availability of VMIs to
                                 *     guarantee successful VMI live migrations. Defaults to false */
                                allowAutoConverge?: boolean;
                                /** @description AllowPostCopy enables post-copy live migrations. Such migrations allow even the busiest VMIs
                                 *     to successfully live-migrate. However, events like a network failure can cause a VMI crash.
                                 *     If set to true, migrations will still start in pre-copy, but switch to post-copy when
                                 *     CompletionTimeoutPerGiB triggers. Defaults to false */
                                allowPostCopy?: boolean;
                                /** @description BandwidthPerMigration limits the amount of network bandwidth live migrations are allowed to use.
                                 *     The value is in quantity per second. Defaults to 0 (no limit) */
                                bandwidthPerMigration?: number | string;
                                /**
                                 * Format: int64
                                 * @description CompletionTimeoutPerGiB is the maximum number of seconds per GiB a migration is allowed to take.
                                 *     If a live-migration takes longer to migrate than this value multiplied by the size of the VMI,
                                 *     the migration will be cancelled, unless AllowPostCopy is true. Defaults to 800
                                 */
                                completionTimeoutPerGiB?: number;
                                /** @description When set to true, DisableTLS will disable the additional layer of live migration encryption
                                 *     provided by KubeVirt. This is usually a bad idea. Defaults to false */
                                disableTLS?: boolean;
                                /** @description By default, the SELinux level of target virt-launcher pods is forced to the level of the source virt-launcher.
                                 *     When set to true, MatchSELinuxLevelOnMigration lets the CRI auto-assign a random level to the target.
                                 *     That will ensure the target virt-launcher doesn't share categories with another pod on the node.
                                 *     However, migrations will fail when using RWX volumes that don't automatically deal with SELinux levels. */
                                matchSELinuxLevelOnMigration?: boolean;
                                /** @description Network is the name of the CNI network to use for live migrations. By default, migrations go
                                 *     through the pod network. */
                                network?: string;
                                /** @description NodeDrainTaintKey defines the taint key that indicates a node should be drained.
                                 *     Note: this option relies on the deprecated node taint feature. Default: kubevirt.io/drain */
                                nodeDrainTaintKey?: string;
                                /**
                                 * Format: int32
                                 * @description ParallelMigrationsPerCluster is the total number of concurrent live migrations
                                 *     allowed cluster-wide. Defaults to 5
                                 */
                                parallelMigrationsPerCluster?: number;
                                /**
                                 * Format: int32
                                 * @description ParallelOutboundMigrationsPerNode is the maximum number of concurrent outgoing live migrations
                                 *     allowed per node. Defaults to 2
                                 */
                                parallelOutboundMigrationsPerNode?: number;
                                /**
                                 * Format: int64
                                 * @description ProgressTimeout is the maximum number of seconds a live migration is allowed to make no progress.
                                 *     Hitting this timeout means a migration transferred 0 data for that many seconds. The migration is
                                 *     then considered stuck and therefore cancelled. Defaults to 150
                                 */
                                progressTimeout?: number;
                                /** @description UnsafeMigrationOverride allows live migrations to occur even if the compatibility check
                                 *     indicates the migration will be unsafe to the guest. Defaults to false */
                                unsafeMigrationOverride?: boolean;
                            };
                            /** @description Name of the migration policy. If string is empty, no policy is matched */
                            migrationPolicyName?: string;
                            /** @description The VirtualMachineInstanceMigration object associated with this migration */
                            migrationUid?: string;
                            /** @description Lets us know if the vmi is currently running pre or post copy migration */
                            mode?: string;
                            /** @description The source node that the VMI originated on */
                            sourceNode?: string;
                            sourcePod?: string;
                            /**
                             * Format: date-time
                             * @description The time the migration action began
                             */
                            startTimestamp?: string | null;
                            /** @description The UID of the target attachment pod for hotplug volumes */
                            targetAttachmentPodUID?: string;
                            /** @description If the VMI requires dedicated CPUs, this field will
                             *     hold the dedicated CPU set on the target node */
                            targetCPUSet?: number[];
                            /** @description The list of ports opened for live migration on the destination node */
                            targetDirectMigrationNodePorts?: {
                                [key: string]: number;
                            };
                            /** @description The target node that the VMI is moving to */
                            targetNode?: string;
                            /** @description The address of the target node to use for the migration */
                            targetNodeAddress?: string;
                            /** @description The Target Node has seen the Domain Start Event */
                            targetNodeDomainDetected?: boolean;
                            /**
                             * Format: date-time
                             * @description The timestamp at which the target node detects the domain is active
                             */
                            targetNodeDomainReadyTimestamp?: string;
                            /** @description If the VMI requires dedicated CPUs, this field will
                             *     hold the numa topology on the target node */
                            targetNodeTopology?: string;
                            /** @description The target pod that the VMI is moving to */
                            targetPod?: string;
                        };
                        /** @description This represents the migration transport */
                        migrationTransport?: string;
                        /** @description NodeName is the name where the VirtualMachineInstance is currently running. */
                        nodeName?: string;
                        /** @description Phase is the status of the VirtualMachineInstance in kubernetes world. It is not the VirtualMachineInstance status, but partially correlates to it. */
                        phase?: string;
                        /** @description PhaseTransitionTimestamp is the timestamp of when the last phase change occurred */
                        phaseTransitionTimestamps?: {
                            /** @description Phase is the status of the VirtualMachineInstance in kubernetes world. It is not the VirtualMachineInstance status, but partially correlates to it. */
                            phase?: string;
                            /**
                             * Format: date-time
                             * @description PhaseTransitionTimestamp is the timestamp of when the phase change occurred
                             */
                            phaseTransitionTimestamp?: string;
                        }[];
                        /** @description The Quality of Service (QOS) classification assigned to the virtual machine instance based on resource requirements
                         *     See PodQOSClass type for available QOS classes
                         *     More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md */
                        qosClass?: string;
                        /** @description A brief CamelCase message indicating details about why the VMI is in this state. e.g. 'NodeUnresponsive' */
                        reason?: string;
                        /**
                         * Format: int64
                         * @description RuntimeUser is used to determine what user will be used in launcher
                         */
                        runtimeUser?: number;
                        /** @description SELinuxContext is the actual SELinux context of the virt-launcher pod */
                        selinuxContext?: string;
                        topologyHints?: {
                            /** Format: int64 */
                            tscFrequency?: number;
                        };
                        /** @description VirtualMachineRevisionName is used to get the vm revision of the vmi when doing
                         *     an online vm snapshot */
                        virtualMachineRevisionName?: string;
                        /** @description VolumeStatus contains the statuses of all the volumes */
                        volumeStatus?: {
                            /** @description ContainerDiskVolume shows info about the containerdisk, if the volume is a containerdisk */
                            containerDiskVolume?: {
                                /**
                                 * Format: int32
                                 * @description Checksum is the checksum of the rootdisk or kernel artifacts inside the containerdisk
                                 */
                                checksum?: number;
                            };
                            /** @description If the volume is hotplug, this will contain the hotplug status. */
                            hotplugVolume?: {
                                /** @description AttachPodName is the name of the pod used to attach the volume to the node. */
                                attachPodName?: string;
                                /** @description AttachPodUID is the UID of the pod used to attach the volume to the node. */
                                attachPodUID?: string;
                            };
                            /** @description If the volume is memorydump volume, this will contain the memorydump info. */
                            memoryDumpVolume?: {
                                /** @description ClaimName is the name of the pvc the memory was dumped to */
                                claimName?: string;
                                /**
                                 * Format: date-time
                                 * @description EndTimestamp is the time when the memory dump completed
                                 */
                                endTimestamp?: string;
                                /**
                                 * Format: date-time
                                 * @description StartTimestamp is the time when the memory dump started
                                 */
                                startTimestamp?: string;
                                /** @description TargetFileName is the name of the memory dump output */
                                targetFileName?: string;
                            };
                            /** @description Message is a detailed message about the current hotplug volume phase */
                            message?: string;
                            /** @description Name is the name of the volume */
                            name: string;
                            /** @description PersistentVolumeClaimInfo is information about the PVC that handler requires during start flow */
                            persistentVolumeClaimInfo?: {
                                /** @description AccessModes contains the desired access modes the volume should have.
                                 *     More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1 */
                                accessModes?: string[];
                                /** @description Capacity represents the capacity set on the corresponding PVC status */
                                capacity?: {
                                    [key: string]: number | string;
                                };
                                /** @description ClaimName is the name of the PVC */
                                claimName?: string;
                                /** @description Percentage of filesystem's size to be reserved when resizing the PVC */
                                filesystemOverhead?: string;
                                /** @description Preallocated indicates if the PVC's storage is preallocated or not */
                                preallocated?: boolean;
                                /** @description Requests represents the resources requested by the corresponding PVC spec */
                                requests?: {
                                    [key: string]: number | string;
                                };
                                /** @description VolumeMode defines what type of volume is required by the claim.
                                 *     Value of Filesystem is implied when not included in claim spec. */
                                volumeMode?: string;
                            };
                            /** @description Phase is the phase */
                            phase?: string;
                            /** @description Reason is a brief description of why we are in the current hotplug volume phase */
                            reason?: string;
                            /**
                             * Format: int64
                             * @description Represents the size of the volume
                             */
                            size?: number;
                            /** @description Target is the target name used when adding the volume to the VM, eg: vda */
                            target: string;
                        }[];
                    };
                };
            };
        };
        /** @description VirtualMachineInstance is *the* VirtualMachineInstance Definition. It represents a virtual machine in the runtime environment of kubernetes. */
        v1VirtualMachineInstance: {
            /** @description APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources */
            apiVersion?: string;
            /** @description Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds */
            kind?: string;
            metadata?: Record<string, any>;
            /** @description VirtualMachineInstance Spec contains the VirtualMachineInstance specification. */
            spec: {
                /** @description Specifies a set of public keys to inject into the vm guest */
                accessCredentials?: {
                    /** @description SSHPublicKey represents the source and method of applying a ssh public key into a guest virtual machine. */
                    sshPublicKey?: {
                        /** @description PropagationMethod represents how the public key is injected into the vm guest. */
                        propagationMethod: {
                            /** @description ConfigDrivePropagation means that the ssh public keys are injected into the VM using metadata using the configDrive cloud-init provider */
                            configDrive?: Record<string, never>;
                            /** @description NoCloudPropagation means that the ssh public keys are injected into the VM using metadata using the noCloud cloud-init provider */
                            noCloud?: Record<string, never>;
                            /** @description QemuGuestAgentAccessCredentailPropagation means ssh public keys are dynamically injected into the vm at runtime via the qemu guest agent. This feature requires the qemu guest agent to be running within the guest. */
                            qemuGuestAgent?: {
                                /** @description Users represents a list of guest users that should have the ssh public keys added to their authorized_keys file. */
                                users: string[];
                            };
                        };
                        /** @description Source represents where the public keys are pulled from */
                        source: {
                            /** @description Secret means that the access credential is pulled from a kubernetes secret */
                            secret?: {
                                /** @description SecretName represents the name of the secret in the VMI's namespace */
                                secretName: string;
                            };
                        };
                    };
                    /** @description UserPassword represents the source and method for applying a guest user's password */
                    userPassword?: {
                        /** @description propagationMethod represents how the user passwords are injected into the vm guest. */
                        propagationMethod: {
                            /** @description QemuGuestAgentAccessCredentailPropagation means passwords are dynamically injected into the vm at runtime via the qemu guest agent. This feature requires the qemu guest agent to be running within the guest. */
                            qemuGuestAgent?: Record<string, never>;
                        };
                        /** @description Source represents where the user passwords are pulled from */
                        source: {
                            /** @description Secret means that the access credential is pulled from a kubernetes secret */
                            secret?: {
                                /** @description SecretName represents the name of the secret in the VMI's namespace */
                                secretName: string;
                            };
                        };
                    };
                }[];
                /** @description If affinity is specifies, obey all the affinity rules */
                affinity?: {
                    /** @description Describes node affinity scheduling rules for the pod. */
                    nodeAffinity?: {
                        /** @description The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred. */
                        preferredDuringSchedulingIgnoredDuringExecution?: {
                            /** @description A node selector term, associated with the corresponding weight. */
                            preference: {
                                /** @description A list of node selector requirements by node's labels. */
                                matchExpressions?: {
                                    /** @description The label key that the selector applies to. */
                                    key: string;
                                    /** @description Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt. */
                                    operator: string;
                                    /** @description An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch. */
                                    values?: string[];
                                }[];
                                /** @description A list of node selector requirements by node's fields. */
                                matchFields?: {
                                    /** @description The label key that the selector applies to. */
                                    key: string;
                                    /** @description Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt. */
                                    operator: string;
                                    /** @description An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch. */
                                    values?: string[];
                                }[];
                            };
                            /**
                             * Format: int32
                             * @description Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
                             */
                            weight: number;
                        }[];
                        /** @description If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node. */
                        requiredDuringSchedulingIgnoredDuringExecution?: {
                            /** @description Required. A list of node selector terms. The terms are ORed. */
                            nodeSelectorTerms: {
                                /** @description A list of node selector requirements by node's labels. */
                                matchExpressions?: {
                                    /** @description The label key that the selector applies to. */
                                    key: string;
                                    /** @description Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt. */
                                    operator: string;
                                    /** @description An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch. */
                                    values?: string[];
                                }[];
                                /** @description A list of node selector requirements by node's fields. */
                                matchFields?: {
                                    /** @description The label key that the selector applies to. */
                                    key: string;
                                    /** @description Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt. */
                                    operator: string;
                                    /** @description An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch. */
                                    values?: string[];
                                }[];
                            }[];
                        };
                    };
                    /** @description Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)). */
                    podAffinity?: {
                        /** @description The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred. */
                        preferredDuringSchedulingIgnoredDuringExecution?: {
                            /** @description Required. A pod affinity term, associated with the corresponding weight. */
                            podAffinityTerm: {
                                /** @description A label query over a set of resources, in this case pods. */
                                labelSelector?: {
                                    /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                                    matchExpressions?: {
                                        /** @description key is the label key that the selector applies to. */
                                        key: string;
                                        /** @description operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. */
                                        operator: string;
                                        /** @description values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. */
                                        values?: string[];
                                    }[];
                                    /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed. */
                                    matchLabels?: {
                                        [key: string]: string;
                                    };
                                };
                                /** @description A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. */
                                namespaceSelector?: {
                                    /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                                    matchExpressions?: {
                                        /** @description key is the label key that the selector applies to. */
                                        key: string;
                                        /** @description operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. */
                                        operator: string;
                                        /** @description values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. */
                                        values?: string[];
                                    }[];
                                    /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed. */
                                    matchLabels?: {
                                        [key: string]: string;
                                    };
                                };
                                /** @description namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace". */
                                namespaces?: string[];
                                /** @description This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed. */
                                topologyKey: string;
                            };
                            /**
                             * Format: int32
                             * @description weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
                             */
                            weight: number;
                        }[];
                        /** @description If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. */
                        requiredDuringSchedulingIgnoredDuringExecution?: {
                            /** @description A label query over a set of resources, in this case pods. */
                            labelSelector?: {
                                /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                                matchExpressions?: {
                                    /** @description key is the label key that the selector applies to. */
                                    key: string;
                                    /** @description operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. */
                                    operator: string;
                                    /** @description values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. */
                                    values?: string[];
                                }[];
                                /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed. */
                                matchLabels?: {
                                    [key: string]: string;
                                };
                            };
                            /** @description A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. */
                            namespaceSelector?: {
                                /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                                matchExpressions?: {
                                    /** @description key is the label key that the selector applies to. */
                                    key: string;
                                    /** @description operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. */
                                    operator: string;
                                    /** @description values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. */
                                    values?: string[];
                                }[];
                                /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed. */
                                matchLabels?: {
                                    [key: string]: string;
                                };
                            };
                            /** @description namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace". */
                            namespaces?: string[];
                            /** @description This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed. */
                            topologyKey: string;
                        }[];
                    };
                    /** @description Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)). */
                    podAntiAffinity?: {
                        /** @description The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred. */
                        preferredDuringSchedulingIgnoredDuringExecution?: {
                            /** @description Required. A pod affinity term, associated with the corresponding weight. */
                            podAffinityTerm: {
                                /** @description A label query over a set of resources, in this case pods. */
                                labelSelector?: {
                                    /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                                    matchExpressions?: {
                                        /** @description key is the label key that the selector applies to. */
                                        key: string;
                                        /** @description operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. */
                                        operator: string;
                                        /** @description values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. */
                                        values?: string[];
                                    }[];
                                    /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed. */
                                    matchLabels?: {
                                        [key: string]: string;
                                    };
                                };
                                /** @description A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. */
                                namespaceSelector?: {
                                    /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                                    matchExpressions?: {
                                        /** @description key is the label key that the selector applies to. */
                                        key: string;
                                        /** @description operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. */
                                        operator: string;
                                        /** @description values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. */
                                        values?: string[];
                                    }[];
                                    /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed. */
                                    matchLabels?: {
                                        [key: string]: string;
                                    };
                                };
                                /** @description namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace". */
                                namespaces?: string[];
                                /** @description This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed. */
                                topologyKey: string;
                            };
                            /**
                             * Format: int32
                             * @description weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
                             */
                            weight: number;
                        }[];
                        /** @description If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. */
                        requiredDuringSchedulingIgnoredDuringExecution?: {
                            /** @description A label query over a set of resources, in this case pods. */
                            labelSelector?: {
                                /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                                matchExpressions?: {
                                    /** @description key is the label key that the selector applies to. */
                                    key: string;
                                    /** @description operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. */
                                    operator: string;
                                    /** @description values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. */
                                    values?: string[];
                                }[];
                                /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed. */
                                matchLabels?: {
                                    [key: string]: string;
                                };
                            };
                            /** @description A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. */
                            namespaceSelector?: {
                                /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                                matchExpressions?: {
                                    /** @description key is the label key that the selector applies to. */
                                    key: string;
                                    /** @description operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. */
                                    operator: string;
                                    /** @description values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. */
                                    values?: string[];
                                }[];
                                /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed. */
                                matchLabels?: {
                                    [key: string]: string;
                                };
                            };
                            /** @description namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace". */
                            namespaces?: string[];
                            /** @description This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed. */
                            topologyKey: string;
                        }[];
                    };
                };
                /** @description Specifies the architecture of the vm guest you are attempting to run. Defaults to the compiled architecture of the KubeVirt components */
                architecture?: string;
                /** @description Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy. */
                dnsConfig?: {
                    /** @description A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed. */
                    nameservers?: string[];
                    /** @description A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy. */
                    options?: {
                        /** @description Required. */
                        name?: string;
                        value?: string;
                    }[];
                    /** @description A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed. */
                    searches?: string[];
                };
                /** @description Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'. */
                dnsPolicy?: string;
                /** @description Specification of the desired behavior of the VirtualMachineInstance on the host. */
                domain: {
                    /** @description Chassis specifies the chassis info passed to the domain. */
                    chassis?: {
                        asset?: string;
                        manufacturer?: string;
                        serial?: string;
                        sku?: string;
                        version?: string;
                    };
                    /** @description Clock sets the clock and timers of the vmi. */
                    clock?: {
                        /** @description Timer specifies whih timers are attached to the vmi. */
                        timer?: {
                            /** @description HPET (High Precision Event Timer) - multiple timers with periodic interrupts. */
                            hpet?: {
                                /** @description Enabled set to false makes sure that the machine type or a preset can't add the timer. Defaults to true. */
                                present?: boolean;
                                /** @description TickPolicy determines what happens when QEMU misses a deadline for injecting a tick to the guest. One of "delay", "catchup", "merge", "discard". */
                                tickPolicy?: string;
                            };
                            /** @description Hyperv (Hypervclock) - lets guests read the host’s wall clock time (paravirtualized). For windows guests. */
                            hyperv?: {
                                /** @description Enabled set to false makes sure that the machine type or a preset can't add the timer. Defaults to true. */
                                present?: boolean;
                            };
                            /** @description KVM 	(KVM clock) - lets guests read the host’s wall clock time (paravirtualized). For linux guests. */
                            kvm?: {
                                /** @description Enabled set to false makes sure that the machine type or a preset can't add the timer. Defaults to true. */
                                present?: boolean;
                            };
                            /** @description PIT (Programmable Interval Timer) - a timer with periodic interrupts. */
                            pit?: {
                                /** @description Enabled set to false makes sure that the machine type or a preset can't add the timer. Defaults to true. */
                                present?: boolean;
                                /** @description TickPolicy determines what happens when QEMU misses a deadline for injecting a tick to the guest. One of "delay", "catchup", "discard". */
                                tickPolicy?: string;
                            };
                            /** @description RTC (Real Time Clock) - a continuously running timer with periodic interrupts. */
                            rtc?: {
                                /** @description Enabled set to false makes sure that the machine type or a preset can't add the timer. Defaults to true. */
                                present?: boolean;
                                /** @description TickPolicy determines what happens when QEMU misses a deadline for injecting a tick to the guest. One of "delay", "catchup". */
                                tickPolicy?: string;
                                /** @description Track the guest or the wall clock. */
                                track?: string;
                            };
                        };
                        /** @description Timezone sets the guest clock to the specified timezone. Zone name follows the TZ environment variable format (e.g. 'America/New_York'). */
                        timezone?: string;
                        /** @description UTC sets the guest clock to UTC on each boot. If an offset is specified, guest changes to the clock will be kept during reboots and are not reset. */
                        utc?: {
                            /** @description OffsetSeconds specifies an offset in seconds, relative to UTC. If set, guest changes to the clock will be kept during reboots and not reset. */
                            offsetSeconds?: number;
                        };
                    };
                    /** @description CPU allow specified the detailed CPU topology inside the vmi. */
                    cpu?: {
                        /**
                         * Format: int32
                         * @description Cores specifies the number of cores inside the vmi. Must be a value greater or equal 1.
                         */
                        cores?: number;
                        /** @description DedicatedCPUPlacement requests the scheduler to place the VirtualMachineInstance on a node with enough dedicated pCPUs and pin the vCPUs to it. */
                        dedicatedCpuPlacement?: boolean;
                        /** @description Features specifies the CPU features list inside the VMI. */
                        features?: {
                            /** @description Name of the CPU feature */
                            name: string;
                            /** @description Policy is the CPU feature attribute which can have the following attributes: force    - The virtual CPU will claim the feature is supported regardless of it being supported by host CPU. require  - Guest creation will fail unless the feature is supported by the host CPU or the hypervisor is able to emulate it. optional - The feature will be supported by virtual CPU if and only if it is supported by host CPU. disable  - The feature will not be supported by virtual CPU. forbid   - Guest creation will fail if the feature is supported by host CPU. Defaults to require */
                            policy?: string;
                        }[];
                        /** @description IsolateEmulatorThread requests one more dedicated pCPU to be allocated for the VMI to place the emulator thread on it. */
                        isolateEmulatorThread?: boolean;
                        /**
                         * Format: int32
                         * @description MaxSockets specifies the maximum amount of sockets that can be hotplugged
                         */
                        maxSockets?: number;
                        /** @description Model specifies the CPU model inside the VMI. List of available models https://github.com/libvirt/libvirt/tree/master/src/cpu_map. It is possible to specify special cases like "host-passthrough" to get the same CPU as the node and "host-model" to get CPU closest to the node one. Defaults to host-model. */
                        model?: string;
                        /** @description NUMA allows specifying settings for the guest NUMA topology */
                        numa?: {
                            /** @description GuestMappingPassthrough will create an efficient guest topology based on host CPUs exclusively assigned to a pod. The created topology ensures that memory and CPUs on the virtual numa nodes never cross boundaries of host numa nodes. */
                            guestMappingPassthrough?: Record<string, never>;
                        };
                        /** @description Realtime instructs the virt-launcher to tune the VMI for lower latency, optional for real time workloads */
                        realtime?: {
                            /** @description Mask defines the vcpu mask expression that defines which vcpus are used for realtime. Format matches libvirt's expressions. Example: "0-3,^1","0,2,3","2-3" */
                            mask?: string;
                        };
                        /**
                         * Format: int32
                         * @description Sockets specifies the number of sockets inside the vmi. Must be a value greater or equal 1.
                         */
                        sockets?: number;
                        /**
                         * Format: int32
                         * @description Threads specifies the number of threads inside the vmi. Must be a value greater or equal 1.
                         */
                        threads?: number;
                    };
                    /** @description Devices allows adding disks, network interfaces, and others */
                    devices: {
                        /** @description Whether to attach the default graphics device or not. VNC will not be available if set to false. Defaults to true. */
                        autoattachGraphicsDevice?: boolean;
                        /** @description Whether to attach an Input Device. Defaults to false. */
                        autoattachInputDevice?: boolean;
                        /** @description Whether to attach the Memory balloon device with default period. Period can be adjusted in virt-config. Defaults to true. */
                        autoattachMemBalloon?: boolean;
                        /** @description Whether to attach a pod network interface. Defaults to true. */
                        autoattachPodInterface?: boolean;
                        /** @description Whether to attach the default virtio-serial console or not. Serial console access will not be available if set to false. Defaults to true. */
                        autoattachSerialConsole?: boolean;
                        /** @description Whether to attach the VSOCK CID to the VM or not. VSOCK access will be available if set to true. Defaults to false. */
                        autoattachVSOCK?: boolean;
                        /** @description Whether or not to enable virtio multi-queue for block devices. Defaults to false. */
                        blockMultiQueue?: boolean;
                        /** @description To configure and access client devices such as redirecting USB */
                        clientPassthrough?: Record<string, never>;
                        /** @description DisableHotplug disabled the ability to hotplug disks. */
                        disableHotplug?: boolean;
                        /** @description Disks describes disks, cdroms and luns which are connected to the vmi. */
                        disks?: {
                            /** @description If specified, the virtual disk will be presented with the given block sizes. */
                            blockSize?: {
                                /** @description CustomBlockSize represents the desired logical and physical block size for a VM disk. */
                                custom?: {
                                    logical: number;
                                    physical: number;
                                };
                                /** @description Represents if a feature is enabled or disabled. */
                                matchVolume?: {
                                    /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                    enabled?: boolean;
                                };
                            };
                            /** @description BootOrder is an integer value > 0, used to determine ordering of boot devices. Lower values take precedence. Each disk or interface that has a boot order must have a unique value. Disks without a boot order are not tried if a disk with a boot order exists. */
                            bootOrder?: number;
                            /** @description Cache specifies which kvm disk cache mode should be used. Supported values are: CacheNone, CacheWriteThrough. */
                            cache?: string;
                            /** @description Attach a volume as a cdrom to the vmi. */
                            cdrom?: {
                                /** @description Bus indicates the type of disk device to emulate. supported values: virtio, sata, scsi. */
                                bus?: string;
                                /** @description ReadOnly. Defaults to true. */
                                readonly?: boolean;
                                /** @description Tray indicates if the tray of the device is open or closed. Allowed values are "open" and "closed". Defaults to closed. */
                                tray?: string;
                            };
                            /** @description dedicatedIOThread indicates this disk should have an exclusive IO Thread. Enabling this implies useIOThreads = true. Defaults to false. */
                            dedicatedIOThread?: boolean;
                            /** @description Attach a volume as a disk to the vmi. */
                            disk?: {
                                /** @description Bus indicates the type of disk device to emulate. supported values: virtio, sata, scsi, usb. */
                                bus?: string;
                                /** @description If specified, the virtual disk will be placed on the guests pci address with the specified PCI address. For example: 0000:81:01.10 */
                                pciAddress?: string;
                                /** @description ReadOnly. Defaults to false. */
                                readonly?: boolean;
                            };
                            /** @description If specified, it can change the default error policy (stop) for the disk */
                            errorPolicy?: string;
                            /** @description IO specifies which QEMU disk IO mode should be used. Supported values are: native, default, threads. */
                            io?: string;
                            /** @description Attach a volume as a LUN to the vmi. */
                            lun?: {
                                /** @description Bus indicates the type of disk device to emulate. supported values: virtio, sata, scsi. */
                                bus?: string;
                                /** @description ReadOnly. Defaults to false. */
                                readonly?: boolean;
                                /** @description Reservation indicates if the disk needs to support the persistent reservation for the SCSI disk */
                                reservation?: boolean;
                            };
                            /** @description Name is the device name */
                            name: string;
                            /** @description Serial provides the ability to specify a serial number for the disk device. */
                            serial?: string;
                            /** @description If specified the disk is made sharable and multiple write from different VMs are permitted */
                            shareable?: boolean;
                            /** @description If specified, disk address and its tag will be provided to the guest via config drive metadata */
                            tag?: string;
                        }[];
                        /** @description DownwardMetrics creates a virtio serials for exposing the downward metrics to the vmi. */
                        downwardMetrics?: Record<string, never>;
                        /** @description Filesystems describes filesystem which is connected to the vmi. */
                        filesystems?: {
                            /** @description Name is the device name */
                            name: string;
                            /** @description Virtiofs is supported */
                            virtiofs: Record<string, never>;
                        }[];
                        /** @description Whether to attach a GPU device to the vmi. */
                        gpus?: {
                            deviceName: string;
                            /** @description Name of the GPU device as exposed by a device plugin */
                            name: string;
                            /** @description If specified, the virtual network interface address and its tag will be provided to the guest via config drive */
                            tag?: string;
                            virtualGPUOptions?: {
                                display?: {
                                    /** @description Enabled determines if a display addapter backed by a vGPU should be enabled or disabled on the guest. Defaults to true. */
                                    enabled?: boolean;
                                    /** @description Enables a boot framebuffer, until the guest OS loads a real GPU driver Defaults to true. */
                                    ramFB?: {
                                        /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                        enabled?: boolean;
                                    };
                                };
                            };
                        }[];
                        /** @description Whether to attach a host device to the vmi. */
                        hostDevices?: {
                            /** @description DeviceName is the resource name of the host device exposed by a device plugin */
                            deviceName: string;
                            name: string;
                            /** @description If specified, the virtual network interface address and its tag will be provided to the guest via config drive */
                            tag?: string;
                        }[];
                        /** @description Inputs describe input devices */
                        inputs?: {
                            /** @description Bus indicates the bus of input device to emulate. Supported values: virtio, usb. */
                            bus?: string;
                            /** @description Name is the device name */
                            name: string;
                            /** @description Type indicated the type of input device. Supported values: tablet. */
                            type: string;
                        }[];
                        /** @description Interfaces describe network interfaces which are added to the vmi. */
                        interfaces?: {
                            /** @description If specified, the ACPI index is used to provide network interface device naming, that is stable across changes in PCI addresses assigned to the device. This value is required to be unique across all devices and be between 1 and (16*1024-1). */
                            acpiIndex?: number;
                            /** @description Binding specifies the binding plugin that will be used to connect the interface to the guest. It provides an alternative to InterfaceBindingMethod. version: 1alphav1 */
                            binding?: {
                                /** @description Name references to the binding name as denined in the kubevirt CR. version: 1alphav1 */
                                name: string;
                            };
                            /** @description BootOrder is an integer value > 0, used to determine ordering of boot devices. Lower values take precedence. Each interface or disk that has a boot order must have a unique value. Interfaces without a boot order are not tried. */
                            bootOrder?: number;
                            /** @description InterfaceBridge connects to a given network via a linux bridge. */
                            bridge?: Record<string, never>;
                            /** @description If specified the network interface will pass additional DHCP options to the VMI */
                            dhcpOptions?: {
                                /** @description If specified will pass option 67 to interface's DHCP server */
                                bootFileName?: string;
                                /** @description If specified will pass the configured NTP server to the VM via DHCP option 042. */
                                ntpServers?: string[];
                                /** @description If specified will pass extra DHCP options for private use, range: 224-254 */
                                privateOptions?: {
                                    /** @description Option is an Integer value from 224-254 Required. */
                                    option: number;
                                    /** @description Value is a String value for the Option provided Required. */
                                    value: string;
                                }[];
                                /** @description If specified will pass option 66 to interface's DHCP server */
                                tftpServerName?: string;
                            };
                            /** @description Interface MAC address. For example: de:ad:00:00:be:af or DE-AD-00-00-BE-AF. */
                            macAddress?: string;
                            /** @description InterfaceMacvtap connects to a given network by extending the Kubernetes node's L2 networks via a macvtap interface. */
                            macvtap?: Record<string, never>;
                            /** @description InterfaceMasquerade connects to a given network using netfilter rules to nat the traffic. */
                            masquerade?: Record<string, never>;
                            /** @description Interface model. One of: e1000, e1000e, ne2k_pci, pcnet, rtl8139, virtio. Defaults to virtio. TODO:(ihar) switch to enums once opengen-api supports them. See: https://github.com/kubernetes/kube-openapi/issues/51 */
                            model?: string;
                            /** @description Logical name of the interface as well as a reference to the associated networks. Must match the Name of a Network. */
                            name: string;
                            /** @description InterfacePasst connects to a given network. */
                            passt?: Record<string, never>;
                            /** @description If specified, the virtual network interface will be placed on the guests pci address with the specified PCI address. For example: 0000:81:01.10 */
                            pciAddress?: string;
                            /** @description List of ports to be forwarded to the virtual machine. */
                            ports?: {
                                /** @description If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services. */
                                name?: string;
                                /**
                                 * Format: int32
                                 * @description Number of port to expose for the virtual machine. This must be a valid port number, 0 < x < 65536.
                                 */
                                port: number;
                                /** @description Protocol for port. Must be UDP or TCP. Defaults to "TCP". */
                                protocol?: string;
                            }[];
                            /** @description InterfaceSlirp connects to a given network using QEMU user networking mode. */
                            slirp?: Record<string, never>;
                            /** @description InterfaceSRIOV connects to a given network by passing-through an SR-IOV PCI device via vfio. */
                            sriov?: Record<string, never>;
                            /** @description State represents the requested operational state of the interface. The (only) value supported is 'absent', expressing a request to remove the interface. */
                            state?: string;
                            /** @description If specified, the virtual network interface address and its tag will be provided to the guest via config drive */
                            tag?: string;
                        }[];
                        /** @description Whether to log the auto-attached default serial console or not. Serial console logs will be collect to a file and then streamed from a named 'guest-console-log'. Not relevant if autoattachSerialConsole is disabled. Defaults to cluster wide setting on VirtualMachineOptions. */
                        logSerialConsole?: boolean;
                        /** @description If specified, virtual network interfaces configured with a virtio bus will also enable the vhost multiqueue feature for network devices. The number of queues created depends on additional factors of the VirtualMachineInstance, like the number of guest CPUs. */
                        networkInterfaceMultiqueue?: boolean;
                        /** @description Whether to have random number generator from host */
                        rng?: Record<string, never>;
                        /** @description Whether to emulate a sound device. */
                        sound?: {
                            /** @description We only support ich9 or ac97. If SoundDevice is not set: No sound card is emulated. If SoundDevice is set but Model is not: ich9 */
                            model?: string;
                            /** @description User's defined name for this sound device */
                            name: string;
                        };
                        /** @description Whether to emulate a TPM device. */
                        tpm?: {
                            /** @description Persistent indicates the state of the TPM device should be kept accross reboots Defaults to false */
                            persistent?: boolean;
                        };
                        /** @description Fall back to legacy virtio 0.9 support if virtio bus is selected on devices. This is helpful for old machines like CentOS6 or RHEL6 which do not understand virtio_non_transitional (virtio 1.0). */
                        useVirtioTransitional?: boolean;
                        /** @description Watchdog describes a watchdog device which can be added to the vmi. */
                        watchdog?: {
                            /** @description i6300esb watchdog device. */
                            i6300esb?: {
                                /** @description The action to take. Valid values are poweroff, reset, shutdown. Defaults to reset. */
                                action?: string;
                            };
                            /** @description Name of the watchdog. */
                            name: string;
                        };
                    };
                    /** @description Features like acpi, apic, hyperv, smm. */
                    features?: {
                        /** @description ACPI enables/disables ACPI inside the guest. Defaults to enabled. */
                        acpi?: {
                            /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                            enabled?: boolean;
                        };
                        /** @description Defaults to the machine type setting. */
                        apic?: {
                            /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                            enabled?: boolean;
                            /** @description EndOfInterrupt enables the end of interrupt notification in the guest. Defaults to false. */
                            endOfInterrupt?: boolean;
                        };
                        /** @description Defaults to the machine type setting. */
                        hyperv?: {
                            /** @description EVMCS Speeds up L2 vmexits, but disables other virtualization features. Requires vapic. Defaults to the machine type setting. */
                            evmcs?: {
                                /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                enabled?: boolean;
                            };
                            /** @description Frequencies improves the TSC clock source handling for Hyper-V on KVM. Defaults to the machine type setting. */
                            frequencies?: {
                                /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                enabled?: boolean;
                            };
                            /** @description IPI improves performances in overcommited environments. Requires vpindex. Defaults to the machine type setting. */
                            ipi?: {
                                /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                enabled?: boolean;
                            };
                            /** @description Reenlightenment enables the notifications on TSC frequency changes. Defaults to the machine type setting. */
                            reenlightenment?: {
                                /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                enabled?: boolean;
                            };
                            /** @description Relaxed instructs the guest OS to disable watchdog timeouts. Defaults to the machine type setting. */
                            relaxed?: {
                                /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                enabled?: boolean;
                            };
                            /** @description Reset enables Hyperv reboot/reset for the vmi. Requires synic. Defaults to the machine type setting. */
                            reset?: {
                                /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                enabled?: boolean;
                            };
                            /** @description Runtime improves the time accounting to improve scheduling in the guest. Defaults to the machine type setting. */
                            runtime?: {
                                /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                enabled?: boolean;
                            };
                            /** @description Spinlocks allows to configure the spinlock retry attempts. */
                            spinlocks?: {
                                /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                enabled?: boolean;
                                /**
                                 * Format: int32
                                 * @description Retries indicates the number of retries. Must be a value greater or equal 4096. Defaults to 4096.
                                 */
                                spinlocks?: number;
                            };
                            /** @description SyNIC enables the Synthetic Interrupt Controller. Defaults to the machine type setting. */
                            synic?: {
                                /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                enabled?: boolean;
                            };
                            /** @description SyNICTimer enables Synthetic Interrupt Controller Timers, reducing CPU load. Defaults to the machine type setting. */
                            synictimer?: {
                                /** @description Represents if a feature is enabled or disabled. */
                                direct?: {
                                    /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                    enabled?: boolean;
                                };
                                enabled?: boolean;
                            };
                            /** @description TLBFlush improves performances in overcommited environments. Requires vpindex. Defaults to the machine type setting. */
                            tlbflush?: {
                                /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                enabled?: boolean;
                            };
                            /** @description VAPIC improves the paravirtualized handling of interrupts. Defaults to the machine type setting. */
                            vapic?: {
                                /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                enabled?: boolean;
                            };
                            /** @description VendorID allows setting the hypervisor vendor id. Defaults to the machine type setting. */
                            vendorid?: {
                                /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                enabled?: boolean;
                                /** @description VendorID sets the hypervisor vendor id, visible to the vmi. String up to twelve characters. */
                                vendorid?: string;
                            };
                            /** @description VPIndex enables the Virtual Processor Index to help windows identifying virtual processors. Defaults to the machine type setting. */
                            vpindex?: {
                                /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                enabled?: boolean;
                            };
                        };
                        /** @description Configure how KVM presence is exposed to the guest. */
                        kvm?: {
                            /** @description Hide the KVM hypervisor from standard MSR based discovery. Defaults to false */
                            hidden?: boolean;
                        };
                        /** @description Notify the guest that the host supports paravirtual spinlocks. For older kernels this feature should be explicitly disabled. */
                        pvspinlock?: {
                            /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                            enabled?: boolean;
                        };
                        /** @description SMM enables/disables System Management Mode. TSEG not yet implemented. */
                        smm?: {
                            /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                            enabled?: boolean;
                        };
                    };
                    /** @description Firmware. */
                    firmware?: {
                        /** @description Settings to control the bootloader that is used. */
                        bootloader?: {
                            /** @description If set (default), BIOS will be used. */
                            bios?: {
                                /** @description If set, the BIOS output will be transmitted over serial */
                                useSerial?: boolean;
                            };
                            /** @description If set, EFI will be used instead of BIOS. */
                            efi?: {
                                /** @description If set to true, Persistent will persist the EFI NVRAM across reboots. Defaults to false */
                                persistent?: boolean;
                                /** @description If set, SecureBoot will be enabled and the OVMF roms will be swapped for SecureBoot-enabled ones. Requires SMM to be enabled. Defaults to true */
                                secureBoot?: boolean;
                            };
                        };
                        /** @description Settings to set the kernel for booting. */
                        kernelBoot?: {
                            /** @description Container defines the container that containes kernel artifacts */
                            container?: {
                                /** @description Image that contains initrd / kernel files. */
                                image: string;
                                /** @description Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images */
                                imagePullPolicy?: string;
                                /** @description ImagePullSecret is the name of the Docker registry secret required to pull the image. The secret must already exist. */
                                imagePullSecret?: string;
                                /** @description the fully-qualified path to the ramdisk image in the host OS */
                                initrdPath?: string;
                                /** @description The fully-qualified path to the kernel image in the host OS */
                                kernelPath?: string;
                            };
                            /** @description Arguments to be passed to the kernel at boot time */
                            kernelArgs?: string;
                        };
                        /** @description The system-serial-number in SMBIOS */
                        serial?: string;
                        /** @description UUID reported by the vmi bios. Defaults to a random generated uid. */
                        uuid?: string;
                    };
                    /** @description Controls whether or not disks will share IOThreads. Omitting IOThreadsPolicy disables use of IOThreads. One of: shared, auto */
                    ioThreadsPolicy?: string;
                    /** @description Launch Security setting of the vmi. */
                    launchSecurity?: {
                        /** @description AMD Secure Encrypted Virtualization (SEV). */
                        sev?: {
                            /** @description If specified, run the attestation process for a vmi. */
                            attestation?: Record<string, never>;
                            /** @description Base64 encoded guest owner's Diffie-Hellman key. */
                            dhCert?: string;
                            /** @description Guest policy flags as defined in AMD SEV API specification. Note: due to security reasons it is not allowed to enable guest debugging. Therefore NoDebug flag is not exposed to users and is always true. */
                            policy?: {
                                /** @description SEV-ES is required. Defaults to false. */
                                encryptedState?: boolean;
                            };
                            /** @description Base64 encoded session blob. */
                            session?: string;
                        };
                    };
                    /** @description Machine type. */
                    machine?: {
                        /** @description QEMU machine type is the actual chipset of the VirtualMachineInstance. */
                        type?: string;
                    };
                    /** @description Memory allow specifying the VMI memory features. */
                    memory?: {
                        /** @description Guest allows to specifying the amount of memory which is visible inside the Guest OS. The Guest must lie between Requests and Limits from the resources section. Defaults to the requested memory in the resources section if not specified. */
                        guest?: number | string;
                        /** @description Hugepages allow to use hugepages for the VirtualMachineInstance instead of regular memory. */
                        hugepages?: {
                            /** @description PageSize specifies the hugepage size, for x86_64 architecture valid values are 1Gi and 2Mi. */
                            pageSize?: string;
                        };
                        /** @description MaxGuest allows to specify the maximum amount of memory which is visible inside the Guest OS. The delta between MaxGuest and Guest is the amount of memory that can be hot(un)plugged. */
                        maxGuest?: number | string;
                    };
                    /** @description Resources describes the Compute Resources required by this vmi. */
                    resources?: {
                        /** @description Limits describes the maximum amount of compute resources allowed. Valid resource keys are "memory" and "cpu". */
                        limits?: {
                            [key: string]: number | string;
                        };
                        /** @description Don't ask the scheduler to take the guest-management overhead into account. Instead put the overhead only into the container's memory limit. This can lead to crashes if all memory is in use on a node. Defaults to false. */
                        overcommitGuestOverhead?: boolean;
                        /** @description Requests is a description of the initial vmi resources. Valid resource keys are "memory" and "cpu". */
                        requests?: {
                            [key: string]: number | string;
                        };
                    };
                };
                /** @description EvictionStrategy can be set to "LiveMigrate" if the VirtualMachineInstance should be migrated instead of shut-off in case of a node drain. */
                evictionStrategy?: string;
                /** @description Specifies the hostname of the vmi If not specified, the hostname will be set to the name of the vmi, if dhcp or cloud-init is configured properly. */
                hostname?: string;
                /** @description Periodic probe of VirtualMachineInstance liveness. VirtualmachineInstances will be stopped if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes */
                livenessProbe?: {
                    /** @description One and only one of the following should be specified. Exec specifies the action to take, it will be executed on the guest through the qemu-guest-agent. If the guest agent is not available, this probe will fail. */
                    exec?: {
                        /** @description Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy. */
                        command?: string[];
                    };
                    /**
                     * Format: int32
                     * @description Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
                     */
                    failureThreshold?: number;
                    /** @description GuestAgentPing contacts the qemu-guest-agent for availability checks. */
                    guestAgentPing?: Record<string, never>;
                    /** @description HTTPGet specifies the http request to perform. */
                    httpGet?: {
                        /** @description Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead. */
                        host?: string;
                        /** @description Custom headers to set in the request. HTTP allows repeated headers. */
                        httpHeaders?: {
                            /** @description The header field name */
                            name: string;
                            /** @description The header field value */
                            value: string;
                        }[];
                        /** @description Path to access on the HTTP server. */
                        path?: string;
                        /** @description Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. */
                        port: number | string;
                        /** @description Scheme to use for connecting to the host. Defaults to HTTP. */
                        scheme?: string;
                    };
                    /**
                     * Format: int32
                     * @description Number of seconds after the VirtualMachineInstance has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                     */
                    initialDelaySeconds?: number;
                    /**
                     * Format: int32
                     * @description How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
                     */
                    periodSeconds?: number;
                    /**
                     * Format: int32
                     * @description Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
                     */
                    successThreshold?: number;
                    /** @description TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook */
                    tcpSocket?: {
                        /** @description Optional: Host name to connect to, defaults to the pod IP. */
                        host?: string;
                        /** @description Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. */
                        port: number | string;
                    };
                    /**
                     * Format: int32
                     * @description Number of seconds after which the probe times out. For exec probes the timeout fails the probe but does not terminate the command running on the guest. This means a blocking command can result in an increasing load on the guest. A small buffer will be added to the resulting workload exec probe to compensate for delays caused by the qemu guest exec mechanism. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                     */
                    timeoutSeconds?: number;
                };
                /** @description List of networks that can be attached to a vm's virtual interface. */
                networks?: {
                    /** @description Represents the multus cni network. */
                    multus?: {
                        /** @description Select the default network and add it to the multus-cni.io/default-network annotation. */
                        default?: boolean;
                        /** @description References to a NetworkAttachmentDefinition CRD object. Format: <networkName>, <namespace>/<networkName>. If namespace is not specified, VMI namespace is assumed. */
                        networkName: string;
                    };
                    /** @description Network name. Must be a DNS_LABEL and unique within the vm. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names */
                    name: string;
                    /** @description Represents the stock pod network interface. */
                    pod?: {
                        /** @description IPv6 CIDR for the vm network. Defaults to fd10:0:2::/120 if not specified. */
                        vmIPv6NetworkCIDR?: string;
                        /** @description CIDR for vm network. Default 10.0.2.0/24 if not specified. */
                        vmNetworkCIDR?: string;
                    };
                }[];
                /** @description NodeSelector is a selector which must be true for the vmi to fit on a node. Selector which must match a node's labels for the vmi to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/ */
                nodeSelector?: {
                    [key: string]: string;
                };
                /** @description If specified, indicates the pod's priority. If not specified, the pod priority will be default or zero if there is no default. */
                priorityClassName?: string;
                /** @description Periodic probe of VirtualMachineInstance service readiness. VirtualmachineInstances will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes */
                readinessProbe?: {
                    /** @description One and only one of the following should be specified. Exec specifies the action to take, it will be executed on the guest through the qemu-guest-agent. If the guest agent is not available, this probe will fail. */
                    exec?: {
                        /** @description Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy. */
                        command?: string[];
                    };
                    /**
                     * Format: int32
                     * @description Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
                     */
                    failureThreshold?: number;
                    /** @description GuestAgentPing contacts the qemu-guest-agent for availability checks. */
                    guestAgentPing?: Record<string, never>;
                    /** @description HTTPGet specifies the http request to perform. */
                    httpGet?: {
                        /** @description Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead. */
                        host?: string;
                        /** @description Custom headers to set in the request. HTTP allows repeated headers. */
                        httpHeaders?: {
                            /** @description The header field name */
                            name: string;
                            /** @description The header field value */
                            value: string;
                        }[];
                        /** @description Path to access on the HTTP server. */
                        path?: string;
                        /** @description Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. */
                        port: number | string;
                        /** @description Scheme to use for connecting to the host. Defaults to HTTP. */
                        scheme?: string;
                    };
                    /**
                     * Format: int32
                     * @description Number of seconds after the VirtualMachineInstance has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                     */
                    initialDelaySeconds?: number;
                    /**
                     * Format: int32
                     * @description How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
                     */
                    periodSeconds?: number;
                    /**
                     * Format: int32
                     * @description Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
                     */
                    successThreshold?: number;
                    /** @description TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook */
                    tcpSocket?: {
                        /** @description Optional: Host name to connect to, defaults to the pod IP. */
                        host?: string;
                        /** @description Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. */
                        port: number | string;
                    };
                    /**
                     * Format: int32
                     * @description Number of seconds after which the probe times out. For exec probes the timeout fails the probe but does not terminate the command running on the guest. This means a blocking command can result in an increasing load on the guest. A small buffer will be added to the resulting workload exec probe to compensate for delays caused by the qemu guest exec mechanism. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                     */
                    timeoutSeconds?: number;
                };
                /** @description If specified, the VMI will be dispatched by specified scheduler. If not specified, the VMI will be dispatched by default scheduler. */
                schedulerName?: string;
                /** @description StartStrategy can be set to "Paused" if Virtual Machine should be started in paused state. */
                startStrategy?: string;
                /** @description If specified, the fully qualified vmi hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the vmi will not have a domainname at all. The DNS entry will resolve to the vmi, no matter if the vmi itself can pick up a hostname. */
                subdomain?: string;
                /**
                 * Format: int64
                 * @description Grace period observed after signalling a VirtualMachineInstance to stop after which the VirtualMachineInstance is force terminated.
                 */
                terminationGracePeriodSeconds?: number;
                /** @description If toleration is specified, obey all the toleration rules. */
                tolerations?: {
                    /** @description Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute. */
                    effect?: string;
                    /** @description Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys. */
                    key?: string;
                    /** @description Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category. */
                    operator?: string;
                    /**
                     * Format: int64
                     * @description TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
                     */
                    tolerationSeconds?: number;
                    /** @description Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string. */
                    value?: string;
                }[];
                /** @description TopologySpreadConstraints describes how a group of VMIs will be spread across a given topology domains. K8s scheduler will schedule VMI pods in a way which abides by the constraints. */
                topologySpreadConstraints?: {
                    /** @description LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain. */
                    labelSelector?: {
                        /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                        matchExpressions?: {
                            /** @description key is the label key that the selector applies to. */
                            key: string;
                            /** @description operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. */
                            operator: string;
                            /** @description values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. */
                            values?: string[];
                        }[];
                        /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed. */
                        matchLabels?: {
                            [key: string]: string;
                        };
                    };
                    /** @description MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector. */
                    matchLabelKeys?: string[];
                    /**
                     * Format: int32
                     * @description MaxSkew describes the degree to which pods may be unevenly distributed. When 'whenUnsatisfiable=DoNotSchedule', it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When 'whenUnsatisfiable=ScheduleAnyway', it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
                     */
                    maxSkew: number;
                    /**
                     * Format: int32
                     * @description MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
                     *      For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.
                     *      This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).
                     */
                    minDomains?: number;
                    /** @description NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
                     *      If this value is nil, the behavior is equivalent to the Honor policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag. */
                    nodeAffinityPolicy?: string;
                    /** @description NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.
                     *      If this value is nil, the behavior is equivalent to the Ignore policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag. */
                    nodeTaintsPolicy?: string;
                    /** @description TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It's a required field. */
                    topologyKey: string;
                    /** @description WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,   but giving higher precedence to topologies that would help reduce the   skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field. */
                    whenUnsatisfiable: string;
                }[];
                /** @description List of volumes that can be mounted by disks belonging to the vmi. */
                volumes?: {
                    /** @description CloudInitConfigDrive represents a cloud-init Config Drive user-data source. The Config Drive data will be added as a disk to the vmi. A proper cloud-init installation is required inside the guest. More info: https://cloudinit.readthedocs.io/en/latest/topics/datasources/configdrive.html */
                    cloudInitConfigDrive?: {
                        /** @description NetworkData contains config drive inline cloud-init networkdata. */
                        networkData?: string;
                        /** @description NetworkDataBase64 contains config drive cloud-init networkdata as a base64 encoded string. */
                        networkDataBase64?: string;
                        /** @description NetworkDataSecretRef references a k8s secret that contains config drive networkdata. */
                        networkDataSecretRef?: {
                            /** @description Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid? */
                            name?: string;
                        };
                        /** @description UserDataSecretRef references a k8s secret that contains config drive userdata. */
                        secretRef?: {
                            /** @description Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid? */
                            name?: string;
                        };
                        /** @description UserData contains config drive inline cloud-init userdata. */
                        userData?: string;
                        /** @description UserDataBase64 contains config drive cloud-init userdata as a base64 encoded string. */
                        userDataBase64?: string;
                    };
                    /** @description CloudInitNoCloud represents a cloud-init NoCloud user-data source. The NoCloud data will be added as a disk to the vmi. A proper cloud-init installation is required inside the guest. More info: http://cloudinit.readthedocs.io/en/latest/topics/datasources/nocloud.html */
                    cloudInitNoCloud?: {
                        /** @description NetworkData contains NoCloud inline cloud-init networkdata. */
                        networkData?: string;
                        /** @description NetworkDataBase64 contains NoCloud cloud-init networkdata as a base64 encoded string. */
                        networkDataBase64?: string;
                        /** @description NetworkDataSecretRef references a k8s secret that contains NoCloud networkdata. */
                        networkDataSecretRef?: {
                            /** @description Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid? */
                            name?: string;
                        };
                        /** @description UserDataSecretRef references a k8s secret that contains NoCloud userdata. */
                        secretRef?: {
                            /** @description Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid? */
                            name?: string;
                        };
                        /** @description UserData contains NoCloud inline cloud-init userdata. */
                        userData?: string;
                        /** @description UserDataBase64 contains NoCloud cloud-init userdata as a base64 encoded string. */
                        userDataBase64?: string;
                    };
                    /** @description ConfigMapSource represents a reference to a ConfigMap in the same namespace. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/ */
                    configMap?: {
                        /** @description Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid? */
                        name?: string;
                        /** @description Specify whether the ConfigMap or it's keys must be defined */
                        optional?: boolean;
                        /** @description The volume label of the resulting disk inside the VMI. Different bootstrapping mechanisms require different values. Typical values are "cidata" (cloud-init), "config-2" (cloud-init) or "OEMDRV" (kickstart). */
                        volumeLabel?: string;
                    };
                    /** @description ContainerDisk references a docker image, embedding a qcow or raw disk. More info: https://kubevirt.gitbooks.io/user-guide/registry-disk.html */
                    containerDisk?: {
                        /** @description Image is the name of the image with the embedded disk. */
                        image: string;
                        /** @description Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images */
                        imagePullPolicy?: string;
                        /** @description ImagePullSecret is the name of the Docker registry secret required to pull the image. The secret must already exist. */
                        imagePullSecret?: string;
                        /** @description Path defines the path to disk file in the container */
                        path?: string;
                    };
                    /** @description DataVolume represents the dynamic creation a PVC for this volume as well as the process of populating that PVC with a disk image. */
                    dataVolume?: {
                        /** @description Hotpluggable indicates whether the volume can be hotplugged and hotunplugged. */
                        hotpluggable?: boolean;
                        /** @description Name of both the DataVolume and the PVC in the same namespace. After PVC population the DataVolume is garbage collected by default. */
                        name: string;
                    };
                    /** @description DownwardAPI represents downward API about the pod that should populate this volume */
                    downwardAPI?: {
                        /** @description Fields is a list of downward API volume file */
                        fields?: {
                            /** @description Required: Selects a field of the pod: only annotations, labels, name and namespace are supported. */
                            fieldRef?: {
                                /** @description Version of the schema the FieldPath is written in terms of, defaults to "v1". */
                                apiVersion?: string;
                                /** @description Path of the field to select in the specified API version. */
                                fieldPath: string;
                            };
                            /**
                             * Format: int32
                             * @description Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
                             */
                            mode?: number;
                            /** @description Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..' */
                            path: string;
                            /** @description Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported. */
                            resourceFieldRef?: {
                                /** @description Container name: required for volumes, optional for env vars */
                                containerName?: string;
                                /** @description Specifies the output format of the exposed resources, defaults to "1" */
                                divisor?: number | string;
                                /** @description Required: resource to select */
                                resource: string;
                            };
                        }[];
                        /** @description The volume label of the resulting disk inside the VMI. Different bootstrapping mechanisms require different values. Typical values are "cidata" (cloud-init), "config-2" (cloud-init) or "OEMDRV" (kickstart). */
                        volumeLabel?: string;
                    };
                    /** @description DownwardMetrics adds a very small disk to VMIs which contains a limited view of host and guest metrics. The disk content is compatible with vhostmd (https://github.com/vhostmd/vhostmd) and vm-dump-metrics. */
                    downwardMetrics?: Record<string, never>;
                    /** @description EmptyDisk represents a temporary disk which shares the vmis lifecycle. More info: https://kubevirt.gitbooks.io/user-guide/disks-and-volumes.html */
                    emptyDisk?: {
                        /** @description Capacity of the sparse disk. */
                        capacity: number | string;
                    };
                    /** @description Ephemeral is a special volume source that "wraps" specified source and provides copy-on-write image on top of it. */
                    ephemeral?: {
                        /** @description PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. Directly attached to the vmi via qemu. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims */
                        persistentVolumeClaim?: {
                            /** @description claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims */
                            claimName: string;
                            /** @description readOnly Will force the ReadOnly setting in VolumeMounts. Default false. */
                            readOnly?: boolean;
                        };
                    };
                    /** @description HostDisk represents a disk created on the cluster level */
                    hostDisk?: {
                        /** @description Capacity of the sparse disk */
                        capacity?: number | string;
                        /** @description The path to HostDisk image located on the cluster */
                        path: string;
                        /** @description Shared indicate whether the path is shared between nodes */
                        shared?: boolean;
                        /** @description Contains information if disk.img exists or should be created allowed options are 'Disk' and 'DiskOrCreate' */
                        type: string;
                    };
                    /** @description MemoryDump is attached to the virt launcher and is populated with a memory dump of the vmi */
                    memoryDump?: {
                        /** @description claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims */
                        claimName: string;
                        /** @description Hotpluggable indicates whether the volume can be hotplugged and hotunplugged. */
                        hotpluggable?: boolean;
                        /** @description readOnly Will force the ReadOnly setting in VolumeMounts. Default false. */
                        readOnly?: boolean;
                    };
                    /** @description Volume's name. Must be a DNS_LABEL and unique within the vmi. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names */
                    name: string;
                    /** @description PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. Directly attached to the vmi via qemu. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims */
                    persistentVolumeClaim?: {
                        /** @description claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims */
                        claimName: string;
                        /** @description Hotpluggable indicates whether the volume can be hotplugged and hotunplugged. */
                        hotpluggable?: boolean;
                        /** @description readOnly Will force the ReadOnly setting in VolumeMounts. Default false. */
                        readOnly?: boolean;
                    };
                    /** @description SecretVolumeSource represents a reference to a secret data in the same namespace. More info: https://kubernetes.io/docs/concepts/configuration/secret/ */
                    secret?: {
                        /** @description Specify whether the Secret or it's keys must be defined */
                        optional?: boolean;
                        /** @description Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret */
                        secretName?: string;
                        /** @description The volume label of the resulting disk inside the VMI. Different bootstrapping mechanisms require different values. Typical values are "cidata" (cloud-init), "config-2" (cloud-init) or "OEMDRV" (kickstart). */
                        volumeLabel?: string;
                    };
                    /** @description ServiceAccountVolumeSource represents a reference to a service account. There can only be one volume of this type! More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/ */
                    serviceAccount?: {
                        /** @description Name of the service account in the pod's namespace to use. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/ */
                        serviceAccountName?: string;
                    };
                    /** @description Represents a Sysprep volume source. */
                    sysprep?: {
                        /** @description ConfigMap references a ConfigMap that contains Sysprep answer file named autounattend.xml that should be attached as disk of CDROM type. */
                        configMap?: {
                            /** @description Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid? */
                            name?: string;
                        };
                        /** @description Secret references a k8s Secret that contains Sysprep answer file named autounattend.xml that should be attached as disk of CDROM type. */
                        secret?: {
                            /** @description Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid? */
                            name?: string;
                        };
                    };
                }[];
            };
            /** @description Status is the high level overview of how the VirtualMachineInstance is doing. It contains information available to controllers and users. */
            status?: {
                /**
                 * Format: int32
                 * @description VSOCKCID is used to track the allocated VSOCK CID in the VM.
                 */
                VSOCKCID?: number;
                /** @description ActivePods is a mapping of pod UID to node name. It is possible for multiple pods to be running for a single VMI during migration. */
                activePods?: {
                    [key: string]: string;
                };
                /** @description Conditions are specific points in VirtualMachineInstance's pod runtime. */
                conditions?: {
                    /** Format: date-time */
                    lastProbeTime?: string | null;
                    /** Format: date-time */
                    lastTransitionTime?: string | null;
                    message?: string;
                    reason?: string;
                    status: string;
                    type: string;
                }[];
                /** @description CurrentCPUTopology specifies the current CPU topology used by the VM workload. Current topology may differ from the desired topology in the spec while CPU hotplug takes place. */
                currentCPUTopology?: {
                    /**
                     * Format: int32
                     * @description Cores specifies the number of cores inside the vmi. Must be a value greater or equal 1.
                     */
                    cores?: number;
                    /**
                     * Format: int32
                     * @description Sockets specifies the number of sockets inside the vmi. Must be a value greater or equal 1.
                     */
                    sockets?: number;
                    /**
                     * Format: int32
                     * @description Threads specifies the number of threads inside the vmi. Must be a value greater or equal 1.
                     */
                    threads?: number;
                };
                /** @description EvacuationNodeName is used to track the eviction process of a VMI. It stores the name of the node that we want to evacuate. It is meant to be used by KubeVirt core components only and can't be set or modified by users. */
                evacuationNodeName?: string;
                /** @description FSFreezeStatus is the state of the fs of the guest it can be either frozen or thawed */
                fsFreezeStatus?: string;
                /** @description Guest OS Information */
                guestOSInfo?: {
                    /** @description Guest OS Id */
                    id?: string;
                    /** @description Guest OS Kernel Release */
                    kernelRelease?: string;
                    /** @description Kernel version of the Guest OS */
                    kernelVersion?: string;
                    /** @description Machine type of the Guest OS */
                    machine?: string;
                    /** @description Name of the Guest OS */
                    name?: string;
                    /** @description Guest OS Pretty Name */
                    prettyName?: string;
                    /** @description Guest OS Version */
                    version?: string;
                    /** @description Version ID of the Guest OS */
                    versionId?: string;
                };
                /** @description Interfaces represent the details of available network interfaces. */
                interfaces?: {
                    /** @description Specifies the origin of the interface data collected. values: domain, guest-agent, multus-status. */
                    infoSource?: string;
                    /** @description The interface name inside the Virtual Machine */
                    interfaceName?: string;
                    /** @description IP address of a Virtual Machine interface. It is always the first item of IPs */
                    ipAddress?: string;
                    /** @description List of all IP addresses of a Virtual Machine interface */
                    ipAddresses?: string[];
                    /** @description Hardware address of a Virtual Machine interface */
                    mac?: string;
                    /** @description Name of the interface, corresponds to name of the network assigned to the interface */
                    name?: string;
                    /**
                     * Format: int32
                     * @description Specifies how many queues are allocated by MultiQueue
                     */
                    queueCount?: number;
                }[];
                /** @description KernelBootStatus contains info about the kernelBootContainer */
                kernelBootStatus?: {
                    /** @description InitrdInfo show info about the initrd file */
                    initrdInfo?: {
                        /**
                         * Format: int32
                         * @description Checksum is the checksum of the initrd file
                         */
                        checksum?: number;
                    };
                    /** @description KernelInfo show info about the kernel image */
                    kernelInfo?: {
                        /**
                         * Format: int32
                         * @description Checksum is the checksum of the kernel image
                         */
                        checksum?: number;
                    };
                };
                /** @description LauncherContainerImageVersion indicates what container image is currently active for the vmi. */
                launcherContainerImageVersion?: string;
                /** @description Machine shows the final resulting qemu machine type. This can be different than the machine type selected in the spec, due to qemus machine type alias mechanism. */
                machine?: {
                    /** @description QEMU machine type is the actual chipset of the VirtualMachineInstance. */
                    type?: string;
                };
                /** @description Memory shows various informations about the VirtualMachine memory. */
                memory?: {
                    /** @description GuestAtBoot specifies with how much memory the VirtualMachine intiallly booted with. */
                    guestAtBoot?: number | string;
                    /** @description GuestCurrent specifies how much memory is currently available for the VirtualMachine. */
                    guestCurrent?: number | string;
                    /** @description GuestRequested specifies how much memory was requested (hotplug) for the VirtualMachine. */
                    guestRequested?: number | string;
                };
                /** @description Represents the method using which the vmi can be migrated: live migration or block migration */
                migrationMethod?: string;
                /** @description Represents the status of a live migration */
                migrationState?: {
                    /** @description Indicates that the migration has been requested to abort */
                    abortRequested?: boolean;
                    /** @description Indicates the final status of the live migration abortion */
                    abortStatus?: string;
                    /** @description Indicates the migration completed */
                    completed?: boolean;
                    /**
                     * Format: date-time
                     * @description The time the migration action ended
                     */
                    endTimestamp?: string | null;
                    /** @description Indicates that the migration failed */
                    failed?: boolean;
                    /** @description Migration configurations to apply */
                    migrationConfiguration?: {
                        /** @description AllowAutoConverge allows the platform to compromise performance/availability of VMIs to guarantee successful VMI live migrations. Defaults to false */
                        allowAutoConverge?: boolean;
                        /** @description AllowPostCopy enables post-copy live migrations. Such migrations allow even the busiest VMIs to successfully live-migrate. However, events like a network failure can cause a VMI crash. If set to true, migrations will still start in pre-copy, but switch to post-copy when CompletionTimeoutPerGiB triggers. Defaults to false */
                        allowPostCopy?: boolean;
                        /** @description BandwidthPerMigration limits the amount of network bandwidth live migrations are allowed to use. The value is in quantity per second. Defaults to 0 (no limit) */
                        bandwidthPerMigration?: number | string;
                        /**
                         * Format: int64
                         * @description CompletionTimeoutPerGiB is the maximum number of seconds per GiB a migration is allowed to take. If a live-migration takes longer to migrate than this value multiplied by the size of the VMI, the migration will be cancelled, unless AllowPostCopy is true. Defaults to 800
                         */
                        completionTimeoutPerGiB?: number;
                        /** @description When set to true, DisableTLS will disable the additional layer of live migration encryption provided by KubeVirt. This is usually a bad idea. Defaults to false */
                        disableTLS?: boolean;
                        /** @description By default, the SELinux level of target virt-launcher pods is forced to the level of the source virt-launcher. When set to true, MatchSELinuxLevelOnMigration lets the CRI auto-assign a random level to the target. That will ensure the target virt-launcher doesn't share categories with another pod on the node. However, migrations will fail when using RWX volumes that don't automatically deal with SELinux levels. */
                        matchSELinuxLevelOnMigration?: boolean;
                        /** @description Network is the name of the CNI network to use for live migrations. By default, migrations go through the pod network. */
                        network?: string;
                        /** @description NodeDrainTaintKey defines the taint key that indicates a node should be drained. Note: this option relies on the deprecated node taint feature. Default: kubevirt.io/drain */
                        nodeDrainTaintKey?: string;
                        /**
                         * Format: int32
                         * @description ParallelMigrationsPerCluster is the total number of concurrent live migrations allowed cluster-wide. Defaults to 5
                         */
                        parallelMigrationsPerCluster?: number;
                        /**
                         * Format: int32
                         * @description ParallelOutboundMigrationsPerNode is the maximum number of concurrent outgoing live migrations allowed per node. Defaults to 2
                         */
                        parallelOutboundMigrationsPerNode?: number;
                        /**
                         * Format: int64
                         * @description ProgressTimeout is the maximum number of seconds a live migration is allowed to make no progress. Hitting this timeout means a migration transferred 0 data for that many seconds. The migration is then considered stuck and therefore cancelled. Defaults to 150
                         */
                        progressTimeout?: number;
                        /** @description UnsafeMigrationOverride allows live migrations to occur even if the compatibility check indicates the migration will be unsafe to the guest. Defaults to false */
                        unsafeMigrationOverride?: boolean;
                    };
                    /** @description Name of the migration policy. If string is empty, no policy is matched */
                    migrationPolicyName?: string;
                    /** @description The VirtualMachineInstanceMigration object associated with this migration */
                    migrationUid?: string;
                    /** @description Lets us know if the vmi is currently running pre or post copy migration */
                    mode?: string;
                    /** @description The source node that the VMI originated on */
                    sourceNode?: string;
                    /**
                     * Format: date-time
                     * @description The time the migration action began
                     */
                    startTimestamp?: string | null;
                    /** @description The UID of the target attachment pod for hotplug volumes */
                    targetAttachmentPodUID?: string;
                    /** @description If the VMI requires dedicated CPUs, this field will hold the dedicated CPU set on the target node */
                    targetCPUSet?: number[];
                    /** @description The list of ports opened for live migration on the destination node */
                    targetDirectMigrationNodePorts?: {
                        [key: string]: number;
                    };
                    /** @description The target node that the VMI is moving to */
                    targetNode?: string;
                    /** @description The address of the target node to use for the migration */
                    targetNodeAddress?: string;
                    /** @description The Target Node has seen the Domain Start Event */
                    targetNodeDomainDetected?: boolean;
                    /**
                     * Format: date-time
                     * @description The timestamp at which the target node detects the domain is active
                     */
                    targetNodeDomainReadyTimestamp?: string;
                    /** @description If the VMI requires dedicated CPUs, this field will hold the numa topology on the target node */
                    targetNodeTopology?: string;
                    /** @description The target pod that the VMI is moving to */
                    targetPod?: string;
                };
                /** @description This represents the migration transport */
                migrationTransport?: string;
                /** @description NodeName is the name where the VirtualMachineInstance is currently running. */
                nodeName?: string;
                /** @description Phase is the status of the VirtualMachineInstance in kubernetes world. It is not the VirtualMachineInstance status, but partially correlates to it. */
                phase?: string;
                /** @description PhaseTransitionTimestamp is the timestamp of when the last phase change occurred */
                phaseTransitionTimestamps?: {
                    /** @description Phase is the status of the VirtualMachineInstance in kubernetes world. It is not the VirtualMachineInstance status, but partially correlates to it. */
                    phase?: string;
                    /**
                     * Format: date-time
                     * @description PhaseTransitionTimestamp is the timestamp of when the phase change occurred
                     */
                    phaseTransitionTimestamp?: string;
                }[];
                /** @description The Quality of Service (QOS) classification assigned to the virtual machine instance based on resource requirements See PodQOSClass type for available QOS classes More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md */
                qosClass?: string;
                /** @description A brief CamelCase message indicating details about why the VMI is in this state. e.g. 'NodeUnresponsive' */
                reason?: string;
                /**
                 * Format: int64
                 * @description RuntimeUser is used to determine what user will be used in launcher
                 */
                runtimeUser?: number;
                /** @description SELinuxContext is the actual SELinux context of the virt-launcher pod */
                selinuxContext?: string;
                topologyHints?: {
                    /** Format: int64 */
                    tscFrequency?: number;
                };
                /** @description VirtualMachineRevisionName is used to get the vm revision of the vmi when doing an online vm snapshot */
                virtualMachineRevisionName?: string;
                /** @description VolumeStatus contains the statuses of all the volumes */
                volumeStatus?: {
                    /** @description ContainerDiskVolume shows info about the containerdisk, if the volume is a containerdisk */
                    containerDiskVolume?: {
                        /**
                         * Format: int32
                         * @description Checksum is the checksum of the rootdisk or kernel artifacts inside the containerdisk
                         */
                        checksum?: number;
                    };
                    /** @description If the volume is hotplug, this will contain the hotplug status. */
                    hotplugVolume?: {
                        /** @description AttachPodName is the name of the pod used to attach the volume to the node. */
                        attachPodName?: string;
                        /** @description AttachPodUID is the UID of the pod used to attach the volume to the node. */
                        attachPodUID?: string;
                    };
                    /** @description If the volume is memorydump volume, this will contain the memorydump info. */
                    memoryDumpVolume?: {
                        /** @description ClaimName is the name of the pvc the memory was dumped to */
                        claimName?: string;
                        /**
                         * Format: date-time
                         * @description EndTimestamp is the time when the memory dump completed
                         */
                        endTimestamp?: string;
                        /**
                         * Format: date-time
                         * @description StartTimestamp is the time when the memory dump started
                         */
                        startTimestamp?: string;
                        /** @description TargetFileName is the name of the memory dump output */
                        targetFileName?: string;
                    };
                    /** @description Message is a detailed message about the current hotplug volume phase */
                    message?: string;
                    /** @description Name is the name of the volume */
                    name: string;
                    /** @description PersistentVolumeClaimInfo is information about the PVC that handler requires during start flow */
                    persistentVolumeClaimInfo?: {
                        /** @description AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1 */
                        accessModes?: string[];
                        /** @description Capacity represents the capacity set on the corresponding PVC status */
                        capacity?: {
                            [key: string]: number | string;
                        };
                        /** @description Percentage of filesystem's size to be reserved when resizing the PVC */
                        filesystemOverhead?: string;
                        /** @description Preallocated indicates if the PVC's storage is preallocated or not */
                        preallocated?: boolean;
                        /** @description Requests represents the resources requested by the corresponding PVC spec */
                        requests?: {
                            [key: string]: number | string;
                        };
                        /** @description VolumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. */
                        volumeMode?: string;
                    };
                    /** @description Phase is the phase */
                    phase?: string;
                    /** @description Reason is a brief description of why we are in the current hotplug volume phase */
                    reason?: string;
                    /**
                     * Format: int64
                     * @description Represents the size of the volume
                     */
                    size?: number;
                    /** @description Target is the target name used when adding the volume to the VM, eg: vda */
                    target: string;
                }[];
            };
        };
        /** @description VirtualMachineInstance is *the* VirtualMachineInstance Definition. It represents a virtual machine in the runtime environment of kubernetes. */
        v1alpha3VirtualMachineInstance: {
            /** @description APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources */
            apiVersion?: string;
            /** @description Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds */
            kind?: string;
            metadata?: Record<string, any>;
            /** @description VirtualMachineInstance Spec contains the VirtualMachineInstance specification. */
            spec: {
                /** @description Specifies a set of public keys to inject into the vm guest */
                accessCredentials?: {
                    /** @description SSHPublicKey represents the source and method of applying a ssh public key into a guest virtual machine. */
                    sshPublicKey?: {
                        /** @description PropagationMethod represents how the public key is injected into the vm guest. */
                        propagationMethod: {
                            /** @description ConfigDrivePropagation means that the ssh public keys are injected into the VM using metadata using the configDrive cloud-init provider */
                            configDrive?: Record<string, never>;
                            /** @description NoCloudPropagation means that the ssh public keys are injected into the VM using metadata using the noCloud cloud-init provider */
                            noCloud?: Record<string, never>;
                            /** @description QemuGuestAgentAccessCredentailPropagation means ssh public keys are dynamically injected into the vm at runtime via the qemu guest agent. This feature requires the qemu guest agent to be running within the guest. */
                            qemuGuestAgent?: {
                                /** @description Users represents a list of guest users that should have the ssh public keys added to their authorized_keys file. */
                                users: string[];
                            };
                        };
                        /** @description Source represents where the public keys are pulled from */
                        source: {
                            /** @description Secret means that the access credential is pulled from a kubernetes secret */
                            secret?: {
                                /** @description SecretName represents the name of the secret in the VMI's namespace */
                                secretName: string;
                            };
                        };
                    };
                    /** @description UserPassword represents the source and method for applying a guest user's password */
                    userPassword?: {
                        /** @description propagationMethod represents how the user passwords are injected into the vm guest. */
                        propagationMethod: {
                            /** @description QemuGuestAgentAccessCredentailPropagation means passwords are dynamically injected into the vm at runtime via the qemu guest agent. This feature requires the qemu guest agent to be running within the guest. */
                            qemuGuestAgent?: Record<string, never>;
                        };
                        /** @description Source represents where the user passwords are pulled from */
                        source: {
                            /** @description Secret means that the access credential is pulled from a kubernetes secret */
                            secret?: {
                                /** @description SecretName represents the name of the secret in the VMI's namespace */
                                secretName: string;
                            };
                        };
                    };
                }[];
                /** @description If affinity is specifies, obey all the affinity rules */
                affinity?: {
                    /** @description Describes node affinity scheduling rules for the pod. */
                    nodeAffinity?: {
                        /** @description The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred. */
                        preferredDuringSchedulingIgnoredDuringExecution?: {
                            /** @description A node selector term, associated with the corresponding weight. */
                            preference: {
                                /** @description A list of node selector requirements by node's labels. */
                                matchExpressions?: {
                                    /** @description The label key that the selector applies to. */
                                    key: string;
                                    /** @description Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt. */
                                    operator: string;
                                    /** @description An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch. */
                                    values?: string[];
                                }[];
                                /** @description A list of node selector requirements by node's fields. */
                                matchFields?: {
                                    /** @description The label key that the selector applies to. */
                                    key: string;
                                    /** @description Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt. */
                                    operator: string;
                                    /** @description An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch. */
                                    values?: string[];
                                }[];
                            };
                            /**
                             * Format: int32
                             * @description Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
                             */
                            weight: number;
                        }[];
                        /** @description If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node. */
                        requiredDuringSchedulingIgnoredDuringExecution?: {
                            /** @description Required. A list of node selector terms. The terms are ORed. */
                            nodeSelectorTerms: {
                                /** @description A list of node selector requirements by node's labels. */
                                matchExpressions?: {
                                    /** @description The label key that the selector applies to. */
                                    key: string;
                                    /** @description Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt. */
                                    operator: string;
                                    /** @description An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch. */
                                    values?: string[];
                                }[];
                                /** @description A list of node selector requirements by node's fields. */
                                matchFields?: {
                                    /** @description The label key that the selector applies to. */
                                    key: string;
                                    /** @description Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt. */
                                    operator: string;
                                    /** @description An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch. */
                                    values?: string[];
                                }[];
                            }[];
                        };
                    };
                    /** @description Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)). */
                    podAffinity?: {
                        /** @description The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred. */
                        preferredDuringSchedulingIgnoredDuringExecution?: {
                            /** @description Required. A pod affinity term, associated with the corresponding weight. */
                            podAffinityTerm: {
                                /** @description A label query over a set of resources, in this case pods. */
                                labelSelector?: {
                                    /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                                    matchExpressions?: {
                                        /** @description key is the label key that the selector applies to. */
                                        key: string;
                                        /** @description operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. */
                                        operator: string;
                                        /** @description values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. */
                                        values?: string[];
                                    }[];
                                    /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed. */
                                    matchLabels?: {
                                        [key: string]: string;
                                    };
                                };
                                /** @description A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. */
                                namespaceSelector?: {
                                    /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                                    matchExpressions?: {
                                        /** @description key is the label key that the selector applies to. */
                                        key: string;
                                        /** @description operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. */
                                        operator: string;
                                        /** @description values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. */
                                        values?: string[];
                                    }[];
                                    /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed. */
                                    matchLabels?: {
                                        [key: string]: string;
                                    };
                                };
                                /** @description namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace". */
                                namespaces?: string[];
                                /** @description This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed. */
                                topologyKey: string;
                            };
                            /**
                             * Format: int32
                             * @description weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
                             */
                            weight: number;
                        }[];
                        /** @description If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. */
                        requiredDuringSchedulingIgnoredDuringExecution?: {
                            /** @description A label query over a set of resources, in this case pods. */
                            labelSelector?: {
                                /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                                matchExpressions?: {
                                    /** @description key is the label key that the selector applies to. */
                                    key: string;
                                    /** @description operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. */
                                    operator: string;
                                    /** @description values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. */
                                    values?: string[];
                                }[];
                                /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed. */
                                matchLabels?: {
                                    [key: string]: string;
                                };
                            };
                            /** @description A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. */
                            namespaceSelector?: {
                                /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                                matchExpressions?: {
                                    /** @description key is the label key that the selector applies to. */
                                    key: string;
                                    /** @description operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. */
                                    operator: string;
                                    /** @description values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. */
                                    values?: string[];
                                }[];
                                /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed. */
                                matchLabels?: {
                                    [key: string]: string;
                                };
                            };
                            /** @description namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace". */
                            namespaces?: string[];
                            /** @description This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed. */
                            topologyKey: string;
                        }[];
                    };
                    /** @description Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)). */
                    podAntiAffinity?: {
                        /** @description The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred. */
                        preferredDuringSchedulingIgnoredDuringExecution?: {
                            /** @description Required. A pod affinity term, associated with the corresponding weight. */
                            podAffinityTerm: {
                                /** @description A label query over a set of resources, in this case pods. */
                                labelSelector?: {
                                    /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                                    matchExpressions?: {
                                        /** @description key is the label key that the selector applies to. */
                                        key: string;
                                        /** @description operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. */
                                        operator: string;
                                        /** @description values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. */
                                        values?: string[];
                                    }[];
                                    /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed. */
                                    matchLabels?: {
                                        [key: string]: string;
                                    };
                                };
                                /** @description A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. */
                                namespaceSelector?: {
                                    /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                                    matchExpressions?: {
                                        /** @description key is the label key that the selector applies to. */
                                        key: string;
                                        /** @description operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. */
                                        operator: string;
                                        /** @description values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. */
                                        values?: string[];
                                    }[];
                                    /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed. */
                                    matchLabels?: {
                                        [key: string]: string;
                                    };
                                };
                                /** @description namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace". */
                                namespaces?: string[];
                                /** @description This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed. */
                                topologyKey: string;
                            };
                            /**
                             * Format: int32
                             * @description weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
                             */
                            weight: number;
                        }[];
                        /** @description If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. */
                        requiredDuringSchedulingIgnoredDuringExecution?: {
                            /** @description A label query over a set of resources, in this case pods. */
                            labelSelector?: {
                                /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                                matchExpressions?: {
                                    /** @description key is the label key that the selector applies to. */
                                    key: string;
                                    /** @description operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. */
                                    operator: string;
                                    /** @description values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. */
                                    values?: string[];
                                }[];
                                /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed. */
                                matchLabels?: {
                                    [key: string]: string;
                                };
                            };
                            /** @description A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. */
                            namespaceSelector?: {
                                /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                                matchExpressions?: {
                                    /** @description key is the label key that the selector applies to. */
                                    key: string;
                                    /** @description operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. */
                                    operator: string;
                                    /** @description values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. */
                                    values?: string[];
                                }[];
                                /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed. */
                                matchLabels?: {
                                    [key: string]: string;
                                };
                            };
                            /** @description namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace". */
                            namespaces?: string[];
                            /** @description This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed. */
                            topologyKey: string;
                        }[];
                    };
                };
                /** @description Specifies the architecture of the vm guest you are attempting to run. Defaults to the compiled architecture of the KubeVirt components */
                architecture?: string;
                /** @description Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy. */
                dnsConfig?: {
                    /** @description A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed. */
                    nameservers?: string[];
                    /** @description A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy. */
                    options?: {
                        /** @description Required. */
                        name?: string;
                        value?: string;
                    }[];
                    /** @description A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed. */
                    searches?: string[];
                };
                /** @description Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'. */
                dnsPolicy?: string;
                /** @description Specification of the desired behavior of the VirtualMachineInstance on the host. */
                domain: {
                    /** @description Chassis specifies the chassis info passed to the domain. */
                    chassis?: {
                        asset?: string;
                        manufacturer?: string;
                        serial?: string;
                        sku?: string;
                        version?: string;
                    };
                    /** @description Clock sets the clock and timers of the vmi. */
                    clock?: {
                        /** @description Timer specifies whih timers are attached to the vmi. */
                        timer?: {
                            /** @description HPET (High Precision Event Timer) - multiple timers with periodic interrupts. */
                            hpet?: {
                                /** @description Enabled set to false makes sure that the machine type or a preset can't add the timer. Defaults to true. */
                                present?: boolean;
                                /** @description TickPolicy determines what happens when QEMU misses a deadline for injecting a tick to the guest. One of "delay", "catchup", "merge", "discard". */
                                tickPolicy?: string;
                            };
                            /** @description Hyperv (Hypervclock) - lets guests read the host’s wall clock time (paravirtualized). For windows guests. */
                            hyperv?: {
                                /** @description Enabled set to false makes sure that the machine type or a preset can't add the timer. Defaults to true. */
                                present?: boolean;
                            };
                            /** @description KVM 	(KVM clock) - lets guests read the host’s wall clock time (paravirtualized). For linux guests. */
                            kvm?: {
                                /** @description Enabled set to false makes sure that the machine type or a preset can't add the timer. Defaults to true. */
                                present?: boolean;
                            };
                            /** @description PIT (Programmable Interval Timer) - a timer with periodic interrupts. */
                            pit?: {
                                /** @description Enabled set to false makes sure that the machine type or a preset can't add the timer. Defaults to true. */
                                present?: boolean;
                                /** @description TickPolicy determines what happens when QEMU misses a deadline for injecting a tick to the guest. One of "delay", "catchup", "discard". */
                                tickPolicy?: string;
                            };
                            /** @description RTC (Real Time Clock) - a continuously running timer with periodic interrupts. */
                            rtc?: {
                                /** @description Enabled set to false makes sure that the machine type or a preset can't add the timer. Defaults to true. */
                                present?: boolean;
                                /** @description TickPolicy determines what happens when QEMU misses a deadline for injecting a tick to the guest. One of "delay", "catchup". */
                                tickPolicy?: string;
                                /** @description Track the guest or the wall clock. */
                                track?: string;
                            };
                        };
                        /** @description Timezone sets the guest clock to the specified timezone. Zone name follows the TZ environment variable format (e.g. 'America/New_York'). */
                        timezone?: string;
                        /** @description UTC sets the guest clock to UTC on each boot. If an offset is specified, guest changes to the clock will be kept during reboots and are not reset. */
                        utc?: {
                            /** @description OffsetSeconds specifies an offset in seconds, relative to UTC. If set, guest changes to the clock will be kept during reboots and not reset. */
                            offsetSeconds?: number;
                        };
                    };
                    /** @description CPU allow specified the detailed CPU topology inside the vmi. */
                    cpu?: {
                        /**
                         * Format: int32
                         * @description Cores specifies the number of cores inside the vmi. Must be a value greater or equal 1.
                         */
                        cores?: number;
                        /** @description DedicatedCPUPlacement requests the scheduler to place the VirtualMachineInstance on a node with enough dedicated pCPUs and pin the vCPUs to it. */
                        dedicatedCpuPlacement?: boolean;
                        /** @description Features specifies the CPU features list inside the VMI. */
                        features?: {
                            /** @description Name of the CPU feature */
                            name: string;
                            /** @description Policy is the CPU feature attribute which can have the following attributes: force    - The virtual CPU will claim the feature is supported regardless of it being supported by host CPU. require  - Guest creation will fail unless the feature is supported by the host CPU or the hypervisor is able to emulate it. optional - The feature will be supported by virtual CPU if and only if it is supported by host CPU. disable  - The feature will not be supported by virtual CPU. forbid   - Guest creation will fail if the feature is supported by host CPU. Defaults to require */
                            policy?: string;
                        }[];
                        /** @description IsolateEmulatorThread requests one more dedicated pCPU to be allocated for the VMI to place the emulator thread on it. */
                        isolateEmulatorThread?: boolean;
                        /**
                         * Format: int32
                         * @description MaxSockets specifies the maximum amount of sockets that can be hotplugged
                         */
                        maxSockets?: number;
                        /** @description Model specifies the CPU model inside the VMI. List of available models https://github.com/libvirt/libvirt/tree/master/src/cpu_map. It is possible to specify special cases like "host-passthrough" to get the same CPU as the node and "host-model" to get CPU closest to the node one. Defaults to host-model. */
                        model?: string;
                        /** @description NUMA allows specifying settings for the guest NUMA topology */
                        numa?: {
                            /** @description GuestMappingPassthrough will create an efficient guest topology based on host CPUs exclusively assigned to a pod. The created topology ensures that memory and CPUs on the virtual numa nodes never cross boundaries of host numa nodes. */
                            guestMappingPassthrough?: Record<string, never>;
                        };
                        /** @description Realtime instructs the virt-launcher to tune the VMI for lower latency, optional for real time workloads */
                        realtime?: {
                            /** @description Mask defines the vcpu mask expression that defines which vcpus are used for realtime. Format matches libvirt's expressions. Example: "0-3,^1","0,2,3","2-3" */
                            mask?: string;
                        };
                        /**
                         * Format: int32
                         * @description Sockets specifies the number of sockets inside the vmi. Must be a value greater or equal 1.
                         */
                        sockets?: number;
                        /**
                         * Format: int32
                         * @description Threads specifies the number of threads inside the vmi. Must be a value greater or equal 1.
                         */
                        threads?: number;
                    };
                    /** @description Devices allows adding disks, network interfaces, and others */
                    devices: {
                        /** @description Whether to attach the default graphics device or not. VNC will not be available if set to false. Defaults to true. */
                        autoattachGraphicsDevice?: boolean;
                        /** @description Whether to attach an Input Device. Defaults to false. */
                        autoattachInputDevice?: boolean;
                        /** @description Whether to attach the Memory balloon device with default period. Period can be adjusted in virt-config. Defaults to true. */
                        autoattachMemBalloon?: boolean;
                        /** @description Whether to attach a pod network interface. Defaults to true. */
                        autoattachPodInterface?: boolean;
                        /** @description Whether to attach the default virtio-serial console or not. Serial console access will not be available if set to false. Defaults to true. */
                        autoattachSerialConsole?: boolean;
                        /** @description Whether to attach the VSOCK CID to the VM or not. VSOCK access will be available if set to true. Defaults to false. */
                        autoattachVSOCK?: boolean;
                        /** @description Whether or not to enable virtio multi-queue for block devices. Defaults to false. */
                        blockMultiQueue?: boolean;
                        /** @description To configure and access client devices such as redirecting USB */
                        clientPassthrough?: Record<string, never>;
                        /** @description DisableHotplug disabled the ability to hotplug disks. */
                        disableHotplug?: boolean;
                        /** @description Disks describes disks, cdroms and luns which are connected to the vmi. */
                        disks?: {
                            /** @description If specified, the virtual disk will be presented with the given block sizes. */
                            blockSize?: {
                                /** @description CustomBlockSize represents the desired logical and physical block size for a VM disk. */
                                custom?: {
                                    logical: number;
                                    physical: number;
                                };
                                /** @description Represents if a feature is enabled or disabled. */
                                matchVolume?: {
                                    /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                    enabled?: boolean;
                                };
                            };
                            /** @description BootOrder is an integer value > 0, used to determine ordering of boot devices. Lower values take precedence. Each disk or interface that has a boot order must have a unique value. Disks without a boot order are not tried if a disk with a boot order exists. */
                            bootOrder?: number;
                            /** @description Cache specifies which kvm disk cache mode should be used. Supported values are: CacheNone, CacheWriteThrough. */
                            cache?: string;
                            /** @description Attach a volume as a cdrom to the vmi. */
                            cdrom?: {
                                /** @description Bus indicates the type of disk device to emulate. supported values: virtio, sata, scsi. */
                                bus?: string;
                                /** @description ReadOnly. Defaults to true. */
                                readonly?: boolean;
                                /** @description Tray indicates if the tray of the device is open or closed. Allowed values are "open" and "closed". Defaults to closed. */
                                tray?: string;
                            };
                            /** @description dedicatedIOThread indicates this disk should have an exclusive IO Thread. Enabling this implies useIOThreads = true. Defaults to false. */
                            dedicatedIOThread?: boolean;
                            /** @description Attach a volume as a disk to the vmi. */
                            disk?: {
                                /** @description Bus indicates the type of disk device to emulate. supported values: virtio, sata, scsi, usb. */
                                bus?: string;
                                /** @description If specified, the virtual disk will be placed on the guests pci address with the specified PCI address. For example: 0000:81:01.10 */
                                pciAddress?: string;
                                /** @description ReadOnly. Defaults to false. */
                                readonly?: boolean;
                            };
                            /** @description If specified, it can change the default error policy (stop) for the disk */
                            errorPolicy?: string;
                            /** @description IO specifies which QEMU disk IO mode should be used. Supported values are: native, default, threads. */
                            io?: string;
                            /** @description Attach a volume as a LUN to the vmi. */
                            lun?: {
                                /** @description Bus indicates the type of disk device to emulate. supported values: virtio, sata, scsi. */
                                bus?: string;
                                /** @description ReadOnly. Defaults to false. */
                                readonly?: boolean;
                                /** @description Reservation indicates if the disk needs to support the persistent reservation for the SCSI disk */
                                reservation?: boolean;
                            };
                            /** @description Name is the device name */
                            name: string;
                            /** @description Serial provides the ability to specify a serial number for the disk device. */
                            serial?: string;
                            /** @description If specified the disk is made sharable and multiple write from different VMs are permitted */
                            shareable?: boolean;
                            /** @description If specified, disk address and its tag will be provided to the guest via config drive metadata */
                            tag?: string;
                        }[];
                        /** @description DownwardMetrics creates a virtio serials for exposing the downward metrics to the vmi. */
                        downwardMetrics?: Record<string, never>;
                        /** @description Filesystems describes filesystem which is connected to the vmi. */
                        filesystems?: {
                            /** @description Name is the device name */
                            name: string;
                            /** @description Virtiofs is supported */
                            virtiofs: Record<string, never>;
                        }[];
                        /** @description Whether to attach a GPU device to the vmi. */
                        gpus?: {
                            deviceName: string;
                            /** @description Name of the GPU device as exposed by a device plugin */
                            name: string;
                            /** @description If specified, the virtual network interface address and its tag will be provided to the guest via config drive */
                            tag?: string;
                            virtualGPUOptions?: {
                                display?: {
                                    /** @description Enabled determines if a display addapter backed by a vGPU should be enabled or disabled on the guest. Defaults to true. */
                                    enabled?: boolean;
                                    /** @description Enables a boot framebuffer, until the guest OS loads a real GPU driver Defaults to true. */
                                    ramFB?: {
                                        /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                        enabled?: boolean;
                                    };
                                };
                            };
                        }[];
                        /** @description Whether to attach a host device to the vmi. */
                        hostDevices?: {
                            /** @description DeviceName is the resource name of the host device exposed by a device plugin */
                            deviceName: string;
                            name: string;
                            /** @description If specified, the virtual network interface address and its tag will be provided to the guest via config drive */
                            tag?: string;
                        }[];
                        /** @description Inputs describe input devices */
                        inputs?: {
                            /** @description Bus indicates the bus of input device to emulate. Supported values: virtio, usb. */
                            bus?: string;
                            /** @description Name is the device name */
                            name: string;
                            /** @description Type indicated the type of input device. Supported values: tablet. */
                            type: string;
                        }[];
                        /** @description Interfaces describe network interfaces which are added to the vmi. */
                        interfaces?: {
                            /** @description If specified, the ACPI index is used to provide network interface device naming, that is stable across changes in PCI addresses assigned to the device. This value is required to be unique across all devices and be between 1 and (16*1024-1). */
                            acpiIndex?: number;
                            /** @description Binding specifies the binding plugin that will be used to connect the interface to the guest. It provides an alternative to InterfaceBindingMethod. version: 1alphav1 */
                            binding?: {
                                /** @description Name references to the binding name as denined in the kubevirt CR. version: 1alphav1 */
                                name: string;
                            };
                            /** @description BootOrder is an integer value > 0, used to determine ordering of boot devices. Lower values take precedence. Each interface or disk that has a boot order must have a unique value. Interfaces without a boot order are not tried. */
                            bootOrder?: number;
                            /** @description InterfaceBridge connects to a given network via a linux bridge. */
                            bridge?: Record<string, never>;
                            /** @description If specified the network interface will pass additional DHCP options to the VMI */
                            dhcpOptions?: {
                                /** @description If specified will pass option 67 to interface's DHCP server */
                                bootFileName?: string;
                                /** @description If specified will pass the configured NTP server to the VM via DHCP option 042. */
                                ntpServers?: string[];
                                /** @description If specified will pass extra DHCP options for private use, range: 224-254 */
                                privateOptions?: {
                                    /** @description Option is an Integer value from 224-254 Required. */
                                    option: number;
                                    /** @description Value is a String value for the Option provided Required. */
                                    value: string;
                                }[];
                                /** @description If specified will pass option 66 to interface's DHCP server */
                                tftpServerName?: string;
                            };
                            /** @description Interface MAC address. For example: de:ad:00:00:be:af or DE-AD-00-00-BE-AF. */
                            macAddress?: string;
                            /** @description InterfaceMacvtap connects to a given network by extending the Kubernetes node's L2 networks via a macvtap interface. */
                            macvtap?: Record<string, never>;
                            /** @description InterfaceMasquerade connects to a given network using netfilter rules to nat the traffic. */
                            masquerade?: Record<string, never>;
                            /** @description Interface model. One of: e1000, e1000e, ne2k_pci, pcnet, rtl8139, virtio. Defaults to virtio. TODO:(ihar) switch to enums once opengen-api supports them. See: https://github.com/kubernetes/kube-openapi/issues/51 */
                            model?: string;
                            /** @description Logical name of the interface as well as a reference to the associated networks. Must match the Name of a Network. */
                            name: string;
                            /** @description InterfacePasst connects to a given network. */
                            passt?: Record<string, never>;
                            /** @description If specified, the virtual network interface will be placed on the guests pci address with the specified PCI address. For example: 0000:81:01.10 */
                            pciAddress?: string;
                            /** @description List of ports to be forwarded to the virtual machine. */
                            ports?: {
                                /** @description If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services. */
                                name?: string;
                                /**
                                 * Format: int32
                                 * @description Number of port to expose for the virtual machine. This must be a valid port number, 0 < x < 65536.
                                 */
                                port: number;
                                /** @description Protocol for port. Must be UDP or TCP. Defaults to "TCP". */
                                protocol?: string;
                            }[];
                            /** @description InterfaceSlirp connects to a given network using QEMU user networking mode. */
                            slirp?: Record<string, never>;
                            /** @description InterfaceSRIOV connects to a given network by passing-through an SR-IOV PCI device via vfio. */
                            sriov?: Record<string, never>;
                            /** @description State represents the requested operational state of the interface. The (only) value supported is 'absent', expressing a request to remove the interface. */
                            state?: string;
                            /** @description If specified, the virtual network interface address and its tag will be provided to the guest via config drive */
                            tag?: string;
                        }[];
                        /** @description Whether to log the auto-attached default serial console or not. Serial console logs will be collect to a file and then streamed from a named 'guest-console-log'. Not relevant if autoattachSerialConsole is disabled. Defaults to cluster wide setting on VirtualMachineOptions. */
                        logSerialConsole?: boolean;
                        /** @description If specified, virtual network interfaces configured with a virtio bus will also enable the vhost multiqueue feature for network devices. The number of queues created depends on additional factors of the VirtualMachineInstance, like the number of guest CPUs. */
                        networkInterfaceMultiqueue?: boolean;
                        /** @description Whether to have random number generator from host */
                        rng?: Record<string, never>;
                        /** @description Whether to emulate a sound device. */
                        sound?: {
                            /** @description We only support ich9 or ac97. If SoundDevice is not set: No sound card is emulated. If SoundDevice is set but Model is not: ich9 */
                            model?: string;
                            /** @description User's defined name for this sound device */
                            name: string;
                        };
                        /** @description Whether to emulate a TPM device. */
                        tpm?: {
                            /** @description Persistent indicates the state of the TPM device should be kept accross reboots Defaults to false */
                            persistent?: boolean;
                        };
                        /** @description Fall back to legacy virtio 0.9 support if virtio bus is selected on devices. This is helpful for old machines like CentOS6 or RHEL6 which do not understand virtio_non_transitional (virtio 1.0). */
                        useVirtioTransitional?: boolean;
                        /** @description Watchdog describes a watchdog device which can be added to the vmi. */
                        watchdog?: {
                            /** @description i6300esb watchdog device. */
                            i6300esb?: {
                                /** @description The action to take. Valid values are poweroff, reset, shutdown. Defaults to reset. */
                                action?: string;
                            };
                            /** @description Name of the watchdog. */
                            name: string;
                        };
                    };
                    /** @description Features like acpi, apic, hyperv, smm. */
                    features?: {
                        /** @description ACPI enables/disables ACPI inside the guest. Defaults to enabled. */
                        acpi?: {
                            /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                            enabled?: boolean;
                        };
                        /** @description Defaults to the machine type setting. */
                        apic?: {
                            /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                            enabled?: boolean;
                            /** @description EndOfInterrupt enables the end of interrupt notification in the guest. Defaults to false. */
                            endOfInterrupt?: boolean;
                        };
                        /** @description Defaults to the machine type setting. */
                        hyperv?: {
                            /** @description EVMCS Speeds up L2 vmexits, but disables other virtualization features. Requires vapic. Defaults to the machine type setting. */
                            evmcs?: {
                                /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                enabled?: boolean;
                            };
                            /** @description Frequencies improves the TSC clock source handling for Hyper-V on KVM. Defaults to the machine type setting. */
                            frequencies?: {
                                /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                enabled?: boolean;
                            };
                            /** @description IPI improves performances in overcommited environments. Requires vpindex. Defaults to the machine type setting. */
                            ipi?: {
                                /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                enabled?: boolean;
                            };
                            /** @description Reenlightenment enables the notifications on TSC frequency changes. Defaults to the machine type setting. */
                            reenlightenment?: {
                                /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                enabled?: boolean;
                            };
                            /** @description Relaxed instructs the guest OS to disable watchdog timeouts. Defaults to the machine type setting. */
                            relaxed?: {
                                /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                enabled?: boolean;
                            };
                            /** @description Reset enables Hyperv reboot/reset for the vmi. Requires synic. Defaults to the machine type setting. */
                            reset?: {
                                /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                enabled?: boolean;
                            };
                            /** @description Runtime improves the time accounting to improve scheduling in the guest. Defaults to the machine type setting. */
                            runtime?: {
                                /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                enabled?: boolean;
                            };
                            /** @description Spinlocks allows to configure the spinlock retry attempts. */
                            spinlocks?: {
                                /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                enabled?: boolean;
                                /**
                                 * Format: int32
                                 * @description Retries indicates the number of retries. Must be a value greater or equal 4096. Defaults to 4096.
                                 */
                                spinlocks?: number;
                            };
                            /** @description SyNIC enables the Synthetic Interrupt Controller. Defaults to the machine type setting. */
                            synic?: {
                                /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                enabled?: boolean;
                            };
                            /** @description SyNICTimer enables Synthetic Interrupt Controller Timers, reducing CPU load. Defaults to the machine type setting. */
                            synictimer?: {
                                /** @description Represents if a feature is enabled or disabled. */
                                direct?: {
                                    /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                    enabled?: boolean;
                                };
                                enabled?: boolean;
                            };
                            /** @description TLBFlush improves performances in overcommited environments. Requires vpindex. Defaults to the machine type setting. */
                            tlbflush?: {
                                /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                enabled?: boolean;
                            };
                            /** @description VAPIC improves the paravirtualized handling of interrupts. Defaults to the machine type setting. */
                            vapic?: {
                                /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                enabled?: boolean;
                            };
                            /** @description VendorID allows setting the hypervisor vendor id. Defaults to the machine type setting. */
                            vendorid?: {
                                /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                enabled?: boolean;
                                /** @description VendorID sets the hypervisor vendor id, visible to the vmi. String up to twelve characters. */
                                vendorid?: string;
                            };
                            /** @description VPIndex enables the Virtual Processor Index to help windows identifying virtual processors. Defaults to the machine type setting. */
                            vpindex?: {
                                /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                enabled?: boolean;
                            };
                        };
                        /** @description Configure how KVM presence is exposed to the guest. */
                        kvm?: {
                            /** @description Hide the KVM hypervisor from standard MSR based discovery. Defaults to false */
                            hidden?: boolean;
                        };
                        /** @description Notify the guest that the host supports paravirtual spinlocks. For older kernels this feature should be explicitly disabled. */
                        pvspinlock?: {
                            /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                            enabled?: boolean;
                        };
                        /** @description SMM enables/disables System Management Mode. TSEG not yet implemented. */
                        smm?: {
                            /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                            enabled?: boolean;
                        };
                    };
                    /** @description Firmware. */
                    firmware?: {
                        /** @description Settings to control the bootloader that is used. */
                        bootloader?: {
                            /** @description If set (default), BIOS will be used. */
                            bios?: {
                                /** @description If set, the BIOS output will be transmitted over serial */
                                useSerial?: boolean;
                            };
                            /** @description If set, EFI will be used instead of BIOS. */
                            efi?: {
                                /** @description If set to true, Persistent will persist the EFI NVRAM across reboots. Defaults to false */
                                persistent?: boolean;
                                /** @description If set, SecureBoot will be enabled and the OVMF roms will be swapped for SecureBoot-enabled ones. Requires SMM to be enabled. Defaults to true */
                                secureBoot?: boolean;
                            };
                        };
                        /** @description Settings to set the kernel for booting. */
                        kernelBoot?: {
                            /** @description Container defines the container that containes kernel artifacts */
                            container?: {
                                /** @description Image that contains initrd / kernel files. */
                                image: string;
                                /** @description Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images */
                                imagePullPolicy?: string;
                                /** @description ImagePullSecret is the name of the Docker registry secret required to pull the image. The secret must already exist. */
                                imagePullSecret?: string;
                                /** @description the fully-qualified path to the ramdisk image in the host OS */
                                initrdPath?: string;
                                /** @description The fully-qualified path to the kernel image in the host OS */
                                kernelPath?: string;
                            };
                            /** @description Arguments to be passed to the kernel at boot time */
                            kernelArgs?: string;
                        };
                        /** @description The system-serial-number in SMBIOS */
                        serial?: string;
                        /** @description UUID reported by the vmi bios. Defaults to a random generated uid. */
                        uuid?: string;
                    };
                    /** @description Controls whether or not disks will share IOThreads. Omitting IOThreadsPolicy disables use of IOThreads. One of: shared, auto */
                    ioThreadsPolicy?: string;
                    /** @description Launch Security setting of the vmi. */
                    launchSecurity?: {
                        /** @description AMD Secure Encrypted Virtualization (SEV). */
                        sev?: {
                            /** @description If specified, run the attestation process for a vmi. */
                            attestation?: Record<string, never>;
                            /** @description Base64 encoded guest owner's Diffie-Hellman key. */
                            dhCert?: string;
                            /** @description Guest policy flags as defined in AMD SEV API specification. Note: due to security reasons it is not allowed to enable guest debugging. Therefore NoDebug flag is not exposed to users and is always true. */
                            policy?: {
                                /** @description SEV-ES is required. Defaults to false. */
                                encryptedState?: boolean;
                            };
                            /** @description Base64 encoded session blob. */
                            session?: string;
                        };
                    };
                    /** @description Machine type. */
                    machine?: {
                        /** @description QEMU machine type is the actual chipset of the VirtualMachineInstance. */
                        type?: string;
                    };
                    /** @description Memory allow specifying the VMI memory features. */
                    memory?: {
                        /** @description Guest allows to specifying the amount of memory which is visible inside the Guest OS. The Guest must lie between Requests and Limits from the resources section. Defaults to the requested memory in the resources section if not specified. */
                        guest?: number | string;
                        /** @description Hugepages allow to use hugepages for the VirtualMachineInstance instead of regular memory. */
                        hugepages?: {
                            /** @description PageSize specifies the hugepage size, for x86_64 architecture valid values are 1Gi and 2Mi. */
                            pageSize?: string;
                        };
                        /** @description MaxGuest allows to specify the maximum amount of memory which is visible inside the Guest OS. The delta between MaxGuest and Guest is the amount of memory that can be hot(un)plugged. */
                        maxGuest?: number | string;
                    };
                    /** @description Resources describes the Compute Resources required by this vmi. */
                    resources?: {
                        /** @description Limits describes the maximum amount of compute resources allowed. Valid resource keys are "memory" and "cpu". */
                        limits?: {
                            [key: string]: number | string;
                        };
                        /** @description Don't ask the scheduler to take the guest-management overhead into account. Instead put the overhead only into the container's memory limit. This can lead to crashes if all memory is in use on a node. Defaults to false. */
                        overcommitGuestOverhead?: boolean;
                        /** @description Requests is a description of the initial vmi resources. Valid resource keys are "memory" and "cpu". */
                        requests?: {
                            [key: string]: number | string;
                        };
                    };
                };
                /** @description EvictionStrategy can be set to "LiveMigrate" if the VirtualMachineInstance should be migrated instead of shut-off in case of a node drain. */
                evictionStrategy?: string;
                /** @description Specifies the hostname of the vmi If not specified, the hostname will be set to the name of the vmi, if dhcp or cloud-init is configured properly. */
                hostname?: string;
                /** @description Periodic probe of VirtualMachineInstance liveness. VirtualmachineInstances will be stopped if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes */
                livenessProbe?: {
                    /** @description One and only one of the following should be specified. Exec specifies the action to take, it will be executed on the guest through the qemu-guest-agent. If the guest agent is not available, this probe will fail. */
                    exec?: {
                        /** @description Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy. */
                        command?: string[];
                    };
                    /**
                     * Format: int32
                     * @description Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
                     */
                    failureThreshold?: number;
                    /** @description GuestAgentPing contacts the qemu-guest-agent for availability checks. */
                    guestAgentPing?: Record<string, never>;
                    /** @description HTTPGet specifies the http request to perform. */
                    httpGet?: {
                        /** @description Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead. */
                        host?: string;
                        /** @description Custom headers to set in the request. HTTP allows repeated headers. */
                        httpHeaders?: {
                            /** @description The header field name */
                            name: string;
                            /** @description The header field value */
                            value: string;
                        }[];
                        /** @description Path to access on the HTTP server. */
                        path?: string;
                        /** @description Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. */
                        port: number | string;
                        /** @description Scheme to use for connecting to the host. Defaults to HTTP. */
                        scheme?: string;
                    };
                    /**
                     * Format: int32
                     * @description Number of seconds after the VirtualMachineInstance has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                     */
                    initialDelaySeconds?: number;
                    /**
                     * Format: int32
                     * @description How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
                     */
                    periodSeconds?: number;
                    /**
                     * Format: int32
                     * @description Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
                     */
                    successThreshold?: number;
                    /** @description TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook */
                    tcpSocket?: {
                        /** @description Optional: Host name to connect to, defaults to the pod IP. */
                        host?: string;
                        /** @description Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. */
                        port: number | string;
                    };
                    /**
                     * Format: int32
                     * @description Number of seconds after which the probe times out. For exec probes the timeout fails the probe but does not terminate the command running on the guest. This means a blocking command can result in an increasing load on the guest. A small buffer will be added to the resulting workload exec probe to compensate for delays caused by the qemu guest exec mechanism. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                     */
                    timeoutSeconds?: number;
                };
                /** @description List of networks that can be attached to a vm's virtual interface. */
                networks?: {
                    /** @description Represents the multus cni network. */
                    multus?: {
                        /** @description Select the default network and add it to the multus-cni.io/default-network annotation. */
                        default?: boolean;
                        /** @description References to a NetworkAttachmentDefinition CRD object. Format: <networkName>, <namespace>/<networkName>. If namespace is not specified, VMI namespace is assumed. */
                        networkName: string;
                    };
                    /** @description Network name. Must be a DNS_LABEL and unique within the vm. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names */
                    name: string;
                    /** @description Represents the stock pod network interface. */
                    pod?: {
                        /** @description IPv6 CIDR for the vm network. Defaults to fd10:0:2::/120 if not specified. */
                        vmIPv6NetworkCIDR?: string;
                        /** @description CIDR for vm network. Default 10.0.2.0/24 if not specified. */
                        vmNetworkCIDR?: string;
                    };
                }[];
                /** @description NodeSelector is a selector which must be true for the vmi to fit on a node. Selector which must match a node's labels for the vmi to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/ */
                nodeSelector?: {
                    [key: string]: string;
                };
                /** @description If specified, indicates the pod's priority. If not specified, the pod priority will be default or zero if there is no default. */
                priorityClassName?: string;
                /** @description Periodic probe of VirtualMachineInstance service readiness. VirtualmachineInstances will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes */
                readinessProbe?: {
                    /** @description One and only one of the following should be specified. Exec specifies the action to take, it will be executed on the guest through the qemu-guest-agent. If the guest agent is not available, this probe will fail. */
                    exec?: {
                        /** @description Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy. */
                        command?: string[];
                    };
                    /**
                     * Format: int32
                     * @description Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
                     */
                    failureThreshold?: number;
                    /** @description GuestAgentPing contacts the qemu-guest-agent for availability checks. */
                    guestAgentPing?: Record<string, never>;
                    /** @description HTTPGet specifies the http request to perform. */
                    httpGet?: {
                        /** @description Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead. */
                        host?: string;
                        /** @description Custom headers to set in the request. HTTP allows repeated headers. */
                        httpHeaders?: {
                            /** @description The header field name */
                            name: string;
                            /** @description The header field value */
                            value: string;
                        }[];
                        /** @description Path to access on the HTTP server. */
                        path?: string;
                        /** @description Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. */
                        port: number | string;
                        /** @description Scheme to use for connecting to the host. Defaults to HTTP. */
                        scheme?: string;
                    };
                    /**
                     * Format: int32
                     * @description Number of seconds after the VirtualMachineInstance has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                     */
                    initialDelaySeconds?: number;
                    /**
                     * Format: int32
                     * @description How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
                     */
                    periodSeconds?: number;
                    /**
                     * Format: int32
                     * @description Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
                     */
                    successThreshold?: number;
                    /** @description TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook */
                    tcpSocket?: {
                        /** @description Optional: Host name to connect to, defaults to the pod IP. */
                        host?: string;
                        /** @description Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. */
                        port: number | string;
                    };
                    /**
                     * Format: int32
                     * @description Number of seconds after which the probe times out. For exec probes the timeout fails the probe but does not terminate the command running on the guest. This means a blocking command can result in an increasing load on the guest. A small buffer will be added to the resulting workload exec probe to compensate for delays caused by the qemu guest exec mechanism. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                     */
                    timeoutSeconds?: number;
                };
                /** @description If specified, the VMI will be dispatched by specified scheduler. If not specified, the VMI will be dispatched by default scheduler. */
                schedulerName?: string;
                /** @description StartStrategy can be set to "Paused" if Virtual Machine should be started in paused state. */
                startStrategy?: string;
                /** @description If specified, the fully qualified vmi hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the vmi will not have a domainname at all. The DNS entry will resolve to the vmi, no matter if the vmi itself can pick up a hostname. */
                subdomain?: string;
                /**
                 * Format: int64
                 * @description Grace period observed after signalling a VirtualMachineInstance to stop after which the VirtualMachineInstance is force terminated.
                 */
                terminationGracePeriodSeconds?: number;
                /** @description If toleration is specified, obey all the toleration rules. */
                tolerations?: {
                    /** @description Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute. */
                    effect?: string;
                    /** @description Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys. */
                    key?: string;
                    /** @description Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category. */
                    operator?: string;
                    /**
                     * Format: int64
                     * @description TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
                     */
                    tolerationSeconds?: number;
                    /** @description Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string. */
                    value?: string;
                }[];
                /** @description TopologySpreadConstraints describes how a group of VMIs will be spread across a given topology domains. K8s scheduler will schedule VMI pods in a way which abides by the constraints. */
                topologySpreadConstraints?: {
                    /** @description LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain. */
                    labelSelector?: {
                        /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                        matchExpressions?: {
                            /** @description key is the label key that the selector applies to. */
                            key: string;
                            /** @description operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. */
                            operator: string;
                            /** @description values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. */
                            values?: string[];
                        }[];
                        /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed. */
                        matchLabels?: {
                            [key: string]: string;
                        };
                    };
                    /** @description MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector. */
                    matchLabelKeys?: string[];
                    /**
                     * Format: int32
                     * @description MaxSkew describes the degree to which pods may be unevenly distributed. When 'whenUnsatisfiable=DoNotSchedule', it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When 'whenUnsatisfiable=ScheduleAnyway', it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
                     */
                    maxSkew: number;
                    /**
                     * Format: int32
                     * @description MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
                     *      For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.
                     *      This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).
                     */
                    minDomains?: number;
                    /** @description NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
                     *      If this value is nil, the behavior is equivalent to the Honor policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag. */
                    nodeAffinityPolicy?: string;
                    /** @description NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.
                     *      If this value is nil, the behavior is equivalent to the Ignore policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag. */
                    nodeTaintsPolicy?: string;
                    /** @description TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It's a required field. */
                    topologyKey: string;
                    /** @description WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,   but giving higher precedence to topologies that would help reduce the   skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field. */
                    whenUnsatisfiable: string;
                }[];
                /** @description List of volumes that can be mounted by disks belonging to the vmi. */
                volumes?: {
                    /** @description CloudInitConfigDrive represents a cloud-init Config Drive user-data source. The Config Drive data will be added as a disk to the vmi. A proper cloud-init installation is required inside the guest. More info: https://cloudinit.readthedocs.io/en/latest/topics/datasources/configdrive.html */
                    cloudInitConfigDrive?: {
                        /** @description NetworkData contains config drive inline cloud-init networkdata. */
                        networkData?: string;
                        /** @description NetworkDataBase64 contains config drive cloud-init networkdata as a base64 encoded string. */
                        networkDataBase64?: string;
                        /** @description NetworkDataSecretRef references a k8s secret that contains config drive networkdata. */
                        networkDataSecretRef?: {
                            /** @description Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid? */
                            name?: string;
                        };
                        /** @description UserDataSecretRef references a k8s secret that contains config drive userdata. */
                        secretRef?: {
                            /** @description Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid? */
                            name?: string;
                        };
                        /** @description UserData contains config drive inline cloud-init userdata. */
                        userData?: string;
                        /** @description UserDataBase64 contains config drive cloud-init userdata as a base64 encoded string. */
                        userDataBase64?: string;
                    };
                    /** @description CloudInitNoCloud represents a cloud-init NoCloud user-data source. The NoCloud data will be added as a disk to the vmi. A proper cloud-init installation is required inside the guest. More info: http://cloudinit.readthedocs.io/en/latest/topics/datasources/nocloud.html */
                    cloudInitNoCloud?: {
                        /** @description NetworkData contains NoCloud inline cloud-init networkdata. */
                        networkData?: string;
                        /** @description NetworkDataBase64 contains NoCloud cloud-init networkdata as a base64 encoded string. */
                        networkDataBase64?: string;
                        /** @description NetworkDataSecretRef references a k8s secret that contains NoCloud networkdata. */
                        networkDataSecretRef?: {
                            /** @description Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid? */
                            name?: string;
                        };
                        /** @description UserDataSecretRef references a k8s secret that contains NoCloud userdata. */
                        secretRef?: {
                            /** @description Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid? */
                            name?: string;
                        };
                        /** @description UserData contains NoCloud inline cloud-init userdata. */
                        userData?: string;
                        /** @description UserDataBase64 contains NoCloud cloud-init userdata as a base64 encoded string. */
                        userDataBase64?: string;
                    };
                    /** @description ConfigMapSource represents a reference to a ConfigMap in the same namespace. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/ */
                    configMap?: {
                        /** @description Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid? */
                        name?: string;
                        /** @description Specify whether the ConfigMap or it's keys must be defined */
                        optional?: boolean;
                        /** @description The volume label of the resulting disk inside the VMI. Different bootstrapping mechanisms require different values. Typical values are "cidata" (cloud-init), "config-2" (cloud-init) or "OEMDRV" (kickstart). */
                        volumeLabel?: string;
                    };
                    /** @description ContainerDisk references a docker image, embedding a qcow or raw disk. More info: https://kubevirt.gitbooks.io/user-guide/registry-disk.html */
                    containerDisk?: {
                        /** @description Image is the name of the image with the embedded disk. */
                        image: string;
                        /** @description Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images */
                        imagePullPolicy?: string;
                        /** @description ImagePullSecret is the name of the Docker registry secret required to pull the image. The secret must already exist. */
                        imagePullSecret?: string;
                        /** @description Path defines the path to disk file in the container */
                        path?: string;
                    };
                    /** @description DataVolume represents the dynamic creation a PVC for this volume as well as the process of populating that PVC with a disk image. */
                    dataVolume?: {
                        /** @description Hotpluggable indicates whether the volume can be hotplugged and hotunplugged. */
                        hotpluggable?: boolean;
                        /** @description Name of both the DataVolume and the PVC in the same namespace. After PVC population the DataVolume is garbage collected by default. */
                        name: string;
                    };
                    /** @description DownwardAPI represents downward API about the pod that should populate this volume */
                    downwardAPI?: {
                        /** @description Fields is a list of downward API volume file */
                        fields?: {
                            /** @description Required: Selects a field of the pod: only annotations, labels, name and namespace are supported. */
                            fieldRef?: {
                                /** @description Version of the schema the FieldPath is written in terms of, defaults to "v1". */
                                apiVersion?: string;
                                /** @description Path of the field to select in the specified API version. */
                                fieldPath: string;
                            };
                            /**
                             * Format: int32
                             * @description Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
                             */
                            mode?: number;
                            /** @description Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..' */
                            path: string;
                            /** @description Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported. */
                            resourceFieldRef?: {
                                /** @description Container name: required for volumes, optional for env vars */
                                containerName?: string;
                                /** @description Specifies the output format of the exposed resources, defaults to "1" */
                                divisor?: number | string;
                                /** @description Required: resource to select */
                                resource: string;
                            };
                        }[];
                        /** @description The volume label of the resulting disk inside the VMI. Different bootstrapping mechanisms require different values. Typical values are "cidata" (cloud-init), "config-2" (cloud-init) or "OEMDRV" (kickstart). */
                        volumeLabel?: string;
                    };
                    /** @description DownwardMetrics adds a very small disk to VMIs which contains a limited view of host and guest metrics. The disk content is compatible with vhostmd (https://github.com/vhostmd/vhostmd) and vm-dump-metrics. */
                    downwardMetrics?: Record<string, never>;
                    /** @description EmptyDisk represents a temporary disk which shares the vmis lifecycle. More info: https://kubevirt.gitbooks.io/user-guide/disks-and-volumes.html */
                    emptyDisk?: {
                        /** @description Capacity of the sparse disk. */
                        capacity: number | string;
                    };
                    /** @description Ephemeral is a special volume source that "wraps" specified source and provides copy-on-write image on top of it. */
                    ephemeral?: {
                        /** @description PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. Directly attached to the vmi via qemu. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims */
                        persistentVolumeClaim?: {
                            /** @description claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims */
                            claimName: string;
                            /** @description readOnly Will force the ReadOnly setting in VolumeMounts. Default false. */
                            readOnly?: boolean;
                        };
                    };
                    /** @description HostDisk represents a disk created on the cluster level */
                    hostDisk?: {
                        /** @description Capacity of the sparse disk */
                        capacity?: number | string;
                        /** @description The path to HostDisk image located on the cluster */
                        path: string;
                        /** @description Shared indicate whether the path is shared between nodes */
                        shared?: boolean;
                        /** @description Contains information if disk.img exists or should be created allowed options are 'Disk' and 'DiskOrCreate' */
                        type: string;
                    };
                    /** @description MemoryDump is attached to the virt launcher and is populated with a memory dump of the vmi */
                    memoryDump?: {
                        /** @description claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims */
                        claimName: string;
                        /** @description Hotpluggable indicates whether the volume can be hotplugged and hotunplugged. */
                        hotpluggable?: boolean;
                        /** @description readOnly Will force the ReadOnly setting in VolumeMounts. Default false. */
                        readOnly?: boolean;
                    };
                    /** @description Volume's name. Must be a DNS_LABEL and unique within the vmi. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names */
                    name: string;
                    /** @description PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. Directly attached to the vmi via qemu. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims */
                    persistentVolumeClaim?: {
                        /** @description claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims */
                        claimName: string;
                        /** @description Hotpluggable indicates whether the volume can be hotplugged and hotunplugged. */
                        hotpluggable?: boolean;
                        /** @description readOnly Will force the ReadOnly setting in VolumeMounts. Default false. */
                        readOnly?: boolean;
                    };
                    /** @description SecretVolumeSource represents a reference to a secret data in the same namespace. More info: https://kubernetes.io/docs/concepts/configuration/secret/ */
                    secret?: {
                        /** @description Specify whether the Secret or it's keys must be defined */
                        optional?: boolean;
                        /** @description Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret */
                        secretName?: string;
                        /** @description The volume label of the resulting disk inside the VMI. Different bootstrapping mechanisms require different values. Typical values are "cidata" (cloud-init), "config-2" (cloud-init) or "OEMDRV" (kickstart). */
                        volumeLabel?: string;
                    };
                    /** @description ServiceAccountVolumeSource represents a reference to a service account. There can only be one volume of this type! More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/ */
                    serviceAccount?: {
                        /** @description Name of the service account in the pod's namespace to use. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/ */
                        serviceAccountName?: string;
                    };
                    /** @description Represents a Sysprep volume source. */
                    sysprep?: {
                        /** @description ConfigMap references a ConfigMap that contains Sysprep answer file named autounattend.xml that should be attached as disk of CDROM type. */
                        configMap?: {
                            /** @description Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid? */
                            name?: string;
                        };
                        /** @description Secret references a k8s Secret that contains Sysprep answer file named autounattend.xml that should be attached as disk of CDROM type. */
                        secret?: {
                            /** @description Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid? */
                            name?: string;
                        };
                    };
                }[];
            };
            /** @description Status is the high level overview of how the VirtualMachineInstance is doing. It contains information available to controllers and users. */
            status?: {
                /**
                 * Format: int32
                 * @description VSOCKCID is used to track the allocated VSOCK CID in the VM.
                 */
                VSOCKCID?: number;
                /** @description ActivePods is a mapping of pod UID to node name. It is possible for multiple pods to be running for a single VMI during migration. */
                activePods?: {
                    [key: string]: string;
                };
                /** @description Conditions are specific points in VirtualMachineInstance's pod runtime. */
                conditions?: {
                    /** Format: date-time */
                    lastProbeTime?: string | null;
                    /** Format: date-time */
                    lastTransitionTime?: string | null;
                    message?: string;
                    reason?: string;
                    status: string;
                    type: string;
                }[];
                /** @description CurrentCPUTopology specifies the current CPU topology used by the VM workload. Current topology may differ from the desired topology in the spec while CPU hotplug takes place. */
                currentCPUTopology?: {
                    /**
                     * Format: int32
                     * @description Cores specifies the number of cores inside the vmi. Must be a value greater or equal 1.
                     */
                    cores?: number;
                    /**
                     * Format: int32
                     * @description Sockets specifies the number of sockets inside the vmi. Must be a value greater or equal 1.
                     */
                    sockets?: number;
                    /**
                     * Format: int32
                     * @description Threads specifies the number of threads inside the vmi. Must be a value greater or equal 1.
                     */
                    threads?: number;
                };
                /** @description EvacuationNodeName is used to track the eviction process of a VMI. It stores the name of the node that we want to evacuate. It is meant to be used by KubeVirt core components only and can't be set or modified by users. */
                evacuationNodeName?: string;
                /** @description FSFreezeStatus is the state of the fs of the guest it can be either frozen or thawed */
                fsFreezeStatus?: string;
                /** @description Guest OS Information */
                guestOSInfo?: {
                    /** @description Guest OS Id */
                    id?: string;
                    /** @description Guest OS Kernel Release */
                    kernelRelease?: string;
                    /** @description Kernel version of the Guest OS */
                    kernelVersion?: string;
                    /** @description Machine type of the Guest OS */
                    machine?: string;
                    /** @description Name of the Guest OS */
                    name?: string;
                    /** @description Guest OS Pretty Name */
                    prettyName?: string;
                    /** @description Guest OS Version */
                    version?: string;
                    /** @description Version ID of the Guest OS */
                    versionId?: string;
                };
                /** @description Interfaces represent the details of available network interfaces. */
                interfaces?: {
                    /** @description Specifies the origin of the interface data collected. values: domain, guest-agent, multus-status. */
                    infoSource?: string;
                    /** @description The interface name inside the Virtual Machine */
                    interfaceName?: string;
                    /** @description IP address of a Virtual Machine interface. It is always the first item of IPs */
                    ipAddress?: string;
                    /** @description List of all IP addresses of a Virtual Machine interface */
                    ipAddresses?: string[];
                    /** @description Hardware address of a Virtual Machine interface */
                    mac?: string;
                    /** @description Name of the interface, corresponds to name of the network assigned to the interface */
                    name?: string;
                    /**
                     * Format: int32
                     * @description Specifies how many queues are allocated by MultiQueue
                     */
                    queueCount?: number;
                }[];
                /** @description KernelBootStatus contains info about the kernelBootContainer */
                kernelBootStatus?: {
                    /** @description InitrdInfo show info about the initrd file */
                    initrdInfo?: {
                        /**
                         * Format: int32
                         * @description Checksum is the checksum of the initrd file
                         */
                        checksum?: number;
                    };
                    /** @description KernelInfo show info about the kernel image */
                    kernelInfo?: {
                        /**
                         * Format: int32
                         * @description Checksum is the checksum of the kernel image
                         */
                        checksum?: number;
                    };
                };
                /** @description LauncherContainerImageVersion indicates what container image is currently active for the vmi. */
                launcherContainerImageVersion?: string;
                /** @description Machine shows the final resulting qemu machine type. This can be different than the machine type selected in the spec, due to qemus machine type alias mechanism. */
                machine?: {
                    /** @description QEMU machine type is the actual chipset of the VirtualMachineInstance. */
                    type?: string;
                };
                /** @description Memory shows various informations about the VirtualMachine memory. */
                memory?: {
                    /** @description GuestAtBoot specifies with how much memory the VirtualMachine intiallly booted with. */
                    guestAtBoot?: number | string;
                    /** @description GuestCurrent specifies how much memory is currently available for the VirtualMachine. */
                    guestCurrent?: number | string;
                    /** @description GuestRequested specifies how much memory was requested (hotplug) for the VirtualMachine. */
                    guestRequested?: number | string;
                };
                /** @description Represents the method using which the vmi can be migrated: live migration or block migration */
                migrationMethod?: string;
                /** @description Represents the status of a live migration */
                migrationState?: {
                    /** @description Indicates that the migration has been requested to abort */
                    abortRequested?: boolean;
                    /** @description Indicates the final status of the live migration abortion */
                    abortStatus?: string;
                    /** @description Indicates the migration completed */
                    completed?: boolean;
                    /**
                     * Format: date-time
                     * @description The time the migration action ended
                     */
                    endTimestamp?: string | null;
                    /** @description Indicates that the migration failed */
                    failed?: boolean;
                    /** @description Migration configurations to apply */
                    migrationConfiguration?: {
                        /** @description AllowAutoConverge allows the platform to compromise performance/availability of VMIs to guarantee successful VMI live migrations. Defaults to false */
                        allowAutoConverge?: boolean;
                        /** @description AllowPostCopy enables post-copy live migrations. Such migrations allow even the busiest VMIs to successfully live-migrate. However, events like a network failure can cause a VMI crash. If set to true, migrations will still start in pre-copy, but switch to post-copy when CompletionTimeoutPerGiB triggers. Defaults to false */
                        allowPostCopy?: boolean;
                        /** @description BandwidthPerMigration limits the amount of network bandwidth live migrations are allowed to use. The value is in quantity per second. Defaults to 0 (no limit) */
                        bandwidthPerMigration?: number | string;
                        /**
                         * Format: int64
                         * @description CompletionTimeoutPerGiB is the maximum number of seconds per GiB a migration is allowed to take. If a live-migration takes longer to migrate than this value multiplied by the size of the VMI, the migration will be cancelled, unless AllowPostCopy is true. Defaults to 800
                         */
                        completionTimeoutPerGiB?: number;
                        /** @description When set to true, DisableTLS will disable the additional layer of live migration encryption provided by KubeVirt. This is usually a bad idea. Defaults to false */
                        disableTLS?: boolean;
                        /** @description By default, the SELinux level of target virt-launcher pods is forced to the level of the source virt-launcher. When set to true, MatchSELinuxLevelOnMigration lets the CRI auto-assign a random level to the target. That will ensure the target virt-launcher doesn't share categories with another pod on the node. However, migrations will fail when using RWX volumes that don't automatically deal with SELinux levels. */
                        matchSELinuxLevelOnMigration?: boolean;
                        /** @description Network is the name of the CNI network to use for live migrations. By default, migrations go through the pod network. */
                        network?: string;
                        /** @description NodeDrainTaintKey defines the taint key that indicates a node should be drained. Note: this option relies on the deprecated node taint feature. Default: kubevirt.io/drain */
                        nodeDrainTaintKey?: string;
                        /**
                         * Format: int32
                         * @description ParallelMigrationsPerCluster is the total number of concurrent live migrations allowed cluster-wide. Defaults to 5
                         */
                        parallelMigrationsPerCluster?: number;
                        /**
                         * Format: int32
                         * @description ParallelOutboundMigrationsPerNode is the maximum number of concurrent outgoing live migrations allowed per node. Defaults to 2
                         */
                        parallelOutboundMigrationsPerNode?: number;
                        /**
                         * Format: int64
                         * @description ProgressTimeout is the maximum number of seconds a live migration is allowed to make no progress. Hitting this timeout means a migration transferred 0 data for that many seconds. The migration is then considered stuck and therefore cancelled. Defaults to 150
                         */
                        progressTimeout?: number;
                        /** @description UnsafeMigrationOverride allows live migrations to occur even if the compatibility check indicates the migration will be unsafe to the guest. Defaults to false */
                        unsafeMigrationOverride?: boolean;
                    };
                    /** @description Name of the migration policy. If string is empty, no policy is matched */
                    migrationPolicyName?: string;
                    /** @description The VirtualMachineInstanceMigration object associated with this migration */
                    migrationUid?: string;
                    /** @description Lets us know if the vmi is currently running pre or post copy migration */
                    mode?: string;
                    /** @description The source node that the VMI originated on */
                    sourceNode?: string;
                    /**
                     * Format: date-time
                     * @description The time the migration action began
                     */
                    startTimestamp?: string | null;
                    /** @description The UID of the target attachment pod for hotplug volumes */
                    targetAttachmentPodUID?: string;
                    /** @description If the VMI requires dedicated CPUs, this field will hold the dedicated CPU set on the target node */
                    targetCPUSet?: number[];
                    /** @description The list of ports opened for live migration on the destination node */
                    targetDirectMigrationNodePorts?: {
                        [key: string]: number;
                    };
                    /** @description The target node that the VMI is moving to */
                    targetNode?: string;
                    /** @description The address of the target node to use for the migration */
                    targetNodeAddress?: string;
                    /** @description The Target Node has seen the Domain Start Event */
                    targetNodeDomainDetected?: boolean;
                    /**
                     * Format: date-time
                     * @description The timestamp at which the target node detects the domain is active
                     */
                    targetNodeDomainReadyTimestamp?: string;
                    /** @description If the VMI requires dedicated CPUs, this field will hold the numa topology on the target node */
                    targetNodeTopology?: string;
                    /** @description The target pod that the VMI is moving to */
                    targetPod?: string;
                };
                /** @description This represents the migration transport */
                migrationTransport?: string;
                /** @description NodeName is the name where the VirtualMachineInstance is currently running. */
                nodeName?: string;
                /** @description Phase is the status of the VirtualMachineInstance in kubernetes world. It is not the VirtualMachineInstance status, but partially correlates to it. */
                phase?: string;
                /** @description PhaseTransitionTimestamp is the timestamp of when the last phase change occurred */
                phaseTransitionTimestamps?: {
                    /** @description Phase is the status of the VirtualMachineInstance in kubernetes world. It is not the VirtualMachineInstance status, but partially correlates to it. */
                    phase?: string;
                    /**
                     * Format: date-time
                     * @description PhaseTransitionTimestamp is the timestamp of when the phase change occurred
                     */
                    phaseTransitionTimestamp?: string;
                }[];
                /** @description The Quality of Service (QOS) classification assigned to the virtual machine instance based on resource requirements See PodQOSClass type for available QOS classes More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md */
                qosClass?: string;
                /** @description A brief CamelCase message indicating details about why the VMI is in this state. e.g. 'NodeUnresponsive' */
                reason?: string;
                /**
                 * Format: int64
                 * @description RuntimeUser is used to determine what user will be used in launcher
                 */
                runtimeUser?: number;
                /** @description SELinuxContext is the actual SELinux context of the virt-launcher pod */
                selinuxContext?: string;
                topologyHints?: {
                    /** Format: int64 */
                    tscFrequency?: number;
                };
                /** @description VirtualMachineRevisionName is used to get the vm revision of the vmi when doing an online vm snapshot */
                virtualMachineRevisionName?: string;
                /** @description VolumeStatus contains the statuses of all the volumes */
                volumeStatus?: {
                    /** @description ContainerDiskVolume shows info about the containerdisk, if the volume is a containerdisk */
                    containerDiskVolume?: {
                        /**
                         * Format: int32
                         * @description Checksum is the checksum of the rootdisk or kernel artifacts inside the containerdisk
                         */
                        checksum?: number;
                    };
                    /** @description If the volume is hotplug, this will contain the hotplug status. */
                    hotplugVolume?: {
                        /** @description AttachPodName is the name of the pod used to attach the volume to the node. */
                        attachPodName?: string;
                        /** @description AttachPodUID is the UID of the pod used to attach the volume to the node. */
                        attachPodUID?: string;
                    };
                    /** @description If the volume is memorydump volume, this will contain the memorydump info. */
                    memoryDumpVolume?: {
                        /** @description ClaimName is the name of the pvc the memory was dumped to */
                        claimName?: string;
                        /**
                         * Format: date-time
                         * @description EndTimestamp is the time when the memory dump completed
                         */
                        endTimestamp?: string;
                        /**
                         * Format: date-time
                         * @description StartTimestamp is the time when the memory dump started
                         */
                        startTimestamp?: string;
                        /** @description TargetFileName is the name of the memory dump output */
                        targetFileName?: string;
                    };
                    /** @description Message is a detailed message about the current hotplug volume phase */
                    message?: string;
                    /** @description Name is the name of the volume */
                    name: string;
                    /** @description PersistentVolumeClaimInfo is information about the PVC that handler requires during start flow */
                    persistentVolumeClaimInfo?: {
                        /** @description AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1 */
                        accessModes?: string[];
                        /** @description Capacity represents the capacity set on the corresponding PVC status */
                        capacity?: {
                            [key: string]: number | string;
                        };
                        /** @description Percentage of filesystem's size to be reserved when resizing the PVC */
                        filesystemOverhead?: string;
                        /** @description Preallocated indicates if the PVC's storage is preallocated or not */
                        preallocated?: boolean;
                        /** @description Requests represents the resources requested by the corresponding PVC spec */
                        requests?: {
                            [key: string]: number | string;
                        };
                        /** @description VolumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. */
                        volumeMode?: string;
                    };
                    /** @description Phase is the phase */
                    phase?: string;
                    /** @description Reason is a brief description of why we are in the current hotplug volume phase */
                    reason?: string;
                    /**
                     * Format: int64
                     * @description Represents the size of the volume
                     */
                    size?: number;
                    /** @description Target is the target name used when adding the volume to the VM, eg: vda */
                    target: string;
                }[];
            };
        };
        /** @description VirtualMachine handles the VirtualMachines that are not running or are in a stopped state The VirtualMachine contains the template to create the VirtualMachineInstance. It also mirrors the running state of the created VirtualMachineInstance in its status. */
        v1VirtualMachine: {
            /** @description APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources */
            apiVersion?: string;
            /** @description Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds */
            kind?: string;
            metadata?: Record<string, any>;
            /** @description Spec contains the specification of VirtualMachineInstance created */
            spec: {
                /** @description dataVolumeTemplates is a list of dataVolumes that the VirtualMachineInstance template can reference. DataVolumes in this list are dynamically created for the VirtualMachine and are tied to the VirtualMachine's life-cycle. */
                dataVolumeTemplates?: ({
                    /** @description APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources */
                    apiVersion?: string;
                    /** @description Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds */
                    kind?: string;
                    metadata?: Record<string, any> | null;
                    /** @description DataVolumeSpec contains the DataVolume specification. */
                    spec: {
                        /** @description Checkpoints is a list of DataVolumeCheckpoints, representing stages in a multistage import. */
                        checkpoints?: {
                            /** @description Current is the identifier of the snapshot created for this checkpoint. */
                            current: string;
                            /** @description Previous is the identifier of the snapshot from the previous checkpoint. */
                            previous: string;
                        }[];
                        /**
                         * @description DataVolumeContentType options: "kubevirt", "archive"
                         * @enum {string}
                         */
                        contentType?: "kubevirt" | "archive";
                        /** @description FinalCheckpoint indicates whether the current DataVolumeCheckpoint is the final checkpoint. */
                        finalCheckpoint?: boolean;
                        /** @description Preallocation controls whether storage for DataVolumes should be allocated in advance. */
                        preallocation?: boolean;
                        /** @description PriorityClassName for Importer, Cloner and Uploader pod */
                        priorityClassName?: string;
                        /** @description PVC is the PVC specification */
                        pvc?: {
                            /** @description accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1 */
                            accessModes?: string[];
                            /** @description dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource. */
                            dataSource?: {
                                /** @description APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required. */
                                apiGroup?: string;
                                /** @description Kind is the type of resource being referenced */
                                kind: string;
                                /** @description Name is the name of resource being referenced */
                                name: string;
                            };
                            /** @description dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef   allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef   preserves all values, and generates an error if a disallowed value is   specified. * While dataSource only allows local objects, dataSourceRef allows objects   in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled. */
                            dataSourceRef?: {
                                /** @description APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required. */
                                apiGroup?: string;
                                /** @description Kind is the type of resource being referenced */
                                kind: string;
                                /** @description Name is the name of resource being referenced */
                                name: string;
                                /** @description Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled. */
                                namespace?: string;
                            };
                            /** @description resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources */
                            resources?: {
                                /** @description Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
                                 *      This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
                                 *      This field is immutable. It can only be set for containers. */
                                claims?: {
                                    /** @description Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container. */
                                    name: string;
                                }[];
                                /** @description Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ */
                                limits?: {
                                    [key: string]: number | string;
                                };
                                /** @description Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ */
                                requests?: {
                                    [key: string]: number | string;
                                };
                            };
                            /** @description selector is a label query over volumes to consider for binding. */
                            selector?: {
                                /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                                matchExpressions?: {
                                    /** @description key is the label key that the selector applies to. */
                                    key: string;
                                    /** @description operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. */
                                    operator: string;
                                    /** @description values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. */
                                    values?: string[];
                                }[];
                                /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed. */
                                matchLabels?: {
                                    [key: string]: string;
                                };
                            };
                            /** @description storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1 */
                            storageClassName?: string;
                            /** @description volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. */
                            volumeMode?: string;
                            /** @description volumeName is the binding reference to the PersistentVolume backing this claim. */
                            volumeName?: string;
                        };
                        /** @description Source is the src of the data for the requested DataVolume */
                        source?: {
                            /** @description DataVolumeBlankImage provides the parameters to create a new raw blank image for the PVC */
                            blank?: Record<string, never>;
                            /** @description DataVolumeSourceGCS provides the parameters to create a Data Volume from an GCS source */
                            gcs?: {
                                /** @description SecretRef provides the secret reference needed to access the GCS source */
                                secretRef?: string;
                                /** @description URL is the url of the GCS source */
                                url: string;
                            };
                            /** @description DataVolumeSourceHTTP can be either an http or https endpoint, with an optional basic auth user name and password, and an optional configmap containing additional CAs */
                            http?: {
                                /** @description CertConfigMap is a configmap reference, containing a Certificate Authority(CA) public key, and a base64 encoded pem certificate */
                                certConfigMap?: string;
                                /** @description ExtraHeaders is a list of strings containing extra headers to include with HTTP transfer requests */
                                extraHeaders?: string[];
                                /** @description SecretExtraHeaders is a list of Secret references, each containing an extra HTTP header that may include sensitive information */
                                secretExtraHeaders?: string[];
                                /** @description SecretRef A Secret reference, the secret should contain accessKeyId (user name) base64 encoded, and secretKey (password) also base64 encoded */
                                secretRef?: string;
                                /** @description URL is the URL of the http(s) endpoint */
                                url: string;
                            };
                            /** @description DataVolumeSourceImageIO provides the parameters to create a Data Volume from an imageio source */
                            imageio?: {
                                /** @description CertConfigMap provides a reference to the CA cert */
                                certConfigMap?: string;
                                /** @description DiskID provides id of a disk to be imported */
                                diskId: string;
                                /** @description SecretRef provides the secret reference needed to access the ovirt-engine */
                                secretRef?: string;
                                /** @description URL is the URL of the ovirt-engine */
                                url: string;
                            };
                            /** @description DataVolumeSourcePVC provides the parameters to create a Data Volume from an existing PVC */
                            pvc?: {
                                /** @description The name of the source PVC */
                                name: string;
                                /** @description The namespace of the source PVC */
                                namespace: string;
                            };
                            /** @description DataVolumeSourceRegistry provides the parameters to create a Data Volume from an registry source */
                            registry?: {
                                /** @description CertConfigMap provides a reference to the Registry certs */
                                certConfigMap?: string;
                                /** @description ImageStream is the name of image stream for import */
                                imageStream?: string;
                                /** @description PullMethod can be either "pod" (default import), or "node" (node docker cache based import) */
                                pullMethod?: string;
                                /** @description SecretRef provides the secret reference needed to access the Registry source */
                                secretRef?: string;
                                /** @description URL is the url of the registry source (starting with the scheme: docker, oci-archive) */
                                url?: string;
                            };
                            /** @description DataVolumeSourceS3 provides the parameters to create a Data Volume from an S3 source */
                            s3?: {
                                /** @description CertConfigMap is a configmap reference, containing a Certificate Authority(CA) public key, and a base64 encoded pem certificate */
                                certConfigMap?: string;
                                /** @description SecretRef provides the secret reference needed to access the S3 source */
                                secretRef?: string;
                                /** @description URL is the url of the S3 source */
                                url: string;
                            };
                            /** @description DataVolumeSourceSnapshot provides the parameters to create a Data Volume from an existing VolumeSnapshot */
                            snapshot?: {
                                /** @description The name of the source VolumeSnapshot */
                                name: string;
                                /** @description The namespace of the source VolumeSnapshot */
                                namespace: string;
                            };
                            /** @description DataVolumeSourceUpload provides the parameters to create a Data Volume by uploading the source */
                            upload?: Record<string, never>;
                            /** @description DataVolumeSourceVDDK provides the parameters to create a Data Volume from a Vmware source */
                            vddk?: {
                                /** @description BackingFile is the path to the virtual hard disk to migrate from vCenter/ESXi */
                                backingFile?: string;
                                /** @description InitImageURL is an optional URL to an image containing an extracted VDDK library, overrides v2v-vmware config map */
                                initImageURL?: string;
                                /** @description SecretRef provides a reference to a secret containing the username and password needed to access the vCenter or ESXi host */
                                secretRef?: string;
                                /** @description Thumbprint is the certificate thumbprint of the vCenter or ESXi host */
                                thumbprint?: string;
                                /** @description URL is the URL of the vCenter or ESXi host with the VM to migrate */
                                url?: string;
                                /** @description UUID is the UUID of the virtual machine that the backing file is attached to in vCenter/ESXi */
                                uuid?: string;
                            };
                        };
                        /** @description SourceRef is an indirect reference to the source of data for the requested DataVolume */
                        sourceRef?: {
                            /** @description The kind of the source reference, currently only "DataSource" is supported */
                            kind: string;
                            /** @description The name of the source reference */
                            name: string;
                            /** @description The namespace of the source reference, defaults to the DataVolume namespace */
                            namespace?: string;
                        };
                        /** @description Storage is the requested storage specification */
                        storage?: {
                            /** @description AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1 */
                            accessModes?: string[];
                            /** @description This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) * An existing custom resource that implements data population (Alpha) In order to use custom resource types that implement data population, the AnyVolumeDataSource feature gate must be enabled. If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field. */
                            dataSource?: {
                                /** @description APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required. */
                                apiGroup?: string;
                                /** @description Kind is the type of resource being referenced */
                                kind: string;
                                /** @description Name is the name of resource being referenced */
                                name: string;
                            };
                            /** @description Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. */
                            dataSourceRef?: {
                                /** @description APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required. */
                                apiGroup?: string;
                                /** @description Kind is the type of resource being referenced */
                                kind: string;
                                /** @description Name is the name of resource being referenced */
                                name: string;
                                /** @description Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled. */
                                namespace?: string;
                            };
                            /** @description Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources */
                            resources?: {
                                /** @description Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
                                 *      This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
                                 *      This field is immutable. It can only be set for containers. */
                                claims?: {
                                    /** @description Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container. */
                                    name: string;
                                }[];
                                /** @description Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ */
                                limits?: {
                                    [key: string]: number | string;
                                };
                                /** @description Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ */
                                requests?: {
                                    [key: string]: number | string;
                                };
                            };
                            /** @description A label query over volumes to consider for binding. */
                            selector?: {
                                /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                                matchExpressions?: {
                                    /** @description key is the label key that the selector applies to. */
                                    key: string;
                                    /** @description operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. */
                                    operator: string;
                                    /** @description values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. */
                                    values?: string[];
                                }[];
                                /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed. */
                                matchLabels?: {
                                    [key: string]: string;
                                };
                            };
                            /** @description Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1 */
                            storageClassName?: string;
                            /** @description volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. */
                            volumeMode?: string;
                            /** @description VolumeName is the binding reference to the PersistentVolume backing this claim. */
                            volumeName?: string;
                        };
                    };
                    /** @description DataVolumeTemplateDummyStatus is here simply for backwards compatibility with a previous API. */
                    status?: Record<string, never> | null;
                } | null)[];
                /** @description InstancetypeMatcher references a instancetype that is used to fill fields in Template */
                instancetype?: {
                    /** @description InferFromVolume lists the name of a volume that should be used to infer or discover the instancetype to be used through known annotations on the underlying resource. Once applied to the InstancetypeMatcher this field is removed. */
                    inferFromVolume?: string;
                    /** @description InferFromVolumeFailurePolicy controls what should happen on failure when inferring the instancetype. Allowed values are: "RejectInferFromVolumeFailure" and "IgnoreInferFromVolumeFailure". If not specified, "RejectInferFromVolumeFailure" is used by default. */
                    inferFromVolumeFailurePolicy?: string;
                    /** @description Kind specifies which instancetype resource is referenced. Allowed values are: "VirtualMachineInstancetype" and "VirtualMachineClusterInstancetype". If not specified, "VirtualMachineClusterInstancetype" is used by default. */
                    kind?: string;
                    /** @description Name is the name of the VirtualMachineInstancetype or VirtualMachineClusterInstancetype */
                    name?: string;
                    /** @description RevisionName specifies a ControllerRevision containing a specific copy of the VirtualMachineInstancetype or VirtualMachineClusterInstancetype to be used. This is initially captured the first time the instancetype is applied to the VirtualMachineInstance. */
                    revisionName?: string;
                };
                /** @description LiveUpdateFeatures references a configuration of hotpluggable resources */
                liveUpdateFeatures?: {
                    /** @description Affinity allows live updating the virtual machines node affinity */
                    affinity?: Record<string, never>;
                    /** @description LiveUpdateCPU holds hotplug configuration for the CPU resource. Empty struct indicates that default will be used for maxSockets. Default is specified on cluster level. Absence of the struct means opt-out from CPU hotplug functionality. */
                    cpu?: {
                        /**
                         * Format: int32
                         * @description The maximum amount of sockets that can be hot-plugged to the Virtual Machine
                         */
                        maxSockets?: number;
                    };
                    /** @description MemoryLiveUpdateConfiguration defines the live update memory features for the VirtualMachine */
                    memory?: {
                        /** @description MaxGuest defines the maximum amount memory that can be allocated for the VM. */
                        maxGuest?: number | string;
                    };
                };
                /** @description PreferenceMatcher references a set of preference that is used to fill fields in Template */
                preference?: {
                    /** @description InferFromVolume lists the name of a volume that should be used to infer or discover the preference to be used through known annotations on the underlying resource. Once applied to the PreferenceMatcher this field is removed. */
                    inferFromVolume?: string;
                    /** @description InferFromVolumeFailurePolicy controls what should happen on failure when preference the instancetype. Allowed values are: "RejectInferFromVolumeFailure" and "IgnoreInferFromVolumeFailure". If not specified, "RejectInferFromVolumeFailure" is used by default. */
                    inferFromVolumeFailurePolicy?: string;
                    /** @description Kind specifies which preference resource is referenced. Allowed values are: "VirtualMachinePreference" and "VirtualMachineClusterPreference". If not specified, "VirtualMachineClusterPreference" is used by default. */
                    kind?: string;
                    /** @description Name is the name of the VirtualMachinePreference or VirtualMachineClusterPreference */
                    name?: string;
                    /** @description RevisionName specifies a ControllerRevision containing a specific copy of the VirtualMachinePreference or VirtualMachineClusterPreference to be used. This is initially captured the first time the instancetype is applied to the VirtualMachineInstance. */
                    revisionName?: string;
                };
                /** @description Running state indicates the requested running state of the VirtualMachineInstance mutually exclusive with Running */
                runStrategy?: string;
                /** @description Running controls whether the associatied VirtualMachineInstance is created or not Mutually exclusive with RunStrategy */
                running?: boolean;
                /** @description Template is the direct specification of VirtualMachineInstance */
                template: {
                    metadata?: Record<string, any> | null;
                    /** @description VirtualMachineInstance Spec contains the VirtualMachineInstance specification. */
                    spec?: {
                        /** @description Specifies a set of public keys to inject into the vm guest */
                        accessCredentials?: {
                            /** @description SSHPublicKey represents the source and method of applying a ssh public key into a guest virtual machine. */
                            sshPublicKey?: {
                                /** @description PropagationMethod represents how the public key is injected into the vm guest. */
                                propagationMethod: {
                                    /** @description ConfigDrivePropagation means that the ssh public keys are injected into the VM using metadata using the configDrive cloud-init provider */
                                    configDrive?: Record<string, never>;
                                    /** @description NoCloudPropagation means that the ssh public keys are injected into the VM using metadata using the noCloud cloud-init provider */
                                    noCloud?: Record<string, never>;
                                    /** @description QemuGuestAgentAccessCredentailPropagation means ssh public keys are dynamically injected into the vm at runtime via the qemu guest agent. This feature requires the qemu guest agent to be running within the guest. */
                                    qemuGuestAgent?: {
                                        /** @description Users represents a list of guest users that should have the ssh public keys added to their authorized_keys file. */
                                        users: string[];
                                    };
                                };
                                /** @description Source represents where the public keys are pulled from */
                                source: {
                                    /** @description Secret means that the access credential is pulled from a kubernetes secret */
                                    secret?: {
                                        /** @description SecretName represents the name of the secret in the VMI's namespace */
                                        secretName: string;
                                    };
                                };
                            };
                            /** @description UserPassword represents the source and method for applying a guest user's password */
                            userPassword?: {
                                /** @description propagationMethod represents how the user passwords are injected into the vm guest. */
                                propagationMethod: {
                                    /** @description QemuGuestAgentAccessCredentailPropagation means passwords are dynamically injected into the vm at runtime via the qemu guest agent. This feature requires the qemu guest agent to be running within the guest. */
                                    qemuGuestAgent?: Record<string, never>;
                                };
                                /** @description Source represents where the user passwords are pulled from */
                                source: {
                                    /** @description Secret means that the access credential is pulled from a kubernetes secret */
                                    secret?: {
                                        /** @description SecretName represents the name of the secret in the VMI's namespace */
                                        secretName: string;
                                    };
                                };
                            };
                        }[];
                        /** @description If affinity is specifies, obey all the affinity rules */
                        affinity?: {
                            /** @description Describes node affinity scheduling rules for the pod. */
                            nodeAffinity?: {
                                /** @description The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred. */
                                preferredDuringSchedulingIgnoredDuringExecution?: {
                                    /** @description A node selector term, associated with the corresponding weight. */
                                    preference: {
                                        /** @description A list of node selector requirements by node's labels. */
                                        matchExpressions?: {
                                            /** @description The label key that the selector applies to. */
                                            key: string;
                                            /** @description Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt. */
                                            operator: string;
                                            /** @description An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch. */
                                            values?: string[];
                                        }[];
                                        /** @description A list of node selector requirements by node's fields. */
                                        matchFields?: {
                                            /** @description The label key that the selector applies to. */
                                            key: string;
                                            /** @description Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt. */
                                            operator: string;
                                            /** @description An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch. */
                                            values?: string[];
                                        }[];
                                    };
                                    /**
                                     * Format: int32
                                     * @description Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
                                     */
                                    weight: number;
                                }[];
                                /** @description If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node. */
                                requiredDuringSchedulingIgnoredDuringExecution?: {
                                    /** @description Required. A list of node selector terms. The terms are ORed. */
                                    nodeSelectorTerms: {
                                        /** @description A list of node selector requirements by node's labels. */
                                        matchExpressions?: {
                                            /** @description The label key that the selector applies to. */
                                            key: string;
                                            /** @description Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt. */
                                            operator: string;
                                            /** @description An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch. */
                                            values?: string[];
                                        }[];
                                        /** @description A list of node selector requirements by node's fields. */
                                        matchFields?: {
                                            /** @description The label key that the selector applies to. */
                                            key: string;
                                            /** @description Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt. */
                                            operator: string;
                                            /** @description An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch. */
                                            values?: string[];
                                        }[];
                                    }[];
                                };
                            };
                            /** @description Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)). */
                            podAffinity?: {
                                /** @description The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred. */
                                preferredDuringSchedulingIgnoredDuringExecution?: {
                                    /** @description Required. A pod affinity term, associated with the corresponding weight. */
                                    podAffinityTerm: {
                                        /** @description A label query over a set of resources, in this case pods. */
                                        labelSelector?: {
                                            /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                                            matchExpressions?: {
                                                /** @description key is the label key that the selector applies to. */
                                                key: string;
                                                /** @description operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. */
                                                operator: string;
                                                /** @description values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. */
                                                values?: string[];
                                            }[];
                                            /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed. */
                                            matchLabels?: {
                                                [key: string]: string;
                                            };
                                        };
                                        /** @description A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. */
                                        namespaceSelector?: {
                                            /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                                            matchExpressions?: {
                                                /** @description key is the label key that the selector applies to. */
                                                key: string;
                                                /** @description operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. */
                                                operator: string;
                                                /** @description values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. */
                                                values?: string[];
                                            }[];
                                            /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed. */
                                            matchLabels?: {
                                                [key: string]: string;
                                            };
                                        };
                                        /** @description namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace". */
                                        namespaces?: string[];
                                        /** @description This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed. */
                                        topologyKey: string;
                                    };
                                    /**
                                     * Format: int32
                                     * @description weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
                                     */
                                    weight: number;
                                }[];
                                /** @description If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. */
                                requiredDuringSchedulingIgnoredDuringExecution?: {
                                    /** @description A label query over a set of resources, in this case pods. */
                                    labelSelector?: {
                                        /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                                        matchExpressions?: {
                                            /** @description key is the label key that the selector applies to. */
                                            key: string;
                                            /** @description operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. */
                                            operator: string;
                                            /** @description values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. */
                                            values?: string[];
                                        }[];
                                        /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed. */
                                        matchLabels?: {
                                            [key: string]: string;
                                        };
                                    };
                                    /** @description A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. */
                                    namespaceSelector?: {
                                        /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                                        matchExpressions?: {
                                            /** @description key is the label key that the selector applies to. */
                                            key: string;
                                            /** @description operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. */
                                            operator: string;
                                            /** @description values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. */
                                            values?: string[];
                                        }[];
                                        /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed. */
                                        matchLabels?: {
                                            [key: string]: string;
                                        };
                                    };
                                    /** @description namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace". */
                                    namespaces?: string[];
                                    /** @description This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed. */
                                    topologyKey: string;
                                }[];
                            };
                            /** @description Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)). */
                            podAntiAffinity?: {
                                /** @description The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred. */
                                preferredDuringSchedulingIgnoredDuringExecution?: {
                                    /** @description Required. A pod affinity term, associated with the corresponding weight. */
                                    podAffinityTerm: {
                                        /** @description A label query over a set of resources, in this case pods. */
                                        labelSelector?: {
                                            /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                                            matchExpressions?: {
                                                /** @description key is the label key that the selector applies to. */
                                                key: string;
                                                /** @description operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. */
                                                operator: string;
                                                /** @description values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. */
                                                values?: string[];
                                            }[];
                                            /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed. */
                                            matchLabels?: {
                                                [key: string]: string;
                                            };
                                        };
                                        /** @description A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. */
                                        namespaceSelector?: {
                                            /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                                            matchExpressions?: {
                                                /** @description key is the label key that the selector applies to. */
                                                key: string;
                                                /** @description operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. */
                                                operator: string;
                                                /** @description values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. */
                                                values?: string[];
                                            }[];
                                            /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed. */
                                            matchLabels?: {
                                                [key: string]: string;
                                            };
                                        };
                                        /** @description namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace". */
                                        namespaces?: string[];
                                        /** @description This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed. */
                                        topologyKey: string;
                                    };
                                    /**
                                     * Format: int32
                                     * @description weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
                                     */
                                    weight: number;
                                }[];
                                /** @description If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. */
                                requiredDuringSchedulingIgnoredDuringExecution?: {
                                    /** @description A label query over a set of resources, in this case pods. */
                                    labelSelector?: {
                                        /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                                        matchExpressions?: {
                                            /** @description key is the label key that the selector applies to. */
                                            key: string;
                                            /** @description operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. */
                                            operator: string;
                                            /** @description values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. */
                                            values?: string[];
                                        }[];
                                        /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed. */
                                        matchLabels?: {
                                            [key: string]: string;
                                        };
                                    };
                                    /** @description A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. */
                                    namespaceSelector?: {
                                        /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                                        matchExpressions?: {
                                            /** @description key is the label key that the selector applies to. */
                                            key: string;
                                            /** @description operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. */
                                            operator: string;
                                            /** @description values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. */
                                            values?: string[];
                                        }[];
                                        /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed. */
                                        matchLabels?: {
                                            [key: string]: string;
                                        };
                                    };
                                    /** @description namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace". */
                                    namespaces?: string[];
                                    /** @description This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed. */
                                    topologyKey: string;
                                }[];
                            };
                        };
                        /** @description Specifies the architecture of the vm guest you are attempting to run. Defaults to the compiled architecture of the KubeVirt components */
                        architecture?: string;
                        /** @description Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy. */
                        dnsConfig?: {
                            /** @description A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed. */
                            nameservers?: string[];
                            /** @description A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy. */
                            options?: {
                                /** @description Required. */
                                name?: string;
                                value?: string;
                            }[];
                            /** @description A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed. */
                            searches?: string[];
                        };
                        /** @description Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'. */
                        dnsPolicy?: string;
                        /** @description Specification of the desired behavior of the VirtualMachineInstance on the host. */
                        domain: {
                            /** @description Chassis specifies the chassis info passed to the domain. */
                            chassis?: {
                                asset?: string;
                                manufacturer?: string;
                                serial?: string;
                                sku?: string;
                                version?: string;
                            };
                            /** @description Clock sets the clock and timers of the vmi. */
                            clock?: {
                                /** @description Timer specifies whih timers are attached to the vmi. */
                                timer?: {
                                    /** @description HPET (High Precision Event Timer) - multiple timers with periodic interrupts. */
                                    hpet?: {
                                        /** @description Enabled set to false makes sure that the machine type or a preset can't add the timer. Defaults to true. */
                                        present?: boolean;
                                        /** @description TickPolicy determines what happens when QEMU misses a deadline for injecting a tick to the guest. One of "delay", "catchup", "merge", "discard". */
                                        tickPolicy?: string;
                                    };
                                    /** @description Hyperv (Hypervclock) - lets guests read the host’s wall clock time (paravirtualized). For windows guests. */
                                    hyperv?: {
                                        /** @description Enabled set to false makes sure that the machine type or a preset can't add the timer. Defaults to true. */
                                        present?: boolean;
                                    };
                                    /** @description KVM 	(KVM clock) - lets guests read the host’s wall clock time (paravirtualized). For linux guests. */
                                    kvm?: {
                                        /** @description Enabled set to false makes sure that the machine type or a preset can't add the timer. Defaults to true. */
                                        present?: boolean;
                                    };
                                    /** @description PIT (Programmable Interval Timer) - a timer with periodic interrupts. */
                                    pit?: {
                                        /** @description Enabled set to false makes sure that the machine type or a preset can't add the timer. Defaults to true. */
                                        present?: boolean;
                                        /** @description TickPolicy determines what happens when QEMU misses a deadline for injecting a tick to the guest. One of "delay", "catchup", "discard". */
                                        tickPolicy?: string;
                                    };
                                    /** @description RTC (Real Time Clock) - a continuously running timer with periodic interrupts. */
                                    rtc?: {
                                        /** @description Enabled set to false makes sure that the machine type or a preset can't add the timer. Defaults to true. */
                                        present?: boolean;
                                        /** @description TickPolicy determines what happens when QEMU misses a deadline for injecting a tick to the guest. One of "delay", "catchup". */
                                        tickPolicy?: string;
                                        /** @description Track the guest or the wall clock. */
                                        track?: string;
                                    };
                                };
                                /** @description Timezone sets the guest clock to the specified timezone. Zone name follows the TZ environment variable format (e.g. 'America/New_York'). */
                                timezone?: string;
                                /** @description UTC sets the guest clock to UTC on each boot. If an offset is specified, guest changes to the clock will be kept during reboots and are not reset. */
                                utc?: {
                                    /** @description OffsetSeconds specifies an offset in seconds, relative to UTC. If set, guest changes to the clock will be kept during reboots and not reset. */
                                    offsetSeconds?: number;
                                };
                            };
                            /** @description CPU allow specified the detailed CPU topology inside the vmi. */
                            cpu?: {
                                /**
                                 * Format: int32
                                 * @description Cores specifies the number of cores inside the vmi. Must be a value greater or equal 1.
                                 */
                                cores?: number;
                                /** @description DedicatedCPUPlacement requests the scheduler to place the VirtualMachineInstance on a node with enough dedicated pCPUs and pin the vCPUs to it. */
                                dedicatedCpuPlacement?: boolean;
                                /** @description Features specifies the CPU features list inside the VMI. */
                                features?: {
                                    /** @description Name of the CPU feature */
                                    name: string;
                                    /** @description Policy is the CPU feature attribute which can have the following attributes: force    - The virtual CPU will claim the feature is supported regardless of it being supported by host CPU. require  - Guest creation will fail unless the feature is supported by the host CPU or the hypervisor is able to emulate it. optional - The feature will be supported by virtual CPU if and only if it is supported by host CPU. disable  - The feature will not be supported by virtual CPU. forbid   - Guest creation will fail if the feature is supported by host CPU. Defaults to require */
                                    policy?: string;
                                }[];
                                /** @description IsolateEmulatorThread requests one more dedicated pCPU to be allocated for the VMI to place the emulator thread on it. */
                                isolateEmulatorThread?: boolean;
                                /**
                                 * Format: int32
                                 * @description MaxSockets specifies the maximum amount of sockets that can be hotplugged
                                 */
                                maxSockets?: number;
                                /** @description Model specifies the CPU model inside the VMI. List of available models https://github.com/libvirt/libvirt/tree/master/src/cpu_map. It is possible to specify special cases like "host-passthrough" to get the same CPU as the node and "host-model" to get CPU closest to the node one. Defaults to host-model. */
                                model?: string;
                                /** @description NUMA allows specifying settings for the guest NUMA topology */
                                numa?: {
                                    /** @description GuestMappingPassthrough will create an efficient guest topology based on host CPUs exclusively assigned to a pod. The created topology ensures that memory and CPUs on the virtual numa nodes never cross boundaries of host numa nodes. */
                                    guestMappingPassthrough?: Record<string, never>;
                                };
                                /** @description Realtime instructs the virt-launcher to tune the VMI for lower latency, optional for real time workloads */
                                realtime?: {
                                    /** @description Mask defines the vcpu mask expression that defines which vcpus are used for realtime. Format matches libvirt's expressions. Example: "0-3,^1","0,2,3","2-3" */
                                    mask?: string;
                                };
                                /**
                                 * Format: int32
                                 * @description Sockets specifies the number of sockets inside the vmi. Must be a value greater or equal 1.
                                 */
                                sockets?: number;
                                /**
                                 * Format: int32
                                 * @description Threads specifies the number of threads inside the vmi. Must be a value greater or equal 1.
                                 */
                                threads?: number;
                            };
                            /** @description Devices allows adding disks, network interfaces, and others */
                            devices: {
                                /** @description Whether to attach the default graphics device or not. VNC will not be available if set to false. Defaults to true. */
                                autoattachGraphicsDevice?: boolean;
                                /** @description Whether to attach an Input Device. Defaults to false. */
                                autoattachInputDevice?: boolean;
                                /** @description Whether to attach the Memory balloon device with default period. Period can be adjusted in virt-config. Defaults to true. */
                                autoattachMemBalloon?: boolean;
                                /** @description Whether to attach a pod network interface. Defaults to true. */
                                autoattachPodInterface?: boolean;
                                /** @description Whether to attach the default virtio-serial console or not. Serial console access will not be available if set to false. Defaults to true. */
                                autoattachSerialConsole?: boolean;
                                /** @description Whether to attach the VSOCK CID to the VM or not. VSOCK access will be available if set to true. Defaults to false. */
                                autoattachVSOCK?: boolean;
                                /** @description Whether or not to enable virtio multi-queue for block devices. Defaults to false. */
                                blockMultiQueue?: boolean;
                                /** @description To configure and access client devices such as redirecting USB */
                                clientPassthrough?: Record<string, never>;
                                /** @description DisableHotplug disabled the ability to hotplug disks. */
                                disableHotplug?: boolean;
                                /** @description Disks describes disks, cdroms and luns which are connected to the vmi. */
                                disks?: {
                                    /** @description If specified, the virtual disk will be presented with the given block sizes. */
                                    blockSize?: {
                                        /** @description CustomBlockSize represents the desired logical and physical block size for a VM disk. */
                                        custom?: {
                                            logical: number;
                                            physical: number;
                                        };
                                        /** @description Represents if a feature is enabled or disabled. */
                                        matchVolume?: {
                                            /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                            enabled?: boolean;
                                        };
                                    };
                                    /** @description BootOrder is an integer value > 0, used to determine ordering of boot devices. Lower values take precedence. Each disk or interface that has a boot order must have a unique value. Disks without a boot order are not tried if a disk with a boot order exists. */
                                    bootOrder?: number;
                                    /** @description Cache specifies which kvm disk cache mode should be used. Supported values are: CacheNone, CacheWriteThrough. */
                                    cache?: string;
                                    /** @description Attach a volume as a cdrom to the vmi. */
                                    cdrom?: {
                                        /** @description Bus indicates the type of disk device to emulate. supported values: virtio, sata, scsi. */
                                        bus?: string;
                                        /** @description ReadOnly. Defaults to true. */
                                        readonly?: boolean;
                                        /** @description Tray indicates if the tray of the device is open or closed. Allowed values are "open" and "closed". Defaults to closed. */
                                        tray?: string;
                                    };
                                    /** @description dedicatedIOThread indicates this disk should have an exclusive IO Thread. Enabling this implies useIOThreads = true. Defaults to false. */
                                    dedicatedIOThread?: boolean;
                                    /** @description Attach a volume as a disk to the vmi. */
                                    disk?: {
                                        /** @description Bus indicates the type of disk device to emulate. supported values: virtio, sata, scsi, usb. */
                                        bus?: string;
                                        /** @description If specified, the virtual disk will be placed on the guests pci address with the specified PCI address. For example: 0000:81:01.10 */
                                        pciAddress?: string;
                                        /** @description ReadOnly. Defaults to false. */
                                        readonly?: boolean;
                                    };
                                    /** @description If specified, it can change the default error policy (stop) for the disk */
                                    errorPolicy?: string;
                                    /** @description IO specifies which QEMU disk IO mode should be used. Supported values are: native, default, threads. */
                                    io?: string;
                                    /** @description Attach a volume as a LUN to the vmi. */
                                    lun?: {
                                        /** @description Bus indicates the type of disk device to emulate. supported values: virtio, sata, scsi. */
                                        bus?: string;
                                        /** @description ReadOnly. Defaults to false. */
                                        readonly?: boolean;
                                        /** @description Reservation indicates if the disk needs to support the persistent reservation for the SCSI disk */
                                        reservation?: boolean;
                                    };
                                    /** @description Name is the device name */
                                    name: string;
                                    /** @description Serial provides the ability to specify a serial number for the disk device. */
                                    serial?: string;
                                    /** @description If specified the disk is made sharable and multiple write from different VMs are permitted */
                                    shareable?: boolean;
                                    /** @description If specified, disk address and its tag will be provided to the guest via config drive metadata */
                                    tag?: string;
                                }[];
                                /** @description DownwardMetrics creates a virtio serials for exposing the downward metrics to the vmi. */
                                downwardMetrics?: Record<string, never>;
                                /** @description Filesystems describes filesystem which is connected to the vmi. */
                                filesystems?: {
                                    /** @description Name is the device name */
                                    name: string;
                                    /** @description Virtiofs is supported */
                                    virtiofs: Record<string, never>;
                                }[];
                                /** @description Whether to attach a GPU device to the vmi. */
                                gpus?: {
                                    deviceName: string;
                                    /** @description Name of the GPU device as exposed by a device plugin */
                                    name: string;
                                    /** @description If specified, the virtual network interface address and its tag will be provided to the guest via config drive */
                                    tag?: string;
                                    virtualGPUOptions?: {
                                        display?: {
                                            /** @description Enabled determines if a display addapter backed by a vGPU should be enabled or disabled on the guest. Defaults to true. */
                                            enabled?: boolean;
                                            /** @description Enables a boot framebuffer, until the guest OS loads a real GPU driver Defaults to true. */
                                            ramFB?: {
                                                /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                                enabled?: boolean;
                                            };
                                        };
                                    };
                                }[];
                                /** @description Whether to attach a host device to the vmi. */
                                hostDevices?: {
                                    /** @description DeviceName is the resource name of the host device exposed by a device plugin */
                                    deviceName: string;
                                    name: string;
                                    /** @description If specified, the virtual network interface address and its tag will be provided to the guest via config drive */
                                    tag?: string;
                                }[];
                                /** @description Inputs describe input devices */
                                inputs?: {
                                    /** @description Bus indicates the bus of input device to emulate. Supported values: virtio, usb. */
                                    bus?: string;
                                    /** @description Name is the device name */
                                    name: string;
                                    /** @description Type indicated the type of input device. Supported values: tablet. */
                                    type: string;
                                }[];
                                /** @description Interfaces describe network interfaces which are added to the vmi. */
                                interfaces?: {
                                    /** @description If specified, the ACPI index is used to provide network interface device naming, that is stable across changes in PCI addresses assigned to the device. This value is required to be unique across all devices and be between 1 and (16*1024-1). */
                                    acpiIndex?: number;
                                    /** @description Binding specifies the binding plugin that will be used to connect the interface to the guest. It provides an alternative to InterfaceBindingMethod. version: 1alphav1 */
                                    binding?: {
                                        /** @description Name references to the binding name as denined in the kubevirt CR. version: 1alphav1 */
                                        name: string;
                                    };
                                    /** @description BootOrder is an integer value > 0, used to determine ordering of boot devices. Lower values take precedence. Each interface or disk that has a boot order must have a unique value. Interfaces without a boot order are not tried. */
                                    bootOrder?: number;
                                    /** @description InterfaceBridge connects to a given network via a linux bridge. */
                                    bridge?: Record<string, never>;
                                    /** @description If specified the network interface will pass additional DHCP options to the VMI */
                                    dhcpOptions?: {
                                        /** @description If specified will pass option 67 to interface's DHCP server */
                                        bootFileName?: string;
                                        /** @description If specified will pass the configured NTP server to the VM via DHCP option 042. */
                                        ntpServers?: string[];
                                        /** @description If specified will pass extra DHCP options for private use, range: 224-254 */
                                        privateOptions?: {
                                            /** @description Option is an Integer value from 224-254 Required. */
                                            option: number;
                                            /** @description Value is a String value for the Option provided Required. */
                                            value: string;
                                        }[];
                                        /** @description If specified will pass option 66 to interface's DHCP server */
                                        tftpServerName?: string;
                                    };
                                    /** @description Interface MAC address. For example: de:ad:00:00:be:af or DE-AD-00-00-BE-AF. */
                                    macAddress?: string;
                                    /** @description InterfaceMacvtap connects to a given network by extending the Kubernetes node's L2 networks via a macvtap interface. */
                                    macvtap?: Record<string, never>;
                                    /** @description InterfaceMasquerade connects to a given network using netfilter rules to nat the traffic. */
                                    masquerade?: Record<string, never>;
                                    /** @description Interface model. One of: e1000, e1000e, ne2k_pci, pcnet, rtl8139, virtio. Defaults to virtio. TODO:(ihar) switch to enums once opengen-api supports them. See: https://github.com/kubernetes/kube-openapi/issues/51 */
                                    model?: string;
                                    /** @description Logical name of the interface as well as a reference to the associated networks. Must match the Name of a Network. */
                                    name: string;
                                    /** @description InterfacePasst connects to a given network. */
                                    passt?: Record<string, never>;
                                    /** @description If specified, the virtual network interface will be placed on the guests pci address with the specified PCI address. For example: 0000:81:01.10 */
                                    pciAddress?: string;
                                    /** @description List of ports to be forwarded to the virtual machine. */
                                    ports?: {
                                        /** @description If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services. */
                                        name?: string;
                                        /**
                                         * Format: int32
                                         * @description Number of port to expose for the virtual machine. This must be a valid port number, 0 < x < 65536.
                                         */
                                        port: number;
                                        /** @description Protocol for port. Must be UDP or TCP. Defaults to "TCP". */
                                        protocol?: string;
                                    }[];
                                    /** @description InterfaceSlirp connects to a given network using QEMU user networking mode. */
                                    slirp?: Record<string, never>;
                                    /** @description InterfaceSRIOV connects to a given network by passing-through an SR-IOV PCI device via vfio. */
                                    sriov?: Record<string, never>;
                                    /** @description State represents the requested operational state of the interface. The (only) value supported is 'absent', expressing a request to remove the interface. */
                                    state?: string;
                                    /** @description If specified, the virtual network interface address and its tag will be provided to the guest via config drive */
                                    tag?: string;
                                }[];
                                /** @description Whether to log the auto-attached default serial console or not. Serial console logs will be collect to a file and then streamed from a named 'guest-console-log'. Not relevant if autoattachSerialConsole is disabled. Defaults to cluster wide setting on VirtualMachineOptions. */
                                logSerialConsole?: boolean;
                                /** @description If specified, virtual network interfaces configured with a virtio bus will also enable the vhost multiqueue feature for network devices. The number of queues created depends on additional factors of the VirtualMachineInstance, like the number of guest CPUs. */
                                networkInterfaceMultiqueue?: boolean;
                                /** @description Whether to have random number generator from host */
                                rng?: Record<string, never>;
                                /** @description Whether to emulate a sound device. */
                                sound?: {
                                    /** @description We only support ich9 or ac97. If SoundDevice is not set: No sound card is emulated. If SoundDevice is set but Model is not: ich9 */
                                    model?: string;
                                    /** @description User's defined name for this sound device */
                                    name: string;
                                };
                                /** @description Whether to emulate a TPM device. */
                                tpm?: {
                                    /** @description Persistent indicates the state of the TPM device should be kept accross reboots Defaults to false */
                                    persistent?: boolean;
                                };
                                /** @description Fall back to legacy virtio 0.9 support if virtio bus is selected on devices. This is helpful for old machines like CentOS6 or RHEL6 which do not understand virtio_non_transitional (virtio 1.0). */
                                useVirtioTransitional?: boolean;
                                /** @description Watchdog describes a watchdog device which can be added to the vmi. */
                                watchdog?: {
                                    /** @description i6300esb watchdog device. */
                                    i6300esb?: {
                                        /** @description The action to take. Valid values are poweroff, reset, shutdown. Defaults to reset. */
                                        action?: string;
                                    };
                                    /** @description Name of the watchdog. */
                                    name: string;
                                };
                            };
                            /** @description Features like acpi, apic, hyperv, smm. */
                            features?: {
                                /** @description ACPI enables/disables ACPI inside the guest. Defaults to enabled. */
                                acpi?: {
                                    /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                    enabled?: boolean;
                                };
                                /** @description Defaults to the machine type setting. */
                                apic?: {
                                    /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                    enabled?: boolean;
                                    /** @description EndOfInterrupt enables the end of interrupt notification in the guest. Defaults to false. */
                                    endOfInterrupt?: boolean;
                                };
                                /** @description Defaults to the machine type setting. */
                                hyperv?: {
                                    /** @description EVMCS Speeds up L2 vmexits, but disables other virtualization features. Requires vapic. Defaults to the machine type setting. */
                                    evmcs?: {
                                        /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                        enabled?: boolean;
                                    };
                                    /** @description Frequencies improves the TSC clock source handling for Hyper-V on KVM. Defaults to the machine type setting. */
                                    frequencies?: {
                                        /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                        enabled?: boolean;
                                    };
                                    /** @description IPI improves performances in overcommited environments. Requires vpindex. Defaults to the machine type setting. */
                                    ipi?: {
                                        /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                        enabled?: boolean;
                                    };
                                    /** @description Reenlightenment enables the notifications on TSC frequency changes. Defaults to the machine type setting. */
                                    reenlightenment?: {
                                        /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                        enabled?: boolean;
                                    };
                                    /** @description Relaxed instructs the guest OS to disable watchdog timeouts. Defaults to the machine type setting. */
                                    relaxed?: {
                                        /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                        enabled?: boolean;
                                    };
                                    /** @description Reset enables Hyperv reboot/reset for the vmi. Requires synic. Defaults to the machine type setting. */
                                    reset?: {
                                        /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                        enabled?: boolean;
                                    };
                                    /** @description Runtime improves the time accounting to improve scheduling in the guest. Defaults to the machine type setting. */
                                    runtime?: {
                                        /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                        enabled?: boolean;
                                    };
                                    /** @description Spinlocks allows to configure the spinlock retry attempts. */
                                    spinlocks?: {
                                        /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                        enabled?: boolean;
                                        /**
                                         * Format: int32
                                         * @description Retries indicates the number of retries. Must be a value greater or equal 4096. Defaults to 4096.
                                         */
                                        spinlocks?: number;
                                    };
                                    /** @description SyNIC enables the Synthetic Interrupt Controller. Defaults to the machine type setting. */
                                    synic?: {
                                        /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                        enabled?: boolean;
                                    };
                                    /** @description SyNICTimer enables Synthetic Interrupt Controller Timers, reducing CPU load. Defaults to the machine type setting. */
                                    synictimer?: {
                                        /** @description Represents if a feature is enabled or disabled. */
                                        direct?: {
                                            /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                            enabled?: boolean;
                                        };
                                        enabled?: boolean;
                                    };
                                    /** @description TLBFlush improves performances in overcommited environments. Requires vpindex. Defaults to the machine type setting. */
                                    tlbflush?: {
                                        /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                        enabled?: boolean;
                                    };
                                    /** @description VAPIC improves the paravirtualized handling of interrupts. Defaults to the machine type setting. */
                                    vapic?: {
                                        /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                        enabled?: boolean;
                                    };
                                    /** @description VendorID allows setting the hypervisor vendor id. Defaults to the machine type setting. */
                                    vendorid?: {
                                        /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                        enabled?: boolean;
                                        /** @description VendorID sets the hypervisor vendor id, visible to the vmi. String up to twelve characters. */
                                        vendorid?: string;
                                    };
                                    /** @description VPIndex enables the Virtual Processor Index to help windows identifying virtual processors. Defaults to the machine type setting. */
                                    vpindex?: {
                                        /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                        enabled?: boolean;
                                    };
                                };
                                /** @description Configure how KVM presence is exposed to the guest. */
                                kvm?: {
                                    /** @description Hide the KVM hypervisor from standard MSR based discovery. Defaults to false */
                                    hidden?: boolean;
                                };
                                /** @description Notify the guest that the host supports paravirtual spinlocks. For older kernels this feature should be explicitly disabled. */
                                pvspinlock?: {
                                    /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                    enabled?: boolean;
                                };
                                /** @description SMM enables/disables System Management Mode. TSEG not yet implemented. */
                                smm?: {
                                    /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                    enabled?: boolean;
                                };
                            };
                            /** @description Firmware. */
                            firmware?: {
                                /** @description Settings to control the bootloader that is used. */
                                bootloader?: {
                                    /** @description If set (default), BIOS will be used. */
                                    bios?: {
                                        /** @description If set, the BIOS output will be transmitted over serial */
                                        useSerial?: boolean;
                                    };
                                    /** @description If set, EFI will be used instead of BIOS. */
                                    efi?: {
                                        /** @description If set to true, Persistent will persist the EFI NVRAM across reboots. Defaults to false */
                                        persistent?: boolean;
                                        /** @description If set, SecureBoot will be enabled and the OVMF roms will be swapped for SecureBoot-enabled ones. Requires SMM to be enabled. Defaults to true */
                                        secureBoot?: boolean;
                                    };
                                };
                                /** @description Settings to set the kernel for booting. */
                                kernelBoot?: {
                                    /** @description Container defines the container that containes kernel artifacts */
                                    container?: {
                                        /** @description Image that contains initrd / kernel files. */
                                        image: string;
                                        /** @description Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images */
                                        imagePullPolicy?: string;
                                        /** @description ImagePullSecret is the name of the Docker registry secret required to pull the image. The secret must already exist. */
                                        imagePullSecret?: string;
                                        /** @description the fully-qualified path to the ramdisk image in the host OS */
                                        initrdPath?: string;
                                        /** @description The fully-qualified path to the kernel image in the host OS */
                                        kernelPath?: string;
                                    };
                                    /** @description Arguments to be passed to the kernel at boot time */
                                    kernelArgs?: string;
                                };
                                /** @description The system-serial-number in SMBIOS */
                                serial?: string;
                                /** @description UUID reported by the vmi bios. Defaults to a random generated uid. */
                                uuid?: string;
                            };
                            /** @description Controls whether or not disks will share IOThreads. Omitting IOThreadsPolicy disables use of IOThreads. One of: shared, auto */
                            ioThreadsPolicy?: string;
                            /** @description Launch Security setting of the vmi. */
                            launchSecurity?: {
                                /** @description AMD Secure Encrypted Virtualization (SEV). */
                                sev?: {
                                    /** @description If specified, run the attestation process for a vmi. */
                                    attestation?: Record<string, never>;
                                    /** @description Base64 encoded guest owner's Diffie-Hellman key. */
                                    dhCert?: string;
                                    /** @description Guest policy flags as defined in AMD SEV API specification. Note: due to security reasons it is not allowed to enable guest debugging. Therefore NoDebug flag is not exposed to users and is always true. */
                                    policy?: {
                                        /** @description SEV-ES is required. Defaults to false. */
                                        encryptedState?: boolean;
                                    };
                                    /** @description Base64 encoded session blob. */
                                    session?: string;
                                };
                            };
                            /** @description Machine type. */
                            machine?: {
                                /** @description QEMU machine type is the actual chipset of the VirtualMachineInstance. */
                                type?: string;
                            };
                            /** @description Memory allow specifying the VMI memory features. */
                            memory?: {
                                /** @description Guest allows to specifying the amount of memory which is visible inside the Guest OS. The Guest must lie between Requests and Limits from the resources section. Defaults to the requested memory in the resources section if not specified. */
                                guest?: number | string;
                                /** @description Hugepages allow to use hugepages for the VirtualMachineInstance instead of regular memory. */
                                hugepages?: {
                                    /** @description PageSize specifies the hugepage size, for x86_64 architecture valid values are 1Gi and 2Mi. */
                                    pageSize?: string;
                                };
                                /** @description MaxGuest allows to specify the maximum amount of memory which is visible inside the Guest OS. The delta between MaxGuest and Guest is the amount of memory that can be hot(un)plugged. */
                                maxGuest?: number | string;
                            };
                            /** @description Resources describes the Compute Resources required by this vmi. */
                            resources?: {
                                /** @description Limits describes the maximum amount of compute resources allowed. Valid resource keys are "memory" and "cpu". */
                                limits?: {
                                    [key: string]: number | string;
                                };
                                /** @description Don't ask the scheduler to take the guest-management overhead into account. Instead put the overhead only into the container's memory limit. This can lead to crashes if all memory is in use on a node. Defaults to false. */
                                overcommitGuestOverhead?: boolean;
                                /** @description Requests is a description of the initial vmi resources. Valid resource keys are "memory" and "cpu". */
                                requests?: {
                                    [key: string]: number | string;
                                };
                            };
                        };
                        /** @description EvictionStrategy can be set to "LiveMigrate" if the VirtualMachineInstance should be migrated instead of shut-off in case of a node drain. */
                        evictionStrategy?: string;
                        /** @description Specifies the hostname of the vmi If not specified, the hostname will be set to the name of the vmi, if dhcp or cloud-init is configured properly. */
                        hostname?: string;
                        /** @description Periodic probe of VirtualMachineInstance liveness. VirtualmachineInstances will be stopped if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes */
                        livenessProbe?: {
                            /** @description One and only one of the following should be specified. Exec specifies the action to take, it will be executed on the guest through the qemu-guest-agent. If the guest agent is not available, this probe will fail. */
                            exec?: {
                                /** @description Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy. */
                                command?: string[];
                            };
                            /**
                             * Format: int32
                             * @description Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
                             */
                            failureThreshold?: number;
                            /** @description GuestAgentPing contacts the qemu-guest-agent for availability checks. */
                            guestAgentPing?: Record<string, never>;
                            /** @description HTTPGet specifies the http request to perform. */
                            httpGet?: {
                                /** @description Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead. */
                                host?: string;
                                /** @description Custom headers to set in the request. HTTP allows repeated headers. */
                                httpHeaders?: {
                                    /** @description The header field name */
                                    name: string;
                                    /** @description The header field value */
                                    value: string;
                                }[];
                                /** @description Path to access on the HTTP server. */
                                path?: string;
                                /** @description Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. */
                                port: number | string;
                                /** @description Scheme to use for connecting to the host. Defaults to HTTP. */
                                scheme?: string;
                            };
                            /**
                             * Format: int32
                             * @description Number of seconds after the VirtualMachineInstance has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                             */
                            initialDelaySeconds?: number;
                            /**
                             * Format: int32
                             * @description How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
                             */
                            periodSeconds?: number;
                            /**
                             * Format: int32
                             * @description Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
                             */
                            successThreshold?: number;
                            /** @description TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook */
                            tcpSocket?: {
                                /** @description Optional: Host name to connect to, defaults to the pod IP. */
                                host?: string;
                                /** @description Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. */
                                port: number | string;
                            };
                            /**
                             * Format: int32
                             * @description Number of seconds after which the probe times out. For exec probes the timeout fails the probe but does not terminate the command running on the guest. This means a blocking command can result in an increasing load on the guest. A small buffer will be added to the resulting workload exec probe to compensate for delays caused by the qemu guest exec mechanism. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                             */
                            timeoutSeconds?: number;
                        };
                        /** @description List of networks that can be attached to a vm's virtual interface. */
                        networks?: {
                            /** @description Represents the multus cni network. */
                            multus?: {
                                /** @description Select the default network and add it to the multus-cni.io/default-network annotation. */
                                default?: boolean;
                                /** @description References to a NetworkAttachmentDefinition CRD object. Format: <networkName>, <namespace>/<networkName>. If namespace is not specified, VMI namespace is assumed. */
                                networkName: string;
                            };
                            /** @description Network name. Must be a DNS_LABEL and unique within the vm. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names */
                            name: string;
                            /** @description Represents the stock pod network interface. */
                            pod?: {
                                /** @description IPv6 CIDR for the vm network. Defaults to fd10:0:2::/120 if not specified. */
                                vmIPv6NetworkCIDR?: string;
                                /** @description CIDR for vm network. Default 10.0.2.0/24 if not specified. */
                                vmNetworkCIDR?: string;
                            };
                        }[];
                        /** @description NodeSelector is a selector which must be true for the vmi to fit on a node. Selector which must match a node's labels for the vmi to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/ */
                        nodeSelector?: {
                            [key: string]: string;
                        };
                        /** @description If specified, indicates the pod's priority. If not specified, the pod priority will be default or zero if there is no default. */
                        priorityClassName?: string;
                        /** @description Periodic probe of VirtualMachineInstance service readiness. VirtualmachineInstances will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes */
                        readinessProbe?: {
                            /** @description One and only one of the following should be specified. Exec specifies the action to take, it will be executed on the guest through the qemu-guest-agent. If the guest agent is not available, this probe will fail. */
                            exec?: {
                                /** @description Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy. */
                                command?: string[];
                            };
                            /**
                             * Format: int32
                             * @description Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
                             */
                            failureThreshold?: number;
                            /** @description GuestAgentPing contacts the qemu-guest-agent for availability checks. */
                            guestAgentPing?: Record<string, never>;
                            /** @description HTTPGet specifies the http request to perform. */
                            httpGet?: {
                                /** @description Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead. */
                                host?: string;
                                /** @description Custom headers to set in the request. HTTP allows repeated headers. */
                                httpHeaders?: {
                                    /** @description The header field name */
                                    name: string;
                                    /** @description The header field value */
                                    value: string;
                                }[];
                                /** @description Path to access on the HTTP server. */
                                path?: string;
                                /** @description Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. */
                                port: number | string;
                                /** @description Scheme to use for connecting to the host. Defaults to HTTP. */
                                scheme?: string;
                            };
                            /**
                             * Format: int32
                             * @description Number of seconds after the VirtualMachineInstance has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                             */
                            initialDelaySeconds?: number;
                            /**
                             * Format: int32
                             * @description How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
                             */
                            periodSeconds?: number;
                            /**
                             * Format: int32
                             * @description Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
                             */
                            successThreshold?: number;
                            /** @description TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook */
                            tcpSocket?: {
                                /** @description Optional: Host name to connect to, defaults to the pod IP. */
                                host?: string;
                                /** @description Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. */
                                port: number | string;
                            };
                            /**
                             * Format: int32
                             * @description Number of seconds after which the probe times out. For exec probes the timeout fails the probe but does not terminate the command running on the guest. This means a blocking command can result in an increasing load on the guest. A small buffer will be added to the resulting workload exec probe to compensate for delays caused by the qemu guest exec mechanism. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                             */
                            timeoutSeconds?: number;
                        };
                        /** @description If specified, the VMI will be dispatched by specified scheduler. If not specified, the VMI will be dispatched by default scheduler. */
                        schedulerName?: string;
                        /** @description StartStrategy can be set to "Paused" if Virtual Machine should be started in paused state. */
                        startStrategy?: string;
                        /** @description If specified, the fully qualified vmi hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the vmi will not have a domainname at all. The DNS entry will resolve to the vmi, no matter if the vmi itself can pick up a hostname. */
                        subdomain?: string;
                        /**
                         * Format: int64
                         * @description Grace period observed after signalling a VirtualMachineInstance to stop after which the VirtualMachineInstance is force terminated.
                         */
                        terminationGracePeriodSeconds?: number;
                        /** @description If toleration is specified, obey all the toleration rules. */
                        tolerations?: {
                            /** @description Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute. */
                            effect?: string;
                            /** @description Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys. */
                            key?: string;
                            /** @description Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category. */
                            operator?: string;
                            /**
                             * Format: int64
                             * @description TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
                             */
                            tolerationSeconds?: number;
                            /** @description Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string. */
                            value?: string;
                        }[];
                        /** @description TopologySpreadConstraints describes how a group of VMIs will be spread across a given topology domains. K8s scheduler will schedule VMI pods in a way which abides by the constraints. */
                        topologySpreadConstraints?: {
                            /** @description LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain. */
                            labelSelector?: {
                                /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                                matchExpressions?: {
                                    /** @description key is the label key that the selector applies to. */
                                    key: string;
                                    /** @description operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. */
                                    operator: string;
                                    /** @description values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. */
                                    values?: string[];
                                }[];
                                /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed. */
                                matchLabels?: {
                                    [key: string]: string;
                                };
                            };
                            /** @description MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector. */
                            matchLabelKeys?: string[];
                            /**
                             * Format: int32
                             * @description MaxSkew describes the degree to which pods may be unevenly distributed. When 'whenUnsatisfiable=DoNotSchedule', it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When 'whenUnsatisfiable=ScheduleAnyway', it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
                             */
                            maxSkew: number;
                            /**
                             * Format: int32
                             * @description MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
                             *      For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.
                             *      This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).
                             */
                            minDomains?: number;
                            /** @description NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
                             *      If this value is nil, the behavior is equivalent to the Honor policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag. */
                            nodeAffinityPolicy?: string;
                            /** @description NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.
                             *      If this value is nil, the behavior is equivalent to the Ignore policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag. */
                            nodeTaintsPolicy?: string;
                            /** @description TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It's a required field. */
                            topologyKey: string;
                            /** @description WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,   but giving higher precedence to topologies that would help reduce the   skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field. */
                            whenUnsatisfiable: string;
                        }[];
                        /** @description List of volumes that can be mounted by disks belonging to the vmi. */
                        volumes?: {
                            /** @description CloudInitConfigDrive represents a cloud-init Config Drive user-data source. The Config Drive data will be added as a disk to the vmi. A proper cloud-init installation is required inside the guest. More info: https://cloudinit.readthedocs.io/en/latest/topics/datasources/configdrive.html */
                            cloudInitConfigDrive?: {
                                /** @description NetworkData contains config drive inline cloud-init networkdata. */
                                networkData?: string;
                                /** @description NetworkDataBase64 contains config drive cloud-init networkdata as a base64 encoded string. */
                                networkDataBase64?: string;
                                /** @description NetworkDataSecretRef references a k8s secret that contains config drive networkdata. */
                                networkDataSecretRef?: {
                                    /** @description Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid? */
                                    name?: string;
                                };
                                /** @description UserDataSecretRef references a k8s secret that contains config drive userdata. */
                                secretRef?: {
                                    /** @description Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid? */
                                    name?: string;
                                };
                                /** @description UserData contains config drive inline cloud-init userdata. */
                                userData?: string;
                                /** @description UserDataBase64 contains config drive cloud-init userdata as a base64 encoded string. */
                                userDataBase64?: string;
                            };
                            /** @description CloudInitNoCloud represents a cloud-init NoCloud user-data source. The NoCloud data will be added as a disk to the vmi. A proper cloud-init installation is required inside the guest. More info: http://cloudinit.readthedocs.io/en/latest/topics/datasources/nocloud.html */
                            cloudInitNoCloud?: {
                                /** @description NetworkData contains NoCloud inline cloud-init networkdata. */
                                networkData?: string;
                                /** @description NetworkDataBase64 contains NoCloud cloud-init networkdata as a base64 encoded string. */
                                networkDataBase64?: string;
                                /** @description NetworkDataSecretRef references a k8s secret that contains NoCloud networkdata. */
                                networkDataSecretRef?: {
                                    /** @description Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid? */
                                    name?: string;
                                };
                                /** @description UserDataSecretRef references a k8s secret that contains NoCloud userdata. */
                                secretRef?: {
                                    /** @description Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid? */
                                    name?: string;
                                };
                                /** @description UserData contains NoCloud inline cloud-init userdata. */
                                userData?: string;
                                /** @description UserDataBase64 contains NoCloud cloud-init userdata as a base64 encoded string. */
                                userDataBase64?: string;
                            };
                            /** @description ConfigMapSource represents a reference to a ConfigMap in the same namespace. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/ */
                            configMap?: {
                                /** @description Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid? */
                                name?: string;
                                /** @description Specify whether the ConfigMap or it's keys must be defined */
                                optional?: boolean;
                                /** @description The volume label of the resulting disk inside the VMI. Different bootstrapping mechanisms require different values. Typical values are "cidata" (cloud-init), "config-2" (cloud-init) or "OEMDRV" (kickstart). */
                                volumeLabel?: string;
                            };
                            /** @description ContainerDisk references a docker image, embedding a qcow or raw disk. More info: https://kubevirt.gitbooks.io/user-guide/registry-disk.html */
                            containerDisk?: {
                                /** @description Image is the name of the image with the embedded disk. */
                                image: string;
                                /** @description Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images */
                                imagePullPolicy?: string;
                                /** @description ImagePullSecret is the name of the Docker registry secret required to pull the image. The secret must already exist. */
                                imagePullSecret?: string;
                                /** @description Path defines the path to disk file in the container */
                                path?: string;
                            };
                            /** @description DataVolume represents the dynamic creation a PVC for this volume as well as the process of populating that PVC with a disk image. */
                            dataVolume?: {
                                /** @description Hotpluggable indicates whether the volume can be hotplugged and hotunplugged. */
                                hotpluggable?: boolean;
                                /** @description Name of both the DataVolume and the PVC in the same namespace. After PVC population the DataVolume is garbage collected by default. */
                                name: string;
                            };
                            /** @description DownwardAPI represents downward API about the pod that should populate this volume */
                            downwardAPI?: {
                                /** @description Fields is a list of downward API volume file */
                                fields?: {
                                    /** @description Required: Selects a field of the pod: only annotations, labels, name and namespace are supported. */
                                    fieldRef?: {
                                        /** @description Version of the schema the FieldPath is written in terms of, defaults to "v1". */
                                        apiVersion?: string;
                                        /** @description Path of the field to select in the specified API version. */
                                        fieldPath: string;
                                    };
                                    /**
                                     * Format: int32
                                     * @description Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
                                     */
                                    mode?: number;
                                    /** @description Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..' */
                                    path: string;
                                    /** @description Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported. */
                                    resourceFieldRef?: {
                                        /** @description Container name: required for volumes, optional for env vars */
                                        containerName?: string;
                                        /** @description Specifies the output format of the exposed resources, defaults to "1" */
                                        divisor?: number | string;
                                        /** @description Required: resource to select */
                                        resource: string;
                                    };
                                }[];
                                /** @description The volume label of the resulting disk inside the VMI. Different bootstrapping mechanisms require different values. Typical values are "cidata" (cloud-init), "config-2" (cloud-init) or "OEMDRV" (kickstart). */
                                volumeLabel?: string;
                            };
                            /** @description DownwardMetrics adds a very small disk to VMIs which contains a limited view of host and guest metrics. The disk content is compatible with vhostmd (https://github.com/vhostmd/vhostmd) and vm-dump-metrics. */
                            downwardMetrics?: Record<string, never>;
                            /** @description EmptyDisk represents a temporary disk which shares the vmis lifecycle. More info: https://kubevirt.gitbooks.io/user-guide/disks-and-volumes.html */
                            emptyDisk?: {
                                /** @description Capacity of the sparse disk. */
                                capacity: number | string;
                            };
                            /** @description Ephemeral is a special volume source that "wraps" specified source and provides copy-on-write image on top of it. */
                            ephemeral?: {
                                /** @description PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. Directly attached to the vmi via qemu. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims */
                                persistentVolumeClaim?: {
                                    /** @description claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims */
                                    claimName: string;
                                    /** @description readOnly Will force the ReadOnly setting in VolumeMounts. Default false. */
                                    readOnly?: boolean;
                                };
                            };
                            /** @description HostDisk represents a disk created on the cluster level */
                            hostDisk?: {
                                /** @description Capacity of the sparse disk */
                                capacity?: number | string;
                                /** @description The path to HostDisk image located on the cluster */
                                path: string;
                                /** @description Shared indicate whether the path is shared between nodes */
                                shared?: boolean;
                                /** @description Contains information if disk.img exists or should be created allowed options are 'Disk' and 'DiskOrCreate' */
                                type: string;
                            };
                            /** @description MemoryDump is attached to the virt launcher and is populated with a memory dump of the vmi */
                            memoryDump?: {
                                /** @description claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims */
                                claimName: string;
                                /** @description Hotpluggable indicates whether the volume can be hotplugged and hotunplugged. */
                                hotpluggable?: boolean;
                                /** @description readOnly Will force the ReadOnly setting in VolumeMounts. Default false. */
                                readOnly?: boolean;
                            };
                            /** @description Volume's name. Must be a DNS_LABEL and unique within the vmi. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names */
                            name: string;
                            /** @description PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. Directly attached to the vmi via qemu. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims */
                            persistentVolumeClaim?: {
                                /** @description claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims */
                                claimName: string;
                                /** @description Hotpluggable indicates whether the volume can be hotplugged and hotunplugged. */
                                hotpluggable?: boolean;
                                /** @description readOnly Will force the ReadOnly setting in VolumeMounts. Default false. */
                                readOnly?: boolean;
                            };
                            /** @description SecretVolumeSource represents a reference to a secret data in the same namespace. More info: https://kubernetes.io/docs/concepts/configuration/secret/ */
                            secret?: {
                                /** @description Specify whether the Secret or it's keys must be defined */
                                optional?: boolean;
                                /** @description Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret */
                                secretName?: string;
                                /** @description The volume label of the resulting disk inside the VMI. Different bootstrapping mechanisms require different values. Typical values are "cidata" (cloud-init), "config-2" (cloud-init) or "OEMDRV" (kickstart). */
                                volumeLabel?: string;
                            };
                            /** @description ServiceAccountVolumeSource represents a reference to a service account. There can only be one volume of this type! More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/ */
                            serviceAccount?: {
                                /** @description Name of the service account in the pod's namespace to use. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/ */
                                serviceAccountName?: string;
                            };
                            /** @description Represents a Sysprep volume source. */
                            sysprep?: {
                                /** @description ConfigMap references a ConfigMap that contains Sysprep answer file named autounattend.xml that should be attached as disk of CDROM type. */
                                configMap?: {
                                    /** @description Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid? */
                                    name?: string;
                                };
                                /** @description Secret references a k8s Secret that contains Sysprep answer file named autounattend.xml that should be attached as disk of CDROM type. */
                                secret?: {
                                    /** @description Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid? */
                                    name?: string;
                                };
                            };
                        }[];
                    };
                };
            };
            /** @description Status holds the current state of the controller and brief information about its associated VirtualMachineInstance */
            status?: {
                /** @description Hold the state information of the VirtualMachine and its VirtualMachineInstance */
                conditions?: {
                    /** Format: date-time */
                    lastProbeTime?: string | null;
                    /** Format: date-time */
                    lastTransitionTime?: string | null;
                    message?: string;
                    reason?: string;
                    status: string;
                    type: string;
                }[];
                /** @description Created indicates if the virtual machine is created in the cluster */
                created?: boolean;
                /**
                 * Format: int64
                 * @description DesiredGeneration is the generation which is desired for the VMI. This will be used in comparisons with ObservedGeneration to understand when the VMI is out of sync. This will be changed at the same time as ObservedGeneration to remove errors which could occur if Generation is updated through an Update() before ObservedGeneration in Status.
                 */
                desiredGeneration?: number;
                /** @description MemoryDumpRequest tracks memory dump request phase and info of getting a memory dump to the given pvc */
                memoryDumpRequest?: {
                    /** @description ClaimName is the name of the pvc that will contain the memory dump */
                    claimName: string;
                    /**
                     * Format: date-time
                     * @description EndTimestamp represents the time the memory dump was completed
                     */
                    endTimestamp?: string;
                    /** @description FileName represents the name of the output file */
                    fileName?: string;
                    /** @description Message is a detailed message about failure of the memory dump */
                    message?: string;
                    /** @description Phase represents the memory dump phase */
                    phase: string;
                    /** @description Remove represents request of dissociating the memory dump pvc */
                    remove?: boolean;
                    /**
                     * Format: date-time
                     * @description StartTimestamp represents the time the memory dump started
                     */
                    startTimestamp?: string;
                } | null;
                /**
                 * Format: int64
                 * @description ObservedGeneration is the generation observed by the vmi when started.
                 */
                observedGeneration?: number;
                /** @description PrintableStatus is a human readable, high-level representation of the status of the virtual machine */
                printableStatus?: string;
                /** @description Ready indicates if the virtual machine is running and ready */
                ready?: boolean;
                /** @description RestoreInProgress is the name of the VirtualMachineRestore currently executing */
                restoreInProgress?: string;
                /** @description SnapshotInProgress is the name of the VirtualMachineSnapshot currently executing */
                snapshotInProgress?: string;
                /** @description StartFailure tracks consecutive VMI startup failures for the purposes of crash loop backoffs */
                startFailure?: {
                    consecutiveFailCount?: number;
                    /** @description UID is a type that holds unique ID values, including UUIDs.  Because we don't ONLY use UUIDs, this is an alias to string.  Being a type captures intent and helps make sure that UIDs and names do not get conflated. */
                    lastFailedVMIUID?: string;
                    /** Format: date-time */
                    retryAfterTimestamp?: string;
                } | null;
                /** @description StateChangeRequests indicates a list of actions that should be taken on a VMI e.g. stop a specific VMI then start a new one. */
                stateChangeRequests?: {
                    /** @description Indicates the type of action that is requested. e.g. Start or Stop */
                    action: string;
                    /** @description Provides additional data in order to perform the Action */
                    data?: {
                        [key: string]: string;
                    };
                    /** @description Indicates the UUID of an existing Virtual Machine Instance that this change request applies to -- if applicable */
                    uid?: string;
                }[];
                /** @description VolumeRequests indicates a list of volumes add or remove from the VMI template and hotplug on an active running VMI. */
                volumeRequests?: {
                    /** @description AddVolumeOptions when set indicates a volume should be added. The details within this field specify how to add the volume */
                    addVolumeOptions?: {
                        /** @description Disk represents the hotplug disk that will be plugged into the running VMI */
                        disk: {
                            /** @description If specified, the virtual disk will be presented with the given block sizes. */
                            blockSize?: {
                                /** @description CustomBlockSize represents the desired logical and physical block size for a VM disk. */
                                custom?: {
                                    logical: number;
                                    physical: number;
                                };
                                /** @description Represents if a feature is enabled or disabled. */
                                matchVolume?: {
                                    /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                    enabled?: boolean;
                                };
                            };
                            /** @description BootOrder is an integer value > 0, used to determine ordering of boot devices. Lower values take precedence. Each disk or interface that has a boot order must have a unique value. Disks without a boot order are not tried if a disk with a boot order exists. */
                            bootOrder?: number;
                            /** @description Cache specifies which kvm disk cache mode should be used. Supported values are: CacheNone, CacheWriteThrough. */
                            cache?: string;
                            /** @description Attach a volume as a cdrom to the vmi. */
                            cdrom?: {
                                /** @description Bus indicates the type of disk device to emulate. supported values: virtio, sata, scsi. */
                                bus?: string;
                                /** @description ReadOnly. Defaults to true. */
                                readonly?: boolean;
                                /** @description Tray indicates if the tray of the device is open or closed. Allowed values are "open" and "closed". Defaults to closed. */
                                tray?: string;
                            };
                            /** @description dedicatedIOThread indicates this disk should have an exclusive IO Thread. Enabling this implies useIOThreads = true. Defaults to false. */
                            dedicatedIOThread?: boolean;
                            /** @description Attach a volume as a disk to the vmi. */
                            disk?: {
                                /** @description Bus indicates the type of disk device to emulate. supported values: virtio, sata, scsi, usb. */
                                bus?: string;
                                /** @description If specified, the virtual disk will be placed on the guests pci address with the specified PCI address. For example: 0000:81:01.10 */
                                pciAddress?: string;
                                /** @description ReadOnly. Defaults to false. */
                                readonly?: boolean;
                            };
                            /** @description If specified, it can change the default error policy (stop) for the disk */
                            errorPolicy?: string;
                            /** @description IO specifies which QEMU disk IO mode should be used. Supported values are: native, default, threads. */
                            io?: string;
                            /** @description Attach a volume as a LUN to the vmi. */
                            lun?: {
                                /** @description Bus indicates the type of disk device to emulate. supported values: virtio, sata, scsi. */
                                bus?: string;
                                /** @description ReadOnly. Defaults to false. */
                                readonly?: boolean;
                                /** @description Reservation indicates if the disk needs to support the persistent reservation for the SCSI disk */
                                reservation?: boolean;
                            };
                            /** @description Name is the device name */
                            name: string;
                            /** @description Serial provides the ability to specify a serial number for the disk device. */
                            serial?: string;
                            /** @description If specified the disk is made sharable and multiple write from different VMs are permitted */
                            shareable?: boolean;
                            /** @description If specified, disk address and its tag will be provided to the guest via config drive metadata */
                            tag?: string;
                        };
                        /** @description When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed */
                        dryRun?: string[];
                        /** @description Name represents the name that will be used to map the disk to the corresponding volume. This overrides any name set inside the Disk struct itself. */
                        name: string;
                        /** @description VolumeSource represents the source of the volume to map to the disk. */
                        volumeSource: {
                            /** @description DataVolume represents the dynamic creation a PVC for this volume as well as the process of populating that PVC with a disk image. */
                            dataVolume?: {
                                /** @description Hotpluggable indicates whether the volume can be hotplugged and hotunplugged. */
                                hotpluggable?: boolean;
                                /** @description Name of both the DataVolume and the PVC in the same namespace. After PVC population the DataVolume is garbage collected by default. */
                                name: string;
                            };
                            /** @description PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. Directly attached to the vmi via qemu. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims */
                            persistentVolumeClaim?: {
                                /** @description claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims */
                                claimName: string;
                                /** @description Hotpluggable indicates whether the volume can be hotplugged and hotunplugged. */
                                hotpluggable?: boolean;
                                /** @description readOnly Will force the ReadOnly setting in VolumeMounts. Default false. */
                                readOnly?: boolean;
                            };
                        };
                    };
                    /** @description RemoveVolumeOptions when set indicates a volume should be removed. The details within this field specify how to add the volume */
                    removeVolumeOptions?: {
                        /** @description When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed */
                        dryRun?: string[];
                        /** @description Name represents the name that maps to both the disk and volume that should be removed */
                        name: string;
                    };
                }[];
                /** @description VolumeSnapshotStatuses indicates a list of statuses whether snapshotting is supported by each volume. */
                volumeSnapshotStatuses?: {
                    /** @description True if the volume supports snapshotting */
                    enabled: boolean;
                    /** @description Volume name */
                    name: string;
                    /** @description Empty if snapshotting is enabled, contains reason otherwise */
                    reason?: string;
                }[];
            };
        };
        /** @description VirtualMachine handles the VirtualMachines that are not running or are in a stopped state The VirtualMachine contains the template to create the VirtualMachineInstance. It also mirrors the running state of the created VirtualMachineInstance in its status. */
        v1alpha3VirtualMachine: {
            /** @description APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources */
            apiVersion?: string;
            /** @description Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds */
            kind?: string;
            metadata?: Record<string, any>;
            /** @description Spec contains the specification of VirtualMachineInstance created */
            spec: {
                /** @description dataVolumeTemplates is a list of dataVolumes that the VirtualMachineInstance template can reference. DataVolumes in this list are dynamically created for the VirtualMachine and are tied to the VirtualMachine's life-cycle. */
                dataVolumeTemplates?: ({
                    /** @description APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources */
                    apiVersion?: string;
                    /** @description Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds */
                    kind?: string;
                    metadata?: Record<string, any> | null;
                    /** @description DataVolumeSpec contains the DataVolume specification. */
                    spec: {
                        /** @description Checkpoints is a list of DataVolumeCheckpoints, representing stages in a multistage import. */
                        checkpoints?: {
                            /** @description Current is the identifier of the snapshot created for this checkpoint. */
                            current: string;
                            /** @description Previous is the identifier of the snapshot from the previous checkpoint. */
                            previous: string;
                        }[];
                        /**
                         * @description DataVolumeContentType options: "kubevirt", "archive"
                         * @enum {string}
                         */
                        contentType?: "kubevirt" | "archive";
                        /** @description FinalCheckpoint indicates whether the current DataVolumeCheckpoint is the final checkpoint. */
                        finalCheckpoint?: boolean;
                        /** @description Preallocation controls whether storage for DataVolumes should be allocated in advance. */
                        preallocation?: boolean;
                        /** @description PriorityClassName for Importer, Cloner and Uploader pod */
                        priorityClassName?: string;
                        /** @description PVC is the PVC specification */
                        pvc?: {
                            /** @description accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1 */
                            accessModes?: string[];
                            /** @description dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource. */
                            dataSource?: {
                                /** @description APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required. */
                                apiGroup?: string;
                                /** @description Kind is the type of resource being referenced */
                                kind: string;
                                /** @description Name is the name of resource being referenced */
                                name: string;
                            };
                            /** @description dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef   allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef   preserves all values, and generates an error if a disallowed value is   specified. * While dataSource only allows local objects, dataSourceRef allows objects   in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled. */
                            dataSourceRef?: {
                                /** @description APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required. */
                                apiGroup?: string;
                                /** @description Kind is the type of resource being referenced */
                                kind: string;
                                /** @description Name is the name of resource being referenced */
                                name: string;
                                /** @description Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled. */
                                namespace?: string;
                            };
                            /** @description resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources */
                            resources?: {
                                /** @description Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
                                 *      This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
                                 *      This field is immutable. It can only be set for containers. */
                                claims?: {
                                    /** @description Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container. */
                                    name: string;
                                }[];
                                /** @description Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ */
                                limits?: {
                                    [key: string]: number | string;
                                };
                                /** @description Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ */
                                requests?: {
                                    [key: string]: number | string;
                                };
                            };
                            /** @description selector is a label query over volumes to consider for binding. */
                            selector?: {
                                /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                                matchExpressions?: {
                                    /** @description key is the label key that the selector applies to. */
                                    key: string;
                                    /** @description operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. */
                                    operator: string;
                                    /** @description values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. */
                                    values?: string[];
                                }[];
                                /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed. */
                                matchLabels?: {
                                    [key: string]: string;
                                };
                            };
                            /** @description storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1 */
                            storageClassName?: string;
                            /** @description volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. */
                            volumeMode?: string;
                            /** @description volumeName is the binding reference to the PersistentVolume backing this claim. */
                            volumeName?: string;
                        };
                        /** @description Source is the src of the data for the requested DataVolume */
                        source?: {
                            /** @description DataVolumeBlankImage provides the parameters to create a new raw blank image for the PVC */
                            blank?: Record<string, never>;
                            /** @description DataVolumeSourceGCS provides the parameters to create a Data Volume from an GCS source */
                            gcs?: {
                                /** @description SecretRef provides the secret reference needed to access the GCS source */
                                secretRef?: string;
                                /** @description URL is the url of the GCS source */
                                url: string;
                            };
                            /** @description DataVolumeSourceHTTP can be either an http or https endpoint, with an optional basic auth user name and password, and an optional configmap containing additional CAs */
                            http?: {
                                /** @description CertConfigMap is a configmap reference, containing a Certificate Authority(CA) public key, and a base64 encoded pem certificate */
                                certConfigMap?: string;
                                /** @description ExtraHeaders is a list of strings containing extra headers to include with HTTP transfer requests */
                                extraHeaders?: string[];
                                /** @description SecretExtraHeaders is a list of Secret references, each containing an extra HTTP header that may include sensitive information */
                                secretExtraHeaders?: string[];
                                /** @description SecretRef A Secret reference, the secret should contain accessKeyId (user name) base64 encoded, and secretKey (password) also base64 encoded */
                                secretRef?: string;
                                /** @description URL is the URL of the http(s) endpoint */
                                url: string;
                            };
                            /** @description DataVolumeSourceImageIO provides the parameters to create a Data Volume from an imageio source */
                            imageio?: {
                                /** @description CertConfigMap provides a reference to the CA cert */
                                certConfigMap?: string;
                                /** @description DiskID provides id of a disk to be imported */
                                diskId: string;
                                /** @description SecretRef provides the secret reference needed to access the ovirt-engine */
                                secretRef?: string;
                                /** @description URL is the URL of the ovirt-engine */
                                url: string;
                            };
                            /** @description DataVolumeSourcePVC provides the parameters to create a Data Volume from an existing PVC */
                            pvc?: {
                                /** @description The name of the source PVC */
                                name: string;
                                /** @description The namespace of the source PVC */
                                namespace: string;
                            };
                            /** @description DataVolumeSourceRegistry provides the parameters to create a Data Volume from an registry source */
                            registry?: {
                                /** @description CertConfigMap provides a reference to the Registry certs */
                                certConfigMap?: string;
                                /** @description ImageStream is the name of image stream for import */
                                imageStream?: string;
                                /** @description PullMethod can be either "pod" (default import), or "node" (node docker cache based import) */
                                pullMethod?: string;
                                /** @description SecretRef provides the secret reference needed to access the Registry source */
                                secretRef?: string;
                                /** @description URL is the url of the registry source (starting with the scheme: docker, oci-archive) */
                                url?: string;
                            };
                            /** @description DataVolumeSourceS3 provides the parameters to create a Data Volume from an S3 source */
                            s3?: {
                                /** @description CertConfigMap is a configmap reference, containing a Certificate Authority(CA) public key, and a base64 encoded pem certificate */
                                certConfigMap?: string;
                                /** @description SecretRef provides the secret reference needed to access the S3 source */
                                secretRef?: string;
                                /** @description URL is the url of the S3 source */
                                url: string;
                            };
                            /** @description DataVolumeSourceSnapshot provides the parameters to create a Data Volume from an existing VolumeSnapshot */
                            snapshot?: {
                                /** @description The name of the source VolumeSnapshot */
                                name: string;
                                /** @description The namespace of the source VolumeSnapshot */
                                namespace: string;
                            };
                            /** @description DataVolumeSourceUpload provides the parameters to create a Data Volume by uploading the source */
                            upload?: Record<string, never>;
                            /** @description DataVolumeSourceVDDK provides the parameters to create a Data Volume from a Vmware source */
                            vddk?: {
                                /** @description BackingFile is the path to the virtual hard disk to migrate from vCenter/ESXi */
                                backingFile?: string;
                                /** @description InitImageURL is an optional URL to an image containing an extracted VDDK library, overrides v2v-vmware config map */
                                initImageURL?: string;
                                /** @description SecretRef provides a reference to a secret containing the username and password needed to access the vCenter or ESXi host */
                                secretRef?: string;
                                /** @description Thumbprint is the certificate thumbprint of the vCenter or ESXi host */
                                thumbprint?: string;
                                /** @description URL is the URL of the vCenter or ESXi host with the VM to migrate */
                                url?: string;
                                /** @description UUID is the UUID of the virtual machine that the backing file is attached to in vCenter/ESXi */
                                uuid?: string;
                            };
                        };
                        /** @description SourceRef is an indirect reference to the source of data for the requested DataVolume */
                        sourceRef?: {
                            /** @description The kind of the source reference, currently only "DataSource" is supported */
                            kind: string;
                            /** @description The name of the source reference */
                            name: string;
                            /** @description The namespace of the source reference, defaults to the DataVolume namespace */
                            namespace?: string;
                        };
                        /** @description Storage is the requested storage specification */
                        storage?: {
                            /** @description AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1 */
                            accessModes?: string[];
                            /** @description This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) * An existing custom resource that implements data population (Alpha) In order to use custom resource types that implement data population, the AnyVolumeDataSource feature gate must be enabled. If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field. */
                            dataSource?: {
                                /** @description APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required. */
                                apiGroup?: string;
                                /** @description Kind is the type of resource being referenced */
                                kind: string;
                                /** @description Name is the name of resource being referenced */
                                name: string;
                            };
                            /** @description Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. */
                            dataSourceRef?: {
                                /** @description APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required. */
                                apiGroup?: string;
                                /** @description Kind is the type of resource being referenced */
                                kind: string;
                                /** @description Name is the name of resource being referenced */
                                name: string;
                                /** @description Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled. */
                                namespace?: string;
                            };
                            /** @description Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources */
                            resources?: {
                                /** @description Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
                                 *      This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
                                 *      This field is immutable. It can only be set for containers. */
                                claims?: {
                                    /** @description Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container. */
                                    name: string;
                                }[];
                                /** @description Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ */
                                limits?: {
                                    [key: string]: number | string;
                                };
                                /** @description Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ */
                                requests?: {
                                    [key: string]: number | string;
                                };
                            };
                            /** @description A label query over volumes to consider for binding. */
                            selector?: {
                                /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                                matchExpressions?: {
                                    /** @description key is the label key that the selector applies to. */
                                    key: string;
                                    /** @description operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. */
                                    operator: string;
                                    /** @description values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. */
                                    values?: string[];
                                }[];
                                /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed. */
                                matchLabels?: {
                                    [key: string]: string;
                                };
                            };
                            /** @description Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1 */
                            storageClassName?: string;
                            /** @description volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. */
                            volumeMode?: string;
                            /** @description VolumeName is the binding reference to the PersistentVolume backing this claim. */
                            volumeName?: string;
                        };
                    };
                    /** @description DataVolumeTemplateDummyStatus is here simply for backwards compatibility with a previous API. */
                    status?: Record<string, never> | null;
                } | null)[];
                /** @description InstancetypeMatcher references a instancetype that is used to fill fields in Template */
                instancetype?: {
                    /** @description InferFromVolume lists the name of a volume that should be used to infer or discover the instancetype to be used through known annotations on the underlying resource. Once applied to the InstancetypeMatcher this field is removed. */
                    inferFromVolume?: string;
                    /** @description InferFromVolumeFailurePolicy controls what should happen on failure when inferring the instancetype. Allowed values are: "RejectInferFromVolumeFailure" and "IgnoreInferFromVolumeFailure". If not specified, "RejectInferFromVolumeFailure" is used by default. */
                    inferFromVolumeFailurePolicy?: string;
                    /** @description Kind specifies which instancetype resource is referenced. Allowed values are: "VirtualMachineInstancetype" and "VirtualMachineClusterInstancetype". If not specified, "VirtualMachineClusterInstancetype" is used by default. */
                    kind?: string;
                    /** @description Name is the name of the VirtualMachineInstancetype or VirtualMachineClusterInstancetype */
                    name?: string;
                    /** @description RevisionName specifies a ControllerRevision containing a specific copy of the VirtualMachineInstancetype or VirtualMachineClusterInstancetype to be used. This is initially captured the first time the instancetype is applied to the VirtualMachineInstance. */
                    revisionName?: string;
                };
                /** @description LiveUpdateFeatures references a configuration of hotpluggable resources */
                liveUpdateFeatures?: {
                    /** @description Affinity allows live updating the virtual machines node affinity */
                    affinity?: Record<string, never>;
                    /** @description LiveUpdateCPU holds hotplug configuration for the CPU resource. Empty struct indicates that default will be used for maxSockets. Default is specified on cluster level. Absence of the struct means opt-out from CPU hotplug functionality. */
                    cpu?: {
                        /**
                         * Format: int32
                         * @description The maximum amount of sockets that can be hot-plugged to the Virtual Machine
                         */
                        maxSockets?: number;
                    };
                    /** @description MemoryLiveUpdateConfiguration defines the live update memory features for the VirtualMachine */
                    memory?: {
                        /** @description MaxGuest defines the maximum amount memory that can be allocated for the VM. */
                        maxGuest?: number | string;
                    };
                };
                /** @description PreferenceMatcher references a set of preference that is used to fill fields in Template */
                preference?: {
                    /** @description InferFromVolume lists the name of a volume that should be used to infer or discover the preference to be used through known annotations on the underlying resource. Once applied to the PreferenceMatcher this field is removed. */
                    inferFromVolume?: string;
                    /** @description InferFromVolumeFailurePolicy controls what should happen on failure when preference the instancetype. Allowed values are: "RejectInferFromVolumeFailure" and "IgnoreInferFromVolumeFailure". If not specified, "RejectInferFromVolumeFailure" is used by default. */
                    inferFromVolumeFailurePolicy?: string;
                    /** @description Kind specifies which preference resource is referenced. Allowed values are: "VirtualMachinePreference" and "VirtualMachineClusterPreference". If not specified, "VirtualMachineClusterPreference" is used by default. */
                    kind?: string;
                    /** @description Name is the name of the VirtualMachinePreference or VirtualMachineClusterPreference */
                    name?: string;
                    /** @description RevisionName specifies a ControllerRevision containing a specific copy of the VirtualMachinePreference or VirtualMachineClusterPreference to be used. This is initially captured the first time the instancetype is applied to the VirtualMachineInstance. */
                    revisionName?: string;
                };
                /** @description Running state indicates the requested running state of the VirtualMachineInstance mutually exclusive with Running */
                runStrategy?: string;
                /** @description Running controls whether the associatied VirtualMachineInstance is created or not Mutually exclusive with RunStrategy */
                running?: boolean;
                /** @description Template is the direct specification of VirtualMachineInstance */
                template: {
                    metadata?: Record<string, any> | null;
                    /** @description VirtualMachineInstance Spec contains the VirtualMachineInstance specification. */
                    spec?: {
                        /** @description Specifies a set of public keys to inject into the vm guest */
                        accessCredentials?: {
                            /** @description SSHPublicKey represents the source and method of applying a ssh public key into a guest virtual machine. */
                            sshPublicKey?: {
                                /** @description PropagationMethod represents how the public key is injected into the vm guest. */
                                propagationMethod: {
                                    /** @description ConfigDrivePropagation means that the ssh public keys are injected into the VM using metadata using the configDrive cloud-init provider */
                                    configDrive?: Record<string, never>;
                                    /** @description NoCloudPropagation means that the ssh public keys are injected into the VM using metadata using the noCloud cloud-init provider */
                                    noCloud?: Record<string, never>;
                                    /** @description QemuGuestAgentAccessCredentailPropagation means ssh public keys are dynamically injected into the vm at runtime via the qemu guest agent. This feature requires the qemu guest agent to be running within the guest. */
                                    qemuGuestAgent?: {
                                        /** @description Users represents a list of guest users that should have the ssh public keys added to their authorized_keys file. */
                                        users: string[];
                                    };
                                };
                                /** @description Source represents where the public keys are pulled from */
                                source: {
                                    /** @description Secret means that the access credential is pulled from a kubernetes secret */
                                    secret?: {
                                        /** @description SecretName represents the name of the secret in the VMI's namespace */
                                        secretName: string;
                                    };
                                };
                            };
                            /** @description UserPassword represents the source and method for applying a guest user's password */
                            userPassword?: {
                                /** @description propagationMethod represents how the user passwords are injected into the vm guest. */
                                propagationMethod: {
                                    /** @description QemuGuestAgentAccessCredentailPropagation means passwords are dynamically injected into the vm at runtime via the qemu guest agent. This feature requires the qemu guest agent to be running within the guest. */
                                    qemuGuestAgent?: Record<string, never>;
                                };
                                /** @description Source represents where the user passwords are pulled from */
                                source: {
                                    /** @description Secret means that the access credential is pulled from a kubernetes secret */
                                    secret?: {
                                        /** @description SecretName represents the name of the secret in the VMI's namespace */
                                        secretName: string;
                                    };
                                };
                            };
                        }[];
                        /** @description If affinity is specifies, obey all the affinity rules */
                        affinity?: {
                            /** @description Describes node affinity scheduling rules for the pod. */
                            nodeAffinity?: {
                                /** @description The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred. */
                                preferredDuringSchedulingIgnoredDuringExecution?: {
                                    /** @description A node selector term, associated with the corresponding weight. */
                                    preference: {
                                        /** @description A list of node selector requirements by node's labels. */
                                        matchExpressions?: {
                                            /** @description The label key that the selector applies to. */
                                            key: string;
                                            /** @description Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt. */
                                            operator: string;
                                            /** @description An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch. */
                                            values?: string[];
                                        }[];
                                        /** @description A list of node selector requirements by node's fields. */
                                        matchFields?: {
                                            /** @description The label key that the selector applies to. */
                                            key: string;
                                            /** @description Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt. */
                                            operator: string;
                                            /** @description An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch. */
                                            values?: string[];
                                        }[];
                                    };
                                    /**
                                     * Format: int32
                                     * @description Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
                                     */
                                    weight: number;
                                }[];
                                /** @description If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node. */
                                requiredDuringSchedulingIgnoredDuringExecution?: {
                                    /** @description Required. A list of node selector terms. The terms are ORed. */
                                    nodeSelectorTerms: {
                                        /** @description A list of node selector requirements by node's labels. */
                                        matchExpressions?: {
                                            /** @description The label key that the selector applies to. */
                                            key: string;
                                            /** @description Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt. */
                                            operator: string;
                                            /** @description An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch. */
                                            values?: string[];
                                        }[];
                                        /** @description A list of node selector requirements by node's fields. */
                                        matchFields?: {
                                            /** @description The label key that the selector applies to. */
                                            key: string;
                                            /** @description Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt. */
                                            operator: string;
                                            /** @description An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch. */
                                            values?: string[];
                                        }[];
                                    }[];
                                };
                            };
                            /** @description Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)). */
                            podAffinity?: {
                                /** @description The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred. */
                                preferredDuringSchedulingIgnoredDuringExecution?: {
                                    /** @description Required. A pod affinity term, associated with the corresponding weight. */
                                    podAffinityTerm: {
                                        /** @description A label query over a set of resources, in this case pods. */
                                        labelSelector?: {
                                            /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                                            matchExpressions?: {
                                                /** @description key is the label key that the selector applies to. */
                                                key: string;
                                                /** @description operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. */
                                                operator: string;
                                                /** @description values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. */
                                                values?: string[];
                                            }[];
                                            /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed. */
                                            matchLabels?: {
                                                [key: string]: string;
                                            };
                                        };
                                        /** @description A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. */
                                        namespaceSelector?: {
                                            /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                                            matchExpressions?: {
                                                /** @description key is the label key that the selector applies to. */
                                                key: string;
                                                /** @description operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. */
                                                operator: string;
                                                /** @description values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. */
                                                values?: string[];
                                            }[];
                                            /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed. */
                                            matchLabels?: {
                                                [key: string]: string;
                                            };
                                        };
                                        /** @description namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace". */
                                        namespaces?: string[];
                                        /** @description This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed. */
                                        topologyKey: string;
                                    };
                                    /**
                                     * Format: int32
                                     * @description weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
                                     */
                                    weight: number;
                                }[];
                                /** @description If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. */
                                requiredDuringSchedulingIgnoredDuringExecution?: {
                                    /** @description A label query over a set of resources, in this case pods. */
                                    labelSelector?: {
                                        /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                                        matchExpressions?: {
                                            /** @description key is the label key that the selector applies to. */
                                            key: string;
                                            /** @description operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. */
                                            operator: string;
                                            /** @description values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. */
                                            values?: string[];
                                        }[];
                                        /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed. */
                                        matchLabels?: {
                                            [key: string]: string;
                                        };
                                    };
                                    /** @description A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. */
                                    namespaceSelector?: {
                                        /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                                        matchExpressions?: {
                                            /** @description key is the label key that the selector applies to. */
                                            key: string;
                                            /** @description operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. */
                                            operator: string;
                                            /** @description values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. */
                                            values?: string[];
                                        }[];
                                        /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed. */
                                        matchLabels?: {
                                            [key: string]: string;
                                        };
                                    };
                                    /** @description namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace". */
                                    namespaces?: string[];
                                    /** @description This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed. */
                                    topologyKey: string;
                                }[];
                            };
                            /** @description Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)). */
                            podAntiAffinity?: {
                                /** @description The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred. */
                                preferredDuringSchedulingIgnoredDuringExecution?: {
                                    /** @description Required. A pod affinity term, associated with the corresponding weight. */
                                    podAffinityTerm: {
                                        /** @description A label query over a set of resources, in this case pods. */
                                        labelSelector?: {
                                            /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                                            matchExpressions?: {
                                                /** @description key is the label key that the selector applies to. */
                                                key: string;
                                                /** @description operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. */
                                                operator: string;
                                                /** @description values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. */
                                                values?: string[];
                                            }[];
                                            /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed. */
                                            matchLabels?: {
                                                [key: string]: string;
                                            };
                                        };
                                        /** @description A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. */
                                        namespaceSelector?: {
                                            /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                                            matchExpressions?: {
                                                /** @description key is the label key that the selector applies to. */
                                                key: string;
                                                /** @description operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. */
                                                operator: string;
                                                /** @description values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. */
                                                values?: string[];
                                            }[];
                                            /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed. */
                                            matchLabels?: {
                                                [key: string]: string;
                                            };
                                        };
                                        /** @description namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace". */
                                        namespaces?: string[];
                                        /** @description This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed. */
                                        topologyKey: string;
                                    };
                                    /**
                                     * Format: int32
                                     * @description weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
                                     */
                                    weight: number;
                                }[];
                                /** @description If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. */
                                requiredDuringSchedulingIgnoredDuringExecution?: {
                                    /** @description A label query over a set of resources, in this case pods. */
                                    labelSelector?: {
                                        /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                                        matchExpressions?: {
                                            /** @description key is the label key that the selector applies to. */
                                            key: string;
                                            /** @description operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. */
                                            operator: string;
                                            /** @description values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. */
                                            values?: string[];
                                        }[];
                                        /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed. */
                                        matchLabels?: {
                                            [key: string]: string;
                                        };
                                    };
                                    /** @description A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. */
                                    namespaceSelector?: {
                                        /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                                        matchExpressions?: {
                                            /** @description key is the label key that the selector applies to. */
                                            key: string;
                                            /** @description operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. */
                                            operator: string;
                                            /** @description values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. */
                                            values?: string[];
                                        }[];
                                        /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed. */
                                        matchLabels?: {
                                            [key: string]: string;
                                        };
                                    };
                                    /** @description namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace". */
                                    namespaces?: string[];
                                    /** @description This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed. */
                                    topologyKey: string;
                                }[];
                            };
                        };
                        /** @description Specifies the architecture of the vm guest you are attempting to run. Defaults to the compiled architecture of the KubeVirt components */
                        architecture?: string;
                        /** @description Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy. */
                        dnsConfig?: {
                            /** @description A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed. */
                            nameservers?: string[];
                            /** @description A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy. */
                            options?: {
                                /** @description Required. */
                                name?: string;
                                value?: string;
                            }[];
                            /** @description A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed. */
                            searches?: string[];
                        };
                        /** @description Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'. */
                        dnsPolicy?: string;
                        /** @description Specification of the desired behavior of the VirtualMachineInstance on the host. */
                        domain: {
                            /** @description Chassis specifies the chassis info passed to the domain. */
                            chassis?: {
                                asset?: string;
                                manufacturer?: string;
                                serial?: string;
                                sku?: string;
                                version?: string;
                            };
                            /** @description Clock sets the clock and timers of the vmi. */
                            clock?: {
                                /** @description Timer specifies whih timers are attached to the vmi. */
                                timer?: {
                                    /** @description HPET (High Precision Event Timer) - multiple timers with periodic interrupts. */
                                    hpet?: {
                                        /** @description Enabled set to false makes sure that the machine type or a preset can't add the timer. Defaults to true. */
                                        present?: boolean;
                                        /** @description TickPolicy determines what happens when QEMU misses a deadline for injecting a tick to the guest. One of "delay", "catchup", "merge", "discard". */
                                        tickPolicy?: string;
                                    };
                                    /** @description Hyperv (Hypervclock) - lets guests read the host’s wall clock time (paravirtualized). For windows guests. */
                                    hyperv?: {
                                        /** @description Enabled set to false makes sure that the machine type or a preset can't add the timer. Defaults to true. */
                                        present?: boolean;
                                    };
                                    /** @description KVM 	(KVM clock) - lets guests read the host’s wall clock time (paravirtualized). For linux guests. */
                                    kvm?: {
                                        /** @description Enabled set to false makes sure that the machine type or a preset can't add the timer. Defaults to true. */
                                        present?: boolean;
                                    };
                                    /** @description PIT (Programmable Interval Timer) - a timer with periodic interrupts. */
                                    pit?: {
                                        /** @description Enabled set to false makes sure that the machine type or a preset can't add the timer. Defaults to true. */
                                        present?: boolean;
                                        /** @description TickPolicy determines what happens when QEMU misses a deadline for injecting a tick to the guest. One of "delay", "catchup", "discard". */
                                        tickPolicy?: string;
                                    };
                                    /** @description RTC (Real Time Clock) - a continuously running timer with periodic interrupts. */
                                    rtc?: {
                                        /** @description Enabled set to false makes sure that the machine type or a preset can't add the timer. Defaults to true. */
                                        present?: boolean;
                                        /** @description TickPolicy determines what happens when QEMU misses a deadline for injecting a tick to the guest. One of "delay", "catchup". */
                                        tickPolicy?: string;
                                        /** @description Track the guest or the wall clock. */
                                        track?: string;
                                    };
                                };
                                /** @description Timezone sets the guest clock to the specified timezone. Zone name follows the TZ environment variable format (e.g. 'America/New_York'). */
                                timezone?: string;
                                /** @description UTC sets the guest clock to UTC on each boot. If an offset is specified, guest changes to the clock will be kept during reboots and are not reset. */
                                utc?: {
                                    /** @description OffsetSeconds specifies an offset in seconds, relative to UTC. If set, guest changes to the clock will be kept during reboots and not reset. */
                                    offsetSeconds?: number;
                                };
                            };
                            /** @description CPU allow specified the detailed CPU topology inside the vmi. */
                            cpu?: {
                                /**
                                 * Format: int32
                                 * @description Cores specifies the number of cores inside the vmi. Must be a value greater or equal 1.
                                 */
                                cores?: number;
                                /** @description DedicatedCPUPlacement requests the scheduler to place the VirtualMachineInstance on a node with enough dedicated pCPUs and pin the vCPUs to it. */
                                dedicatedCpuPlacement?: boolean;
                                /** @description Features specifies the CPU features list inside the VMI. */
                                features?: {
                                    /** @description Name of the CPU feature */
                                    name: string;
                                    /** @description Policy is the CPU feature attribute which can have the following attributes: force    - The virtual CPU will claim the feature is supported regardless of it being supported by host CPU. require  - Guest creation will fail unless the feature is supported by the host CPU or the hypervisor is able to emulate it. optional - The feature will be supported by virtual CPU if and only if it is supported by host CPU. disable  - The feature will not be supported by virtual CPU. forbid   - Guest creation will fail if the feature is supported by host CPU. Defaults to require */
                                    policy?: string;
                                }[];
                                /** @description IsolateEmulatorThread requests one more dedicated pCPU to be allocated for the VMI to place the emulator thread on it. */
                                isolateEmulatorThread?: boolean;
                                /**
                                 * Format: int32
                                 * @description MaxSockets specifies the maximum amount of sockets that can be hotplugged
                                 */
                                maxSockets?: number;
                                /** @description Model specifies the CPU model inside the VMI. List of available models https://github.com/libvirt/libvirt/tree/master/src/cpu_map. It is possible to specify special cases like "host-passthrough" to get the same CPU as the node and "host-model" to get CPU closest to the node one. Defaults to host-model. */
                                model?: string;
                                /** @description NUMA allows specifying settings for the guest NUMA topology */
                                numa?: {
                                    /** @description GuestMappingPassthrough will create an efficient guest topology based on host CPUs exclusively assigned to a pod. The created topology ensures that memory and CPUs on the virtual numa nodes never cross boundaries of host numa nodes. */
                                    guestMappingPassthrough?: Record<string, never>;
                                };
                                /** @description Realtime instructs the virt-launcher to tune the VMI for lower latency, optional for real time workloads */
                                realtime?: {
                                    /** @description Mask defines the vcpu mask expression that defines which vcpus are used for realtime. Format matches libvirt's expressions. Example: "0-3,^1","0,2,3","2-3" */
                                    mask?: string;
                                };
                                /**
                                 * Format: int32
                                 * @description Sockets specifies the number of sockets inside the vmi. Must be a value greater or equal 1.
                                 */
                                sockets?: number;
                                /**
                                 * Format: int32
                                 * @description Threads specifies the number of threads inside the vmi. Must be a value greater or equal 1.
                                 */
                                threads?: number;
                            };
                            /** @description Devices allows adding disks, network interfaces, and others */
                            devices: {
                                /** @description Whether to attach the default graphics device or not. VNC will not be available if set to false. Defaults to true. */
                                autoattachGraphicsDevice?: boolean;
                                /** @description Whether to attach an Input Device. Defaults to false. */
                                autoattachInputDevice?: boolean;
                                /** @description Whether to attach the Memory balloon device with default period. Period can be adjusted in virt-config. Defaults to true. */
                                autoattachMemBalloon?: boolean;
                                /** @description Whether to attach a pod network interface. Defaults to true. */
                                autoattachPodInterface?: boolean;
                                /** @description Whether to attach the default virtio-serial console or not. Serial console access will not be available if set to false. Defaults to true. */
                                autoattachSerialConsole?: boolean;
                                /** @description Whether to attach the VSOCK CID to the VM or not. VSOCK access will be available if set to true. Defaults to false. */
                                autoattachVSOCK?: boolean;
                                /** @description Whether or not to enable virtio multi-queue for block devices. Defaults to false. */
                                blockMultiQueue?: boolean;
                                /** @description To configure and access client devices such as redirecting USB */
                                clientPassthrough?: Record<string, never>;
                                /** @description DisableHotplug disabled the ability to hotplug disks. */
                                disableHotplug?: boolean;
                                /** @description Disks describes disks, cdroms and luns which are connected to the vmi. */
                                disks?: {
                                    /** @description If specified, the virtual disk will be presented with the given block sizes. */
                                    blockSize?: {
                                        /** @description CustomBlockSize represents the desired logical and physical block size for a VM disk. */
                                        custom?: {
                                            logical: number;
                                            physical: number;
                                        };
                                        /** @description Represents if a feature is enabled or disabled. */
                                        matchVolume?: {
                                            /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                            enabled?: boolean;
                                        };
                                    };
                                    /** @description BootOrder is an integer value > 0, used to determine ordering of boot devices. Lower values take precedence. Each disk or interface that has a boot order must have a unique value. Disks without a boot order are not tried if a disk with a boot order exists. */
                                    bootOrder?: number;
                                    /** @description Cache specifies which kvm disk cache mode should be used. Supported values are: CacheNone, CacheWriteThrough. */
                                    cache?: string;
                                    /** @description Attach a volume as a cdrom to the vmi. */
                                    cdrom?: {
                                        /** @description Bus indicates the type of disk device to emulate. supported values: virtio, sata, scsi. */
                                        bus?: string;
                                        /** @description ReadOnly. Defaults to true. */
                                        readonly?: boolean;
                                        /** @description Tray indicates if the tray of the device is open or closed. Allowed values are "open" and "closed". Defaults to closed. */
                                        tray?: string;
                                    };
                                    /** @description dedicatedIOThread indicates this disk should have an exclusive IO Thread. Enabling this implies useIOThreads = true. Defaults to false. */
                                    dedicatedIOThread?: boolean;
                                    /** @description Attach a volume as a disk to the vmi. */
                                    disk?: {
                                        /** @description Bus indicates the type of disk device to emulate. supported values: virtio, sata, scsi, usb. */
                                        bus?: string;
                                        /** @description If specified, the virtual disk will be placed on the guests pci address with the specified PCI address. For example: 0000:81:01.10 */
                                        pciAddress?: string;
                                        /** @description ReadOnly. Defaults to false. */
                                        readonly?: boolean;
                                    };
                                    /** @description If specified, it can change the default error policy (stop) for the disk */
                                    errorPolicy?: string;
                                    /** @description IO specifies which QEMU disk IO mode should be used. Supported values are: native, default, threads. */
                                    io?: string;
                                    /** @description Attach a volume as a LUN to the vmi. */
                                    lun?: {
                                        /** @description Bus indicates the type of disk device to emulate. supported values: virtio, sata, scsi. */
                                        bus?: string;
                                        /** @description ReadOnly. Defaults to false. */
                                        readonly?: boolean;
                                        /** @description Reservation indicates if the disk needs to support the persistent reservation for the SCSI disk */
                                        reservation?: boolean;
                                    };
                                    /** @description Name is the device name */
                                    name: string;
                                    /** @description Serial provides the ability to specify a serial number for the disk device. */
                                    serial?: string;
                                    /** @description If specified the disk is made sharable and multiple write from different VMs are permitted */
                                    shareable?: boolean;
                                    /** @description If specified, disk address and its tag will be provided to the guest via config drive metadata */
                                    tag?: string;
                                }[];
                                /** @description DownwardMetrics creates a virtio serials for exposing the downward metrics to the vmi. */
                                downwardMetrics?: Record<string, never>;
                                /** @description Filesystems describes filesystem which is connected to the vmi. */
                                filesystems?: {
                                    /** @description Name is the device name */
                                    name: string;
                                    /** @description Virtiofs is supported */
                                    virtiofs: Record<string, never>;
                                }[];
                                /** @description Whether to attach a GPU device to the vmi. */
                                gpus?: {
                                    deviceName: string;
                                    /** @description Name of the GPU device as exposed by a device plugin */
                                    name: string;
                                    /** @description If specified, the virtual network interface address and its tag will be provided to the guest via config drive */
                                    tag?: string;
                                    virtualGPUOptions?: {
                                        display?: {
                                            /** @description Enabled determines if a display addapter backed by a vGPU should be enabled or disabled on the guest. Defaults to true. */
                                            enabled?: boolean;
                                            /** @description Enables a boot framebuffer, until the guest OS loads a real GPU driver Defaults to true. */
                                            ramFB?: {
                                                /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                                enabled?: boolean;
                                            };
                                        };
                                    };
                                }[];
                                /** @description Whether to attach a host device to the vmi. */
                                hostDevices?: {
                                    /** @description DeviceName is the resource name of the host device exposed by a device plugin */
                                    deviceName: string;
                                    name: string;
                                    /** @description If specified, the virtual network interface address and its tag will be provided to the guest via config drive */
                                    tag?: string;
                                }[];
                                /** @description Inputs describe input devices */
                                inputs?: {
                                    /** @description Bus indicates the bus of input device to emulate. Supported values: virtio, usb. */
                                    bus?: string;
                                    /** @description Name is the device name */
                                    name: string;
                                    /** @description Type indicated the type of input device. Supported values: tablet. */
                                    type: string;
                                }[];
                                /** @description Interfaces describe network interfaces which are added to the vmi. */
                                interfaces?: {
                                    /** @description If specified, the ACPI index is used to provide network interface device naming, that is stable across changes in PCI addresses assigned to the device. This value is required to be unique across all devices and be between 1 and (16*1024-1). */
                                    acpiIndex?: number;
                                    /** @description Binding specifies the binding plugin that will be used to connect the interface to the guest. It provides an alternative to InterfaceBindingMethod. version: 1alphav1 */
                                    binding?: {
                                        /** @description Name references to the binding name as denined in the kubevirt CR. version: 1alphav1 */
                                        name: string;
                                    };
                                    /** @description BootOrder is an integer value > 0, used to determine ordering of boot devices. Lower values take precedence. Each interface or disk that has a boot order must have a unique value. Interfaces without a boot order are not tried. */
                                    bootOrder?: number;
                                    /** @description InterfaceBridge connects to a given network via a linux bridge. */
                                    bridge?: Record<string, never>;
                                    /** @description If specified the network interface will pass additional DHCP options to the VMI */
                                    dhcpOptions?: {
                                        /** @description If specified will pass option 67 to interface's DHCP server */
                                        bootFileName?: string;
                                        /** @description If specified will pass the configured NTP server to the VM via DHCP option 042. */
                                        ntpServers?: string[];
                                        /** @description If specified will pass extra DHCP options for private use, range: 224-254 */
                                        privateOptions?: {
                                            /** @description Option is an Integer value from 224-254 Required. */
                                            option: number;
                                            /** @description Value is a String value for the Option provided Required. */
                                            value: string;
                                        }[];
                                        /** @description If specified will pass option 66 to interface's DHCP server */
                                        tftpServerName?: string;
                                    };
                                    /** @description Interface MAC address. For example: de:ad:00:00:be:af or DE-AD-00-00-BE-AF. */
                                    macAddress?: string;
                                    /** @description InterfaceMacvtap connects to a given network by extending the Kubernetes node's L2 networks via a macvtap interface. */
                                    macvtap?: Record<string, never>;
                                    /** @description InterfaceMasquerade connects to a given network using netfilter rules to nat the traffic. */
                                    masquerade?: Record<string, never>;
                                    /** @description Interface model. One of: e1000, e1000e, ne2k_pci, pcnet, rtl8139, virtio. Defaults to virtio. TODO:(ihar) switch to enums once opengen-api supports them. See: https://github.com/kubernetes/kube-openapi/issues/51 */
                                    model?: string;
                                    /** @description Logical name of the interface as well as a reference to the associated networks. Must match the Name of a Network. */
                                    name: string;
                                    /** @description InterfacePasst connects to a given network. */
                                    passt?: Record<string, never>;
                                    /** @description If specified, the virtual network interface will be placed on the guests pci address with the specified PCI address. For example: 0000:81:01.10 */
                                    pciAddress?: string;
                                    /** @description List of ports to be forwarded to the virtual machine. */
                                    ports?: {
                                        /** @description If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services. */
                                        name?: string;
                                        /**
                                         * Format: int32
                                         * @description Number of port to expose for the virtual machine. This must be a valid port number, 0 < x < 65536.
                                         */
                                        port: number;
                                        /** @description Protocol for port. Must be UDP or TCP. Defaults to "TCP". */
                                        protocol?: string;
                                    }[];
                                    /** @description InterfaceSlirp connects to a given network using QEMU user networking mode. */
                                    slirp?: Record<string, never>;
                                    /** @description InterfaceSRIOV connects to a given network by passing-through an SR-IOV PCI device via vfio. */
                                    sriov?: Record<string, never>;
                                    /** @description State represents the requested operational state of the interface. The (only) value supported is 'absent', expressing a request to remove the interface. */
                                    state?: string;
                                    /** @description If specified, the virtual network interface address and its tag will be provided to the guest via config drive */
                                    tag?: string;
                                }[];
                                /** @description Whether to log the auto-attached default serial console or not. Serial console logs will be collect to a file and then streamed from a named 'guest-console-log'. Not relevant if autoattachSerialConsole is disabled. Defaults to cluster wide setting on VirtualMachineOptions. */
                                logSerialConsole?: boolean;
                                /** @description If specified, virtual network interfaces configured with a virtio bus will also enable the vhost multiqueue feature for network devices. The number of queues created depends on additional factors of the VirtualMachineInstance, like the number of guest CPUs. */
                                networkInterfaceMultiqueue?: boolean;
                                /** @description Whether to have random number generator from host */
                                rng?: Record<string, never>;
                                /** @description Whether to emulate a sound device. */
                                sound?: {
                                    /** @description We only support ich9 or ac97. If SoundDevice is not set: No sound card is emulated. If SoundDevice is set but Model is not: ich9 */
                                    model?: string;
                                    /** @description User's defined name for this sound device */
                                    name: string;
                                };
                                /** @description Whether to emulate a TPM device. */
                                tpm?: {
                                    /** @description Persistent indicates the state of the TPM device should be kept accross reboots Defaults to false */
                                    persistent?: boolean;
                                };
                                /** @description Fall back to legacy virtio 0.9 support if virtio bus is selected on devices. This is helpful for old machines like CentOS6 or RHEL6 which do not understand virtio_non_transitional (virtio 1.0). */
                                useVirtioTransitional?: boolean;
                                /** @description Watchdog describes a watchdog device which can be added to the vmi. */
                                watchdog?: {
                                    /** @description i6300esb watchdog device. */
                                    i6300esb?: {
                                        /** @description The action to take. Valid values are poweroff, reset, shutdown. Defaults to reset. */
                                        action?: string;
                                    };
                                    /** @description Name of the watchdog. */
                                    name: string;
                                };
                            };
                            /** @description Features like acpi, apic, hyperv, smm. */
                            features?: {
                                /** @description ACPI enables/disables ACPI inside the guest. Defaults to enabled. */
                                acpi?: {
                                    /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                    enabled?: boolean;
                                };
                                /** @description Defaults to the machine type setting. */
                                apic?: {
                                    /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                    enabled?: boolean;
                                    /** @description EndOfInterrupt enables the end of interrupt notification in the guest. Defaults to false. */
                                    endOfInterrupt?: boolean;
                                };
                                /** @description Defaults to the machine type setting. */
                                hyperv?: {
                                    /** @description EVMCS Speeds up L2 vmexits, but disables other virtualization features. Requires vapic. Defaults to the machine type setting. */
                                    evmcs?: {
                                        /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                        enabled?: boolean;
                                    };
                                    /** @description Frequencies improves the TSC clock source handling for Hyper-V on KVM. Defaults to the machine type setting. */
                                    frequencies?: {
                                        /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                        enabled?: boolean;
                                    };
                                    /** @description IPI improves performances in overcommited environments. Requires vpindex. Defaults to the machine type setting. */
                                    ipi?: {
                                        /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                        enabled?: boolean;
                                    };
                                    /** @description Reenlightenment enables the notifications on TSC frequency changes. Defaults to the machine type setting. */
                                    reenlightenment?: {
                                        /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                        enabled?: boolean;
                                    };
                                    /** @description Relaxed instructs the guest OS to disable watchdog timeouts. Defaults to the machine type setting. */
                                    relaxed?: {
                                        /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                        enabled?: boolean;
                                    };
                                    /** @description Reset enables Hyperv reboot/reset for the vmi. Requires synic. Defaults to the machine type setting. */
                                    reset?: {
                                        /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                        enabled?: boolean;
                                    };
                                    /** @description Runtime improves the time accounting to improve scheduling in the guest. Defaults to the machine type setting. */
                                    runtime?: {
                                        /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                        enabled?: boolean;
                                    };
                                    /** @description Spinlocks allows to configure the spinlock retry attempts. */
                                    spinlocks?: {
                                        /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                        enabled?: boolean;
                                        /**
                                         * Format: int32
                                         * @description Retries indicates the number of retries. Must be a value greater or equal 4096. Defaults to 4096.
                                         */
                                        spinlocks?: number;
                                    };
                                    /** @description SyNIC enables the Synthetic Interrupt Controller. Defaults to the machine type setting. */
                                    synic?: {
                                        /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                        enabled?: boolean;
                                    };
                                    /** @description SyNICTimer enables Synthetic Interrupt Controller Timers, reducing CPU load. Defaults to the machine type setting. */
                                    synictimer?: {
                                        /** @description Represents if a feature is enabled or disabled. */
                                        direct?: {
                                            /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                            enabled?: boolean;
                                        };
                                        enabled?: boolean;
                                    };
                                    /** @description TLBFlush improves performances in overcommited environments. Requires vpindex. Defaults to the machine type setting. */
                                    tlbflush?: {
                                        /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                        enabled?: boolean;
                                    };
                                    /** @description VAPIC improves the paravirtualized handling of interrupts. Defaults to the machine type setting. */
                                    vapic?: {
                                        /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                        enabled?: boolean;
                                    };
                                    /** @description VendorID allows setting the hypervisor vendor id. Defaults to the machine type setting. */
                                    vendorid?: {
                                        /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                        enabled?: boolean;
                                        /** @description VendorID sets the hypervisor vendor id, visible to the vmi. String up to twelve characters. */
                                        vendorid?: string;
                                    };
                                    /** @description VPIndex enables the Virtual Processor Index to help windows identifying virtual processors. Defaults to the machine type setting. */
                                    vpindex?: {
                                        /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                        enabled?: boolean;
                                    };
                                };
                                /** @description Configure how KVM presence is exposed to the guest. */
                                kvm?: {
                                    /** @description Hide the KVM hypervisor from standard MSR based discovery. Defaults to false */
                                    hidden?: boolean;
                                };
                                /** @description Notify the guest that the host supports paravirtual spinlocks. For older kernels this feature should be explicitly disabled. */
                                pvspinlock?: {
                                    /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                    enabled?: boolean;
                                };
                                /** @description SMM enables/disables System Management Mode. TSEG not yet implemented. */
                                smm?: {
                                    /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                    enabled?: boolean;
                                };
                            };
                            /** @description Firmware. */
                            firmware?: {
                                /** @description Settings to control the bootloader that is used. */
                                bootloader?: {
                                    /** @description If set (default), BIOS will be used. */
                                    bios?: {
                                        /** @description If set, the BIOS output will be transmitted over serial */
                                        useSerial?: boolean;
                                    };
                                    /** @description If set, EFI will be used instead of BIOS. */
                                    efi?: {
                                        /** @description If set to true, Persistent will persist the EFI NVRAM across reboots. Defaults to false */
                                        persistent?: boolean;
                                        /** @description If set, SecureBoot will be enabled and the OVMF roms will be swapped for SecureBoot-enabled ones. Requires SMM to be enabled. Defaults to true */
                                        secureBoot?: boolean;
                                    };
                                };
                                /** @description Settings to set the kernel for booting. */
                                kernelBoot?: {
                                    /** @description Container defines the container that containes kernel artifacts */
                                    container?: {
                                        /** @description Image that contains initrd / kernel files. */
                                        image: string;
                                        /** @description Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images */
                                        imagePullPolicy?: string;
                                        /** @description ImagePullSecret is the name of the Docker registry secret required to pull the image. The secret must already exist. */
                                        imagePullSecret?: string;
                                        /** @description the fully-qualified path to the ramdisk image in the host OS */
                                        initrdPath?: string;
                                        /** @description The fully-qualified path to the kernel image in the host OS */
                                        kernelPath?: string;
                                    };
                                    /** @description Arguments to be passed to the kernel at boot time */
                                    kernelArgs?: string;
                                };
                                /** @description The system-serial-number in SMBIOS */
                                serial?: string;
                                /** @description UUID reported by the vmi bios. Defaults to a random generated uid. */
                                uuid?: string;
                            };
                            /** @description Controls whether or not disks will share IOThreads. Omitting IOThreadsPolicy disables use of IOThreads. One of: shared, auto */
                            ioThreadsPolicy?: string;
                            /** @description Launch Security setting of the vmi. */
                            launchSecurity?: {
                                /** @description AMD Secure Encrypted Virtualization (SEV). */
                                sev?: {
                                    /** @description If specified, run the attestation process for a vmi. */
                                    attestation?: Record<string, never>;
                                    /** @description Base64 encoded guest owner's Diffie-Hellman key. */
                                    dhCert?: string;
                                    /** @description Guest policy flags as defined in AMD SEV API specification. Note: due to security reasons it is not allowed to enable guest debugging. Therefore NoDebug flag is not exposed to users and is always true. */
                                    policy?: {
                                        /** @description SEV-ES is required. Defaults to false. */
                                        encryptedState?: boolean;
                                    };
                                    /** @description Base64 encoded session blob. */
                                    session?: string;
                                };
                            };
                            /** @description Machine type. */
                            machine?: {
                                /** @description QEMU machine type is the actual chipset of the VirtualMachineInstance. */
                                type?: string;
                            };
                            /** @description Memory allow specifying the VMI memory features. */
                            memory?: {
                                /** @description Guest allows to specifying the amount of memory which is visible inside the Guest OS. The Guest must lie between Requests and Limits from the resources section. Defaults to the requested memory in the resources section if not specified. */
                                guest?: number | string;
                                /** @description Hugepages allow to use hugepages for the VirtualMachineInstance instead of regular memory. */
                                hugepages?: {
                                    /** @description PageSize specifies the hugepage size, for x86_64 architecture valid values are 1Gi and 2Mi. */
                                    pageSize?: string;
                                };
                                /** @description MaxGuest allows to specify the maximum amount of memory which is visible inside the Guest OS. The delta between MaxGuest and Guest is the amount of memory that can be hot(un)plugged. */
                                maxGuest?: number | string;
                            };
                            /** @description Resources describes the Compute Resources required by this vmi. */
                            resources?: {
                                /** @description Limits describes the maximum amount of compute resources allowed. Valid resource keys are "memory" and "cpu". */
                                limits?: {
                                    [key: string]: number | string;
                                };
                                /** @description Don't ask the scheduler to take the guest-management overhead into account. Instead put the overhead only into the container's memory limit. This can lead to crashes if all memory is in use on a node. Defaults to false. */
                                overcommitGuestOverhead?: boolean;
                                /** @description Requests is a description of the initial vmi resources. Valid resource keys are "memory" and "cpu". */
                                requests?: {
                                    [key: string]: number | string;
                                };
                            };
                        };
                        /** @description EvictionStrategy can be set to "LiveMigrate" if the VirtualMachineInstance should be migrated instead of shut-off in case of a node drain. */
                        evictionStrategy?: string;
                        /** @description Specifies the hostname of the vmi If not specified, the hostname will be set to the name of the vmi, if dhcp or cloud-init is configured properly. */
                        hostname?: string;
                        /** @description Periodic probe of VirtualMachineInstance liveness. VirtualmachineInstances will be stopped if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes */
                        livenessProbe?: {
                            /** @description One and only one of the following should be specified. Exec specifies the action to take, it will be executed on the guest through the qemu-guest-agent. If the guest agent is not available, this probe will fail. */
                            exec?: {
                                /** @description Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy. */
                                command?: string[];
                            };
                            /**
                             * Format: int32
                             * @description Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
                             */
                            failureThreshold?: number;
                            /** @description GuestAgentPing contacts the qemu-guest-agent for availability checks. */
                            guestAgentPing?: Record<string, never>;
                            /** @description HTTPGet specifies the http request to perform. */
                            httpGet?: {
                                /** @description Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead. */
                                host?: string;
                                /** @description Custom headers to set in the request. HTTP allows repeated headers. */
                                httpHeaders?: {
                                    /** @description The header field name */
                                    name: string;
                                    /** @description The header field value */
                                    value: string;
                                }[];
                                /** @description Path to access on the HTTP server. */
                                path?: string;
                                /** @description Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. */
                                port: number | string;
                                /** @description Scheme to use for connecting to the host. Defaults to HTTP. */
                                scheme?: string;
                            };
                            /**
                             * Format: int32
                             * @description Number of seconds after the VirtualMachineInstance has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                             */
                            initialDelaySeconds?: number;
                            /**
                             * Format: int32
                             * @description How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
                             */
                            periodSeconds?: number;
                            /**
                             * Format: int32
                             * @description Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
                             */
                            successThreshold?: number;
                            /** @description TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook */
                            tcpSocket?: {
                                /** @description Optional: Host name to connect to, defaults to the pod IP. */
                                host?: string;
                                /** @description Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. */
                                port: number | string;
                            };
                            /**
                             * Format: int32
                             * @description Number of seconds after which the probe times out. For exec probes the timeout fails the probe but does not terminate the command running on the guest. This means a blocking command can result in an increasing load on the guest. A small buffer will be added to the resulting workload exec probe to compensate for delays caused by the qemu guest exec mechanism. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                             */
                            timeoutSeconds?: number;
                        };
                        /** @description List of networks that can be attached to a vm's virtual interface. */
                        networks?: {
                            /** @description Represents the multus cni network. */
                            multus?: {
                                /** @description Select the default network and add it to the multus-cni.io/default-network annotation. */
                                default?: boolean;
                                /** @description References to a NetworkAttachmentDefinition CRD object. Format: <networkName>, <namespace>/<networkName>. If namespace is not specified, VMI namespace is assumed. */
                                networkName: string;
                            };
                            /** @description Network name. Must be a DNS_LABEL and unique within the vm. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names */
                            name: string;
                            /** @description Represents the stock pod network interface. */
                            pod?: {
                                /** @description IPv6 CIDR for the vm network. Defaults to fd10:0:2::/120 if not specified. */
                                vmIPv6NetworkCIDR?: string;
                                /** @description CIDR for vm network. Default 10.0.2.0/24 if not specified. */
                                vmNetworkCIDR?: string;
                            };
                        }[];
                        /** @description NodeSelector is a selector which must be true for the vmi to fit on a node. Selector which must match a node's labels for the vmi to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/ */
                        nodeSelector?: {
                            [key: string]: string;
                        };
                        /** @description If specified, indicates the pod's priority. If not specified, the pod priority will be default or zero if there is no default. */
                        priorityClassName?: string;
                        /** @description Periodic probe of VirtualMachineInstance service readiness. VirtualmachineInstances will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes */
                        readinessProbe?: {
                            /** @description One and only one of the following should be specified. Exec specifies the action to take, it will be executed on the guest through the qemu-guest-agent. If the guest agent is not available, this probe will fail. */
                            exec?: {
                                /** @description Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy. */
                                command?: string[];
                            };
                            /**
                             * Format: int32
                             * @description Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
                             */
                            failureThreshold?: number;
                            /** @description GuestAgentPing contacts the qemu-guest-agent for availability checks. */
                            guestAgentPing?: Record<string, never>;
                            /** @description HTTPGet specifies the http request to perform. */
                            httpGet?: {
                                /** @description Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead. */
                                host?: string;
                                /** @description Custom headers to set in the request. HTTP allows repeated headers. */
                                httpHeaders?: {
                                    /** @description The header field name */
                                    name: string;
                                    /** @description The header field value */
                                    value: string;
                                }[];
                                /** @description Path to access on the HTTP server. */
                                path?: string;
                                /** @description Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. */
                                port: number | string;
                                /** @description Scheme to use for connecting to the host. Defaults to HTTP. */
                                scheme?: string;
                            };
                            /**
                             * Format: int32
                             * @description Number of seconds after the VirtualMachineInstance has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                             */
                            initialDelaySeconds?: number;
                            /**
                             * Format: int32
                             * @description How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
                             */
                            periodSeconds?: number;
                            /**
                             * Format: int32
                             * @description Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
                             */
                            successThreshold?: number;
                            /** @description TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook */
                            tcpSocket?: {
                                /** @description Optional: Host name to connect to, defaults to the pod IP. */
                                host?: string;
                                /** @description Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. */
                                port: number | string;
                            };
                            /**
                             * Format: int32
                             * @description Number of seconds after which the probe times out. For exec probes the timeout fails the probe but does not terminate the command running on the guest. This means a blocking command can result in an increasing load on the guest. A small buffer will be added to the resulting workload exec probe to compensate for delays caused by the qemu guest exec mechanism. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                             */
                            timeoutSeconds?: number;
                        };
                        /** @description If specified, the VMI will be dispatched by specified scheduler. If not specified, the VMI will be dispatched by default scheduler. */
                        schedulerName?: string;
                        /** @description StartStrategy can be set to "Paused" if Virtual Machine should be started in paused state. */
                        startStrategy?: string;
                        /** @description If specified, the fully qualified vmi hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the vmi will not have a domainname at all. The DNS entry will resolve to the vmi, no matter if the vmi itself can pick up a hostname. */
                        subdomain?: string;
                        /**
                         * Format: int64
                         * @description Grace period observed after signalling a VirtualMachineInstance to stop after which the VirtualMachineInstance is force terminated.
                         */
                        terminationGracePeriodSeconds?: number;
                        /** @description If toleration is specified, obey all the toleration rules. */
                        tolerations?: {
                            /** @description Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute. */
                            effect?: string;
                            /** @description Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys. */
                            key?: string;
                            /** @description Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category. */
                            operator?: string;
                            /**
                             * Format: int64
                             * @description TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
                             */
                            tolerationSeconds?: number;
                            /** @description Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string. */
                            value?: string;
                        }[];
                        /** @description TopologySpreadConstraints describes how a group of VMIs will be spread across a given topology domains. K8s scheduler will schedule VMI pods in a way which abides by the constraints. */
                        topologySpreadConstraints?: {
                            /** @description LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain. */
                            labelSelector?: {
                                /** @description matchExpressions is a list of label selector requirements. The requirements are ANDed. */
                                matchExpressions?: {
                                    /** @description key is the label key that the selector applies to. */
                                    key: string;
                                    /** @description operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. */
                                    operator: string;
                                    /** @description values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. */
                                    values?: string[];
                                }[];
                                /** @description matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed. */
                                matchLabels?: {
                                    [key: string]: string;
                                };
                            };
                            /** @description MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector. */
                            matchLabelKeys?: string[];
                            /**
                             * Format: int32
                             * @description MaxSkew describes the degree to which pods may be unevenly distributed. When 'whenUnsatisfiable=DoNotSchedule', it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When 'whenUnsatisfiable=ScheduleAnyway', it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
                             */
                            maxSkew: number;
                            /**
                             * Format: int32
                             * @description MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
                             *      For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.
                             *      This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).
                             */
                            minDomains?: number;
                            /** @description NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
                             *      If this value is nil, the behavior is equivalent to the Honor policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag. */
                            nodeAffinityPolicy?: string;
                            /** @description NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.
                             *      If this value is nil, the behavior is equivalent to the Ignore policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag. */
                            nodeTaintsPolicy?: string;
                            /** @description TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It's a required field. */
                            topologyKey: string;
                            /** @description WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,   but giving higher precedence to topologies that would help reduce the   skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field. */
                            whenUnsatisfiable: string;
                        }[];
                        /** @description List of volumes that can be mounted by disks belonging to the vmi. */
                        volumes?: {
                            /** @description CloudInitConfigDrive represents a cloud-init Config Drive user-data source. The Config Drive data will be added as a disk to the vmi. A proper cloud-init installation is required inside the guest. More info: https://cloudinit.readthedocs.io/en/latest/topics/datasources/configdrive.html */
                            cloudInitConfigDrive?: {
                                /** @description NetworkData contains config drive inline cloud-init networkdata. */
                                networkData?: string;
                                /** @description NetworkDataBase64 contains config drive cloud-init networkdata as a base64 encoded string. */
                                networkDataBase64?: string;
                                /** @description NetworkDataSecretRef references a k8s secret that contains config drive networkdata. */
                                networkDataSecretRef?: {
                                    /** @description Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid? */
                                    name?: string;
                                };
                                /** @description UserDataSecretRef references a k8s secret that contains config drive userdata. */
                                secretRef?: {
                                    /** @description Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid? */
                                    name?: string;
                                };
                                /** @description UserData contains config drive inline cloud-init userdata. */
                                userData?: string;
                                /** @description UserDataBase64 contains config drive cloud-init userdata as a base64 encoded string. */
                                userDataBase64?: string;
                            };
                            /** @description CloudInitNoCloud represents a cloud-init NoCloud user-data source. The NoCloud data will be added as a disk to the vmi. A proper cloud-init installation is required inside the guest. More info: http://cloudinit.readthedocs.io/en/latest/topics/datasources/nocloud.html */
                            cloudInitNoCloud?: {
                                /** @description NetworkData contains NoCloud inline cloud-init networkdata. */
                                networkData?: string;
                                /** @description NetworkDataBase64 contains NoCloud cloud-init networkdata as a base64 encoded string. */
                                networkDataBase64?: string;
                                /** @description NetworkDataSecretRef references a k8s secret that contains NoCloud networkdata. */
                                networkDataSecretRef?: {
                                    /** @description Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid? */
                                    name?: string;
                                };
                                /** @description UserDataSecretRef references a k8s secret that contains NoCloud userdata. */
                                secretRef?: {
                                    /** @description Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid? */
                                    name?: string;
                                };
                                /** @description UserData contains NoCloud inline cloud-init userdata. */
                                userData?: string;
                                /** @description UserDataBase64 contains NoCloud cloud-init userdata as a base64 encoded string. */
                                userDataBase64?: string;
                            };
                            /** @description ConfigMapSource represents a reference to a ConfigMap in the same namespace. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/ */
                            configMap?: {
                                /** @description Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid? */
                                name?: string;
                                /** @description Specify whether the ConfigMap or it's keys must be defined */
                                optional?: boolean;
                                /** @description The volume label of the resulting disk inside the VMI. Different bootstrapping mechanisms require different values. Typical values are "cidata" (cloud-init), "config-2" (cloud-init) or "OEMDRV" (kickstart). */
                                volumeLabel?: string;
                            };
                            /** @description ContainerDisk references a docker image, embedding a qcow or raw disk. More info: https://kubevirt.gitbooks.io/user-guide/registry-disk.html */
                            containerDisk?: {
                                /** @description Image is the name of the image with the embedded disk. */
                                image: string;
                                /** @description Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images */
                                imagePullPolicy?: string;
                                /** @description ImagePullSecret is the name of the Docker registry secret required to pull the image. The secret must already exist. */
                                imagePullSecret?: string;
                                /** @description Path defines the path to disk file in the container */
                                path?: string;
                            };
                            /** @description DataVolume represents the dynamic creation a PVC for this volume as well as the process of populating that PVC with a disk image. */
                            dataVolume?: {
                                /** @description Hotpluggable indicates whether the volume can be hotplugged and hotunplugged. */
                                hotpluggable?: boolean;
                                /** @description Name of both the DataVolume and the PVC in the same namespace. After PVC population the DataVolume is garbage collected by default. */
                                name: string;
                            };
                            /** @description DownwardAPI represents downward API about the pod that should populate this volume */
                            downwardAPI?: {
                                /** @description Fields is a list of downward API volume file */
                                fields?: {
                                    /** @description Required: Selects a field of the pod: only annotations, labels, name and namespace are supported. */
                                    fieldRef?: {
                                        /** @description Version of the schema the FieldPath is written in terms of, defaults to "v1". */
                                        apiVersion?: string;
                                        /** @description Path of the field to select in the specified API version. */
                                        fieldPath: string;
                                    };
                                    /**
                                     * Format: int32
                                     * @description Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
                                     */
                                    mode?: number;
                                    /** @description Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..' */
                                    path: string;
                                    /** @description Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported. */
                                    resourceFieldRef?: {
                                        /** @description Container name: required for volumes, optional for env vars */
                                        containerName?: string;
                                        /** @description Specifies the output format of the exposed resources, defaults to "1" */
                                        divisor?: number | string;
                                        /** @description Required: resource to select */
                                        resource: string;
                                    };
                                }[];
                                /** @description The volume label of the resulting disk inside the VMI. Different bootstrapping mechanisms require different values. Typical values are "cidata" (cloud-init), "config-2" (cloud-init) or "OEMDRV" (kickstart). */
                                volumeLabel?: string;
                            };
                            /** @description DownwardMetrics adds a very small disk to VMIs which contains a limited view of host and guest metrics. The disk content is compatible with vhostmd (https://github.com/vhostmd/vhostmd) and vm-dump-metrics. */
                            downwardMetrics?: Record<string, never>;
                            /** @description EmptyDisk represents a temporary disk which shares the vmis lifecycle. More info: https://kubevirt.gitbooks.io/user-guide/disks-and-volumes.html */
                            emptyDisk?: {
                                /** @description Capacity of the sparse disk. */
                                capacity: number | string;
                            };
                            /** @description Ephemeral is a special volume source that "wraps" specified source and provides copy-on-write image on top of it. */
                            ephemeral?: {
                                /** @description PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. Directly attached to the vmi via qemu. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims */
                                persistentVolumeClaim?: {
                                    /** @description claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims */
                                    claimName: string;
                                    /** @description readOnly Will force the ReadOnly setting in VolumeMounts. Default false. */
                                    readOnly?: boolean;
                                };
                            };
                            /** @description HostDisk represents a disk created on the cluster level */
                            hostDisk?: {
                                /** @description Capacity of the sparse disk */
                                capacity?: number | string;
                                /** @description The path to HostDisk image located on the cluster */
                                path: string;
                                /** @description Shared indicate whether the path is shared between nodes */
                                shared?: boolean;
                                /** @description Contains information if disk.img exists or should be created allowed options are 'Disk' and 'DiskOrCreate' */
                                type: string;
                            };
                            /** @description MemoryDump is attached to the virt launcher and is populated with a memory dump of the vmi */
                            memoryDump?: {
                                /** @description claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims */
                                claimName: string;
                                /** @description Hotpluggable indicates whether the volume can be hotplugged and hotunplugged. */
                                hotpluggable?: boolean;
                                /** @description readOnly Will force the ReadOnly setting in VolumeMounts. Default false. */
                                readOnly?: boolean;
                            };
                            /** @description Volume's name. Must be a DNS_LABEL and unique within the vmi. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names */
                            name: string;
                            /** @description PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. Directly attached to the vmi via qemu. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims */
                            persistentVolumeClaim?: {
                                /** @description claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims */
                                claimName: string;
                                /** @description Hotpluggable indicates whether the volume can be hotplugged and hotunplugged. */
                                hotpluggable?: boolean;
                                /** @description readOnly Will force the ReadOnly setting in VolumeMounts. Default false. */
                                readOnly?: boolean;
                            };
                            /** @description SecretVolumeSource represents a reference to a secret data in the same namespace. More info: https://kubernetes.io/docs/concepts/configuration/secret/ */
                            secret?: {
                                /** @description Specify whether the Secret or it's keys must be defined */
                                optional?: boolean;
                                /** @description Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret */
                                secretName?: string;
                                /** @description The volume label of the resulting disk inside the VMI. Different bootstrapping mechanisms require different values. Typical values are "cidata" (cloud-init), "config-2" (cloud-init) or "OEMDRV" (kickstart). */
                                volumeLabel?: string;
                            };
                            /** @description ServiceAccountVolumeSource represents a reference to a service account. There can only be one volume of this type! More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/ */
                            serviceAccount?: {
                                /** @description Name of the service account in the pod's namespace to use. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/ */
                                serviceAccountName?: string;
                            };
                            /** @description Represents a Sysprep volume source. */
                            sysprep?: {
                                /** @description ConfigMap references a ConfigMap that contains Sysprep answer file named autounattend.xml that should be attached as disk of CDROM type. */
                                configMap?: {
                                    /** @description Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid? */
                                    name?: string;
                                };
                                /** @description Secret references a k8s Secret that contains Sysprep answer file named autounattend.xml that should be attached as disk of CDROM type. */
                                secret?: {
                                    /** @description Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid? */
                                    name?: string;
                                };
                            };
                        }[];
                    };
                };
            };
            /** @description Status holds the current state of the controller and brief information about its associated VirtualMachineInstance */
            status?: {
                /** @description Hold the state information of the VirtualMachine and its VirtualMachineInstance */
                conditions?: {
                    /** Format: date-time */
                    lastProbeTime?: string | null;
                    /** Format: date-time */
                    lastTransitionTime?: string | null;
                    message?: string;
                    reason?: string;
                    status: string;
                    type: string;
                }[];
                /** @description Created indicates if the virtual machine is created in the cluster */
                created?: boolean;
                /**
                 * Format: int64
                 * @description DesiredGeneration is the generation which is desired for the VMI. This will be used in comparisons with ObservedGeneration to understand when the VMI is out of sync. This will be changed at the same time as ObservedGeneration to remove errors which could occur if Generation is updated through an Update() before ObservedGeneration in Status.
                 */
                desiredGeneration?: number;
                /** @description MemoryDumpRequest tracks memory dump request phase and info of getting a memory dump to the given pvc */
                memoryDumpRequest?: {
                    /** @description ClaimName is the name of the pvc that will contain the memory dump */
                    claimName: string;
                    /**
                     * Format: date-time
                     * @description EndTimestamp represents the time the memory dump was completed
                     */
                    endTimestamp?: string;
                    /** @description FileName represents the name of the output file */
                    fileName?: string;
                    /** @description Message is a detailed message about failure of the memory dump */
                    message?: string;
                    /** @description Phase represents the memory dump phase */
                    phase: string;
                    /** @description Remove represents request of dissociating the memory dump pvc */
                    remove?: boolean;
                    /**
                     * Format: date-time
                     * @description StartTimestamp represents the time the memory dump started
                     */
                    startTimestamp?: string;
                } | null;
                /**
                 * Format: int64
                 * @description ObservedGeneration is the generation observed by the vmi when started.
                 */
                observedGeneration?: number;
                /** @description PrintableStatus is a human readable, high-level representation of the status of the virtual machine */
                printableStatus?: string;
                /** @description Ready indicates if the virtual machine is running and ready */
                ready?: boolean;
                /** @description RestoreInProgress is the name of the VirtualMachineRestore currently executing */
                restoreInProgress?: string;
                /** @description SnapshotInProgress is the name of the VirtualMachineSnapshot currently executing */
                snapshotInProgress?: string;
                /** @description StartFailure tracks consecutive VMI startup failures for the purposes of crash loop backoffs */
                startFailure?: {
                    consecutiveFailCount?: number;
                    /** @description UID is a type that holds unique ID values, including UUIDs.  Because we don't ONLY use UUIDs, this is an alias to string.  Being a type captures intent and helps make sure that UIDs and names do not get conflated. */
                    lastFailedVMIUID?: string;
                    /** Format: date-time */
                    retryAfterTimestamp?: string;
                } | null;
                /** @description StateChangeRequests indicates a list of actions that should be taken on a VMI e.g. stop a specific VMI then start a new one. */
                stateChangeRequests?: {
                    /** @description Indicates the type of action that is requested. e.g. Start or Stop */
                    action: string;
                    /** @description Provides additional data in order to perform the Action */
                    data?: {
                        [key: string]: string;
                    };
                    /** @description Indicates the UUID of an existing Virtual Machine Instance that this change request applies to -- if applicable */
                    uid?: string;
                }[];
                /** @description VolumeRequests indicates a list of volumes add or remove from the VMI template and hotplug on an active running VMI. */
                volumeRequests?: {
                    /** @description AddVolumeOptions when set indicates a volume should be added. The details within this field specify how to add the volume */
                    addVolumeOptions?: {
                        /** @description Disk represents the hotplug disk that will be plugged into the running VMI */
                        disk: {
                            /** @description If specified, the virtual disk will be presented with the given block sizes. */
                            blockSize?: {
                                /** @description CustomBlockSize represents the desired logical and physical block size for a VM disk. */
                                custom?: {
                                    logical: number;
                                    physical: number;
                                };
                                /** @description Represents if a feature is enabled or disabled. */
                                matchVolume?: {
                                    /** @description Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true. */
                                    enabled?: boolean;
                                };
                            };
                            /** @description BootOrder is an integer value > 0, used to determine ordering of boot devices. Lower values take precedence. Each disk or interface that has a boot order must have a unique value. Disks without a boot order are not tried if a disk with a boot order exists. */
                            bootOrder?: number;
                            /** @description Cache specifies which kvm disk cache mode should be used. Supported values are: CacheNone, CacheWriteThrough. */
                            cache?: string;
                            /** @description Attach a volume as a cdrom to the vmi. */
                            cdrom?: {
                                /** @description Bus indicates the type of disk device to emulate. supported values: virtio, sata, scsi. */
                                bus?: string;
                                /** @description ReadOnly. Defaults to true. */
                                readonly?: boolean;
                                /** @description Tray indicates if the tray of the device is open or closed. Allowed values are "open" and "closed". Defaults to closed. */
                                tray?: string;
                            };
                            /** @description dedicatedIOThread indicates this disk should have an exclusive IO Thread. Enabling this implies useIOThreads = true. Defaults to false. */
                            dedicatedIOThread?: boolean;
                            /** @description Attach a volume as a disk to the vmi. */
                            disk?: {
                                /** @description Bus indicates the type of disk device to emulate. supported values: virtio, sata, scsi, usb. */
                                bus?: string;
                                /** @description If specified, the virtual disk will be placed on the guests pci address with the specified PCI address. For example: 0000:81:01.10 */
                                pciAddress?: string;
                                /** @description ReadOnly. Defaults to false. */
                                readonly?: boolean;
                            };
                            /** @description If specified, it can change the default error policy (stop) for the disk */
                            errorPolicy?: string;
                            /** @description IO specifies which QEMU disk IO mode should be used. Supported values are: native, default, threads. */
                            io?: string;
                            /** @description Attach a volume as a LUN to the vmi. */
                            lun?: {
                                /** @description Bus indicates the type of disk device to emulate. supported values: virtio, sata, scsi. */
                                bus?: string;
                                /** @description ReadOnly. Defaults to false. */
                                readonly?: boolean;
                                /** @description Reservation indicates if the disk needs to support the persistent reservation for the SCSI disk */
                                reservation?: boolean;
                            };
                            /** @description Name is the device name */
                            name: string;
                            /** @description Serial provides the ability to specify a serial number for the disk device. */
                            serial?: string;
                            /** @description If specified the disk is made sharable and multiple write from different VMs are permitted */
                            shareable?: boolean;
                            /** @description If specified, disk address and its tag will be provided to the guest via config drive metadata */
                            tag?: string;
                        };
                        /** @description When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed */
                        dryRun?: string[];
                        /** @description Name represents the name that will be used to map the disk to the corresponding volume. This overrides any name set inside the Disk struct itself. */
                        name: string;
                        /** @description VolumeSource represents the source of the volume to map to the disk. */
                        volumeSource: {
                            /** @description DataVolume represents the dynamic creation a PVC for this volume as well as the process of populating that PVC with a disk image. */
                            dataVolume?: {
                                /** @description Hotpluggable indicates whether the volume can be hotplugged and hotunplugged. */
                                hotpluggable?: boolean;
                                /** @description Name of both the DataVolume and the PVC in the same namespace. After PVC population the DataVolume is garbage collected by default. */
                                name: string;
                            };
                            /** @description PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. Directly attached to the vmi via qemu. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims */
                            persistentVolumeClaim?: {
                                /** @description claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims */
                                claimName: string;
                                /** @description Hotpluggable indicates whether the volume can be hotplugged and hotunplugged. */
                                hotpluggable?: boolean;
                                /** @description readOnly Will force the ReadOnly setting in VolumeMounts. Default false. */
                                readOnly?: boolean;
                            };
                        };
                    };
                    /** @description RemoveVolumeOptions when set indicates a volume should be removed. The details within this field specify how to add the volume */
                    removeVolumeOptions?: {
                        /** @description When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed */
                        dryRun?: string[];
                        /** @description Name represents the name that maps to both the disk and volume that should be removed */
                        name: string;
                    };
                }[];
                /** @description VolumeSnapshotStatuses indicates a list of statuses whether snapshotting is supported by each volume. */
                volumeSnapshotStatuses?: {
                    /** @description True if the volume supports snapshotting */
                    enabled: boolean;
                    /** @description Volume name */
                    name: string;
                    /** @description Empty if snapshotting is enabled, contains reason otherwise */
                    reason?: string;
                }[];
            };
        };
        v1Vpc: {
            kind?: string;
            metadata?: Record<string, any>;
            spec?: {
                defaultSubnet?: string;
                enableExternal?: boolean;
                enableBfd?: boolean;
                namespaces?: string[];
                extraExternalSubnets?: string[];
                staticRoutes?: {
                    policy?: string;
                    cidr?: string;
                    nextHopIP?: string;
                    ecmpMode?: string;
                    bfdId?: string;
                    routeTable?: string;
                }[];
                policyRoutes?: {
                    priority?: number;
                    action?: string;
                    match?: string;
                    nextHopIP?: string;
                }[];
                vpcPeerings?: {
                    remoteVpc?: string;
                    localConnectIP?: string;
                }[];
            };
            status?: {
                conditions?: {
                    lastTransitionTime?: string;
                    lastUpdateTime?: string;
                    message?: string;
                    reason?: string;
                    status?: string;
                    type?: string;
                }[];
                default?: boolean;
                defaultLogicalSwitch?: string;
                router?: string;
                standby?: boolean;
                enableExternal?: boolean;
                enableBfd?: boolean;
                subnets?: string[];
                extraExternalSubnets?: string[];
                vpcPeerings?: string[];
                tcpLoadBalancer?: string;
                tcpSessionLoadBalancer?: string;
                udpLoadBalancer?: string;
                udpSessionLoadBalancer?: string;
                sctpLoadBalancer?: string;
                sctpSessionLoadBalancer?: string;
            };
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
