// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "types/node.proto" (package "vink.kubevm.io.apis.types", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message vink.kubevm.io.apis.types.NodeResourceMetrics
 */
export interface NodeResourceMetrics {
    /**
     * @generated from protobuf field: float cpu_usage = 1;
     */
    cpuUsage: number;
    /**
     * @generated from protobuf field: float cpu_total = 2;
     */
    cpuTotal: number;
    /**
     * @generated from protobuf field: float memery_usage = 3;
     */
    memeryUsage: number;
    /**
     * @generated from protobuf field: float memery_total = 4;
     */
    memeryTotal: number;
    /**
     * @generated from protobuf field: float storage_usage = 5;
     */
    storageUsage: number;
    /**
     * @generated from protobuf field: float storage_total = 6;
     */
    storageTotal: number;
}
/**
 * @generated from protobuf message vink.kubevm.io.apis.types.NodeCephStorage
 */
export interface NodeCephStorage {
    /**
     * @generated from protobuf field: int32 osd = 1;
     */
    osd: number;
    /**
     * @generated from protobuf field: bool up = 2;
     */
    up: boolean;
    /**
     * @generated from protobuf field: string bluestore_bdev_dev_node = 3;
     */
    bluestoreBdevDevNode: string;
    /**
     * @generated from protobuf field: string bluestore_bdev_type = 4;
     */
    bluestoreBdevType: string;
    /**
     * @generated from protobuf field: float storage_usage = 5;
     */
    storageUsage: number;
    /**
     * @generated from protobuf field: float storage_total = 6;
     */
    storageTotal: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class NodeResourceMetrics$Type extends MessageType<NodeResourceMetrics> {
    constructor() {
        super("vink.kubevm.io.apis.types.NodeResourceMetrics", [
            { no: 1, name: "cpu_usage", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "cpu_total", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "memery_usage", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "memery_total", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 5, name: "storage_usage", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 6, name: "storage_total", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<NodeResourceMetrics>): NodeResourceMetrics {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cpuUsage = 0;
        message.cpuTotal = 0;
        message.memeryUsage = 0;
        message.memeryTotal = 0;
        message.storageUsage = 0;
        message.storageTotal = 0;
        if (value !== undefined)
            reflectionMergePartial<NodeResourceMetrics>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NodeResourceMetrics): NodeResourceMetrics {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float cpu_usage */ 1:
                    message.cpuUsage = reader.float();
                    break;
                case /* float cpu_total */ 2:
                    message.cpuTotal = reader.float();
                    break;
                case /* float memery_usage */ 3:
                    message.memeryUsage = reader.float();
                    break;
                case /* float memery_total */ 4:
                    message.memeryTotal = reader.float();
                    break;
                case /* float storage_usage */ 5:
                    message.storageUsage = reader.float();
                    break;
                case /* float storage_total */ 6:
                    message.storageTotal = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NodeResourceMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* float cpu_usage = 1; */
        if (message.cpuUsage !== 0)
            writer.tag(1, WireType.Bit32).float(message.cpuUsage);
        /* float cpu_total = 2; */
        if (message.cpuTotal !== 0)
            writer.tag(2, WireType.Bit32).float(message.cpuTotal);
        /* float memery_usage = 3; */
        if (message.memeryUsage !== 0)
            writer.tag(3, WireType.Bit32).float(message.memeryUsage);
        /* float memery_total = 4; */
        if (message.memeryTotal !== 0)
            writer.tag(4, WireType.Bit32).float(message.memeryTotal);
        /* float storage_usage = 5; */
        if (message.storageUsage !== 0)
            writer.tag(5, WireType.Bit32).float(message.storageUsage);
        /* float storage_total = 6; */
        if (message.storageTotal !== 0)
            writer.tag(6, WireType.Bit32).float(message.storageTotal);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message vink.kubevm.io.apis.types.NodeResourceMetrics
 */
export const NodeResourceMetrics = new NodeResourceMetrics$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NodeCephStorage$Type extends MessageType<NodeCephStorage> {
    constructor() {
        super("vink.kubevm.io.apis.types.NodeCephStorage", [
            { no: 1, name: "osd", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "up", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "bluestore_bdev_dev_node", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "bluestore_bdev_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "storage_usage", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 6, name: "storage_total", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<NodeCephStorage>): NodeCephStorage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.osd = 0;
        message.up = false;
        message.bluestoreBdevDevNode = "";
        message.bluestoreBdevType = "";
        message.storageUsage = 0;
        message.storageTotal = 0;
        if (value !== undefined)
            reflectionMergePartial<NodeCephStorage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NodeCephStorage): NodeCephStorage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 osd */ 1:
                    message.osd = reader.int32();
                    break;
                case /* bool up */ 2:
                    message.up = reader.bool();
                    break;
                case /* string bluestore_bdev_dev_node */ 3:
                    message.bluestoreBdevDevNode = reader.string();
                    break;
                case /* string bluestore_bdev_type */ 4:
                    message.bluestoreBdevType = reader.string();
                    break;
                case /* float storage_usage */ 5:
                    message.storageUsage = reader.float();
                    break;
                case /* float storage_total */ 6:
                    message.storageTotal = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NodeCephStorage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 osd = 1; */
        if (message.osd !== 0)
            writer.tag(1, WireType.Varint).int32(message.osd);
        /* bool up = 2; */
        if (message.up !== false)
            writer.tag(2, WireType.Varint).bool(message.up);
        /* string bluestore_bdev_dev_node = 3; */
        if (message.bluestoreBdevDevNode !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.bluestoreBdevDevNode);
        /* string bluestore_bdev_type = 4; */
        if (message.bluestoreBdevType !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.bluestoreBdevType);
        /* float storage_usage = 5; */
        if (message.storageUsage !== 0)
            writer.tag(5, WireType.Bit32).float(message.storageUsage);
        /* float storage_total = 6; */
        if (message.storageTotal !== 0)
            writer.tag(6, WireType.Bit32).float(message.storageTotal);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message vink.kubevm.io.apis.types.NodeCephStorage
 */
export const NodeCephStorage = new NodeCephStorage$Type();
