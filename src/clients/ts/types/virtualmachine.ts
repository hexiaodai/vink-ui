// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "types/virtualmachine.proto" (package "vink.kubevm.io.apis.types", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message vink.kubevm.io.apis.types.VirtualMachineHost
 */
export interface VirtualMachineHost {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: repeated string ips = 2;
     */
    ips: string[];
}
/**
 * @generated from protobuf message vink.kubevm.io.apis.types.VirtualMachineResourceMetrics
 */
export interface VirtualMachineResourceMetrics {
    /**
     * @generated from protobuf field: float cpu_usage = 1;
     */
    cpuUsage: number;
    /**
     * @generated from protobuf field: float memery_usage = 2;
     */
    memeryUsage: number;
}
/**
 * @generated from protobuf message vink.kubevm.io.apis.types.VirtualMachineNetwork
 */
export interface VirtualMachineNetwork {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string ips_name = 2;
     */
    ipsName: string;
    /**
     * @generated from protobuf field: string network = 3;
     */
    network: string;
    /**
     * @generated from protobuf field: string interface = 4;
     */
    interface: string;
    /**
     * @generated from protobuf field: string ip = 5;
     */
    ip: string;
    /**
     * @generated from protobuf field: string mac = 6;
     */
    mac: string;
    /**
     * @generated from protobuf field: string subnet = 7;
     */
    subnet: string;
    /**
     * @generated from protobuf field: string vpc = 8;
     */
    vpc: string;
    /**
     * @generated from protobuf field: string multus = 9;
     */
    multus: string;
    /**
     * @generated from protobuf field: bool default = 10;
     */
    default: boolean;
}
/**
 * @generated from protobuf message vink.kubevm.io.apis.types.VirtualMachineDisk
 */
export interface VirtualMachineDisk {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string capacity = 2;
     */
    capacity: string;
    /**
     * @generated from protobuf field: string status = 3;
     */
    status: string;
    /**
     * @generated from protobuf field: string accessMode = 4;
     */
    accessMode: string;
    /**
     * @generated from protobuf field: string storageClassName = 5;
     */
    storageClassName: string;
    /**
     * @generated from protobuf field: bool rootfs = 6;
     */
    rootfs: boolean;
    /**
     * @generated from protobuf field: bool mounted = 7;
     */
    mounted: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class VirtualMachineHost$Type extends MessageType<VirtualMachineHost> {
    constructor() {
        super("vink.kubevm.io.apis.types.VirtualMachineHost", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "ips", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<VirtualMachineHost>): VirtualMachineHost {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.ips = [];
        if (value !== undefined)
            reflectionMergePartial<VirtualMachineHost>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VirtualMachineHost): VirtualMachineHost {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* repeated string ips */ 2:
                    message.ips.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VirtualMachineHost, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* repeated string ips = 2; */
        for (let i = 0; i < message.ips.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.ips[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message vink.kubevm.io.apis.types.VirtualMachineHost
 */
export const VirtualMachineHost = new VirtualMachineHost$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VirtualMachineResourceMetrics$Type extends MessageType<VirtualMachineResourceMetrics> {
    constructor() {
        super("vink.kubevm.io.apis.types.VirtualMachineResourceMetrics", [
            { no: 1, name: "cpu_usage", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "memery_usage", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<VirtualMachineResourceMetrics>): VirtualMachineResourceMetrics {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cpuUsage = 0;
        message.memeryUsage = 0;
        if (value !== undefined)
            reflectionMergePartial<VirtualMachineResourceMetrics>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VirtualMachineResourceMetrics): VirtualMachineResourceMetrics {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float cpu_usage */ 1:
                    message.cpuUsage = reader.float();
                    break;
                case /* float memery_usage */ 2:
                    message.memeryUsage = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VirtualMachineResourceMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* float cpu_usage = 1; */
        if (message.cpuUsage !== 0)
            writer.tag(1, WireType.Bit32).float(message.cpuUsage);
        /* float memery_usage = 2; */
        if (message.memeryUsage !== 0)
            writer.tag(2, WireType.Bit32).float(message.memeryUsage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message vink.kubevm.io.apis.types.VirtualMachineResourceMetrics
 */
export const VirtualMachineResourceMetrics = new VirtualMachineResourceMetrics$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VirtualMachineNetwork$Type extends MessageType<VirtualMachineNetwork> {
    constructor() {
        super("vink.kubevm.io.apis.types.VirtualMachineNetwork", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "ips_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "network", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "interface", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "ip", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "mac", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "subnet", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "vpc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "multus", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "default", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<VirtualMachineNetwork>): VirtualMachineNetwork {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.ipsName = "";
        message.network = "";
        message.interface = "";
        message.ip = "";
        message.mac = "";
        message.subnet = "";
        message.vpc = "";
        message.multus = "";
        message.default = false;
        if (value !== undefined)
            reflectionMergePartial<VirtualMachineNetwork>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VirtualMachineNetwork): VirtualMachineNetwork {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string ips_name */ 2:
                    message.ipsName = reader.string();
                    break;
                case /* string network */ 3:
                    message.network = reader.string();
                    break;
                case /* string interface */ 4:
                    message.interface = reader.string();
                    break;
                case /* string ip */ 5:
                    message.ip = reader.string();
                    break;
                case /* string mac */ 6:
                    message.mac = reader.string();
                    break;
                case /* string subnet */ 7:
                    message.subnet = reader.string();
                    break;
                case /* string vpc */ 8:
                    message.vpc = reader.string();
                    break;
                case /* string multus */ 9:
                    message.multus = reader.string();
                    break;
                case /* bool default */ 10:
                    message.default = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VirtualMachineNetwork, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string ips_name = 2; */
        if (message.ipsName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.ipsName);
        /* string network = 3; */
        if (message.network !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.network);
        /* string interface = 4; */
        if (message.interface !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.interface);
        /* string ip = 5; */
        if (message.ip !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.ip);
        /* string mac = 6; */
        if (message.mac !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.mac);
        /* string subnet = 7; */
        if (message.subnet !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.subnet);
        /* string vpc = 8; */
        if (message.vpc !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.vpc);
        /* string multus = 9; */
        if (message.multus !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.multus);
        /* bool default = 10; */
        if (message.default !== false)
            writer.tag(10, WireType.Varint).bool(message.default);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message vink.kubevm.io.apis.types.VirtualMachineNetwork
 */
export const VirtualMachineNetwork = new VirtualMachineNetwork$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VirtualMachineDisk$Type extends MessageType<VirtualMachineDisk> {
    constructor() {
        super("vink.kubevm.io.apis.types.VirtualMachineDisk", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "capacity", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "accessMode", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "storageClassName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "rootfs", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "mounted", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<VirtualMachineDisk>): VirtualMachineDisk {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.capacity = "";
        message.status = "";
        message.accessMode = "";
        message.storageClassName = "";
        message.rootfs = false;
        message.mounted = false;
        if (value !== undefined)
            reflectionMergePartial<VirtualMachineDisk>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VirtualMachineDisk): VirtualMachineDisk {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string capacity */ 2:
                    message.capacity = reader.string();
                    break;
                case /* string status */ 3:
                    message.status = reader.string();
                    break;
                case /* string accessMode */ 4:
                    message.accessMode = reader.string();
                    break;
                case /* string storageClassName */ 5:
                    message.storageClassName = reader.string();
                    break;
                case /* bool rootfs */ 6:
                    message.rootfs = reader.bool();
                    break;
                case /* bool mounted */ 7:
                    message.mounted = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VirtualMachineDisk, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string capacity = 2; */
        if (message.capacity !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.capacity);
        /* string status = 3; */
        if (message.status !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.status);
        /* string accessMode = 4; */
        if (message.accessMode !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.accessMode);
        /* string storageClassName = 5; */
        if (message.storageClassName !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.storageClassName);
        /* bool rootfs = 6; */
        if (message.rootfs !== false)
            writer.tag(6, WireType.Varint).bool(message.rootfs);
        /* bool mounted = 7; */
        if (message.mounted !== false)
            writer.tag(7, WireType.Varint).bool(message.mounted);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message vink.kubevm.io.apis.types.VirtualMachineDisk
 */
export const VirtualMachineDisk = new VirtualMachineDisk$Type();
